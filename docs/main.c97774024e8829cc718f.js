(self.webpackChunkatkins_wedding = self.webpackChunkatkins_wedding || []).push([
    [179],
    {
        255: (t) => {
            function e(t) {
                return Promise.resolve().then(() => {
                    var e = new Error("Cannot find module '" + t + "'");
                    throw ((e.code = 'MODULE_NOT_FOUND'), e);
                });
            }
            (e.keys = () => []), (e.resolve = e), (e.id = 255), (t.exports = e);
        },
        208: (t, e, n) => {
            'use strict';
            function s(t) {
                return 'function' == typeof t;
            }
            let r = !1;
            const i = {
                Promise: void 0,
                set useDeprecatedSynchronousErrorHandling(t) {
                    if (t) {
                        const t = new Error();
                        console.warn(
                            'DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + t.stack
                        );
                    } else r && console.log('RxJS: Back to a better error behavior. Thank you. <3');
                    r = t;
                },
                get useDeprecatedSynchronousErrorHandling() {
                    return r;
                },
            };
            function o(t) {
                setTimeout(() => {
                    throw t;
                }, 0);
            }
            const a = {
                    closed: !0,
                    next(t) {},
                    error(t) {
                        if (i.useDeprecatedSynchronousErrorHandling) throw t;
                        o(t);
                    },
                    complete() {},
                },
                l = Array.isArray || ((t) => t && 'number' == typeof t.length);
            function c(t) {
                return null !== t && 'object' == typeof t;
            }
            const u = (() => {
                function t(t) {
                    return (
                        Error.call(this),
                        (this.message = t
                            ? `${t.length} errors occurred during unsubscription:\n${t
                                  .map((t, e) => `${e + 1}) ${t.toString()}`)
                                  .join('\n  ')}`
                            : ''),
                        (this.name = 'UnsubscriptionError'),
                        (this.errors = t),
                        this
                    );
                }
                return (t.prototype = Object.create(Error.prototype)), t;
            })();
            class h {
                constructor(t) {
                    (this.closed = !1),
                        (this._parentOrParents = null),
                        (this._subscriptions = null),
                        t && ((this._ctorUnsubscribe = !0), (this._unsubscribe = t));
                }
                unsubscribe() {
                    let t;
                    if (this.closed) return;
                    let { _parentOrParents: e, _ctorUnsubscribe: n, _unsubscribe: r, _subscriptions: i } = this;
                    if (((this.closed = !0), (this._parentOrParents = null), (this._subscriptions = null), e instanceof h)) e.remove(this);
                    else if (null !== e) for (let s = 0; s < e.length; ++s) e[s].remove(this);
                    if (s(r)) {
                        n && (this._unsubscribe = void 0);
                        try {
                            r.call(this);
                        } catch (o) {
                            t = o instanceof u ? d(o.errors) : [o];
                        }
                    }
                    if (l(i)) {
                        let e = -1,
                            n = i.length;
                        for (; ++e < n; ) {
                            const n = i[e];
                            if (c(n))
                                try {
                                    n.unsubscribe();
                                } catch (o) {
                                    (t = t || []), o instanceof u ? (t = t.concat(d(o.errors))) : t.push(o);
                                }
                        }
                    }
                    if (t) throw new u(t);
                }
                add(t) {
                    let e = t;
                    if (!t) return h.EMPTY;
                    switch (typeof t) {
                        case 'function':
                            e = new h(t);
                        case 'object':
                            if (e === this || e.closed || 'function' != typeof e.unsubscribe) return e;
                            if (this.closed) return e.unsubscribe(), e;
                            if (!(e instanceof h)) {
                                const t = e;
                                (e = new h()), (e._subscriptions = [t]);
                            }
                            break;
                        default:
                            throw new Error('unrecognized teardown ' + t + ' added to Subscription.');
                    }
                    let { _parentOrParents: n } = e;
                    if (null === n) e._parentOrParents = this;
                    else if (n instanceof h) {
                        if (n === this) return e;
                        e._parentOrParents = [n, this];
                    } else {
                        if (-1 !== n.indexOf(this)) return e;
                        n.push(this);
                    }
                    const s = this._subscriptions;
                    return null === s ? (this._subscriptions = [e]) : s.push(e), e;
                }
                remove(t) {
                    const e = this._subscriptions;
                    if (e) {
                        const n = e.indexOf(t);
                        -1 !== n && e.splice(n, 1);
                    }
                }
            }
            function d(t) {
                return t.reduce((t, e) => t.concat(e instanceof u ? e.errors : e), []);
            }
            h.EMPTY = (function (t) {
                return (t.closed = !0), t;
            })(new h());
            const p = 'function' == typeof Symbol ? Symbol('rxSubscriber') : '@@rxSubscriber_' + Math.random();
            class f extends h {
                constructor(t, e, n) {
                    switch (
                        (super(),
                        (this.syncErrorValue = null),
                        (this.syncErrorThrown = !1),
                        (this.syncErrorThrowable = !1),
                        (this.isStopped = !1),
                        arguments.length)
                    ) {
                        case 0:
                            this.destination = a;
                            break;
                        case 1:
                            if (!t) {
                                this.destination = a;
                                break;
                            }
                            if ('object' == typeof t) {
                                t instanceof f
                                    ? ((this.syncErrorThrowable = t.syncErrorThrowable), (this.destination = t), t.add(this))
                                    : ((this.syncErrorThrowable = !0), (this.destination = new m(this, t)));
                                break;
                            }
                        default:
                            (this.syncErrorThrowable = !0), (this.destination = new m(this, t, e, n));
                    }
                }
                [p]() {
                    return this;
                }
                static create(t, e, n) {
                    const s = new f(t, e, n);
                    return (s.syncErrorThrowable = !1), s;
                }
                next(t) {
                    this.isStopped || this._next(t);
                }
                error(t) {
                    this.isStopped || ((this.isStopped = !0), this._error(t));
                }
                complete() {
                    this.isStopped || ((this.isStopped = !0), this._complete());
                }
                unsubscribe() {
                    this.closed || ((this.isStopped = !0), super.unsubscribe());
                }
                _next(t) {
                    this.destination.next(t);
                }
                _error(t) {
                    this.destination.error(t), this.unsubscribe();
                }
                _complete() {
                    this.destination.complete(), this.unsubscribe();
                }
                _unsubscribeAndRecycle() {
                    const { _parentOrParents: t } = this;
                    return (
                        (this._parentOrParents = null),
                        this.unsubscribe(),
                        (this.closed = !1),
                        (this.isStopped = !1),
                        (this._parentOrParents = t),
                        this
                    );
                }
            }
            class m extends f {
                constructor(t, e, n, r) {
                    let i;
                    super(), (this._parentSubscriber = t);
                    let o = this;
                    s(e)
                        ? (i = e)
                        : e &&
                          ((i = e.next),
                          (n = e.error),
                          (r = e.complete),
                          e !== a &&
                              ((o = Object.create(e)),
                              s(o.unsubscribe) && this.add(o.unsubscribe.bind(o)),
                              (o.unsubscribe = this.unsubscribe.bind(this)))),
                        (this._context = o),
                        (this._next = i),
                        (this._error = n),
                        (this._complete = r);
                }
                next(t) {
                    if (!this.isStopped && this._next) {
                        const { _parentSubscriber: e } = this;
                        i.useDeprecatedSynchronousErrorHandling && e.syncErrorThrowable
                            ? this.__tryOrSetError(e, this._next, t) && this.unsubscribe()
                            : this.__tryOrUnsub(this._next, t);
                    }
                }
                error(t) {
                    if (!this.isStopped) {
                        const { _parentSubscriber: e } = this,
                            { useDeprecatedSynchronousErrorHandling: n } = i;
                        if (this._error)
                            n && e.syncErrorThrowable
                                ? (this.__tryOrSetError(e, this._error, t), this.unsubscribe())
                                : (this.__tryOrUnsub(this._error, t), this.unsubscribe());
                        else if (e.syncErrorThrowable) n ? ((e.syncErrorValue = t), (e.syncErrorThrown = !0)) : o(t), this.unsubscribe();
                        else {
                            if ((this.unsubscribe(), n)) throw t;
                            o(t);
                        }
                    }
                }
                complete() {
                    if (!this.isStopped) {
                        const { _parentSubscriber: t } = this;
                        if (this._complete) {
                            const e = () => this._complete.call(this._context);
                            i.useDeprecatedSynchronousErrorHandling && t.syncErrorThrowable
                                ? (this.__tryOrSetError(t, e), this.unsubscribe())
                                : (this.__tryOrUnsub(e), this.unsubscribe());
                        } else this.unsubscribe();
                    }
                }
                __tryOrUnsub(t, e) {
                    try {
                        t.call(this._context, e);
                    } catch (n) {
                        if ((this.unsubscribe(), i.useDeprecatedSynchronousErrorHandling)) throw n;
                        o(n);
                    }
                }
                __tryOrSetError(t, e, n) {
                    if (!i.useDeprecatedSynchronousErrorHandling) throw new Error('bad call');
                    try {
                        e.call(this._context, n);
                    } catch (s) {
                        return i.useDeprecatedSynchronousErrorHandling
                            ? ((t.syncErrorValue = s), (t.syncErrorThrown = !0), !0)
                            : (o(s), !0);
                    }
                    return !1;
                }
                _unsubscribe() {
                    const { _parentSubscriber: t } = this;
                    (this._context = null), (this._parentSubscriber = null), t.unsubscribe();
                }
            }
            const g = ('function' == typeof Symbol && Symbol.observable) || '@@observable';
            function y(t) {
                return t;
            }
            let _ = (() => {
                class t {
                    constructor(t) {
                        (this._isScalar = !1), t && (this._subscribe = t);
                    }
                    lift(e) {
                        const n = new t();
                        return (n.source = this), (n.operator = e), n;
                    }
                    subscribe(t, e, n) {
                        const { operator: s } = this,
                            r = (function (t, e, n) {
                                if (t) {
                                    if (t instanceof f) return t;
                                    if (t[p]) return t[p]();
                                }
                                return t || e || n ? new f(t, e, n) : new f(a);
                            })(t, e, n);
                        if (
                            (r.add(
                                s
                                    ? s.call(r, this.source)
                                    : this.source || (i.useDeprecatedSynchronousErrorHandling && !r.syncErrorThrowable)
                                    ? this._subscribe(r)
                                    : this._trySubscribe(r)
                            ),
                            i.useDeprecatedSynchronousErrorHandling &&
                                r.syncErrorThrowable &&
                                ((r.syncErrorThrowable = !1), r.syncErrorThrown))
                        )
                            throw r.syncErrorValue;
                        return r;
                    }
                    _trySubscribe(t) {
                        try {
                            return this._subscribe(t);
                        } catch (e) {
                            i.useDeprecatedSynchronousErrorHandling && ((t.syncErrorThrown = !0), (t.syncErrorValue = e)),
                                (function (t) {
                                    for (; t; ) {
                                        const { closed: e, destination: n, isStopped: s } = t;
                                        if (e || s) return !1;
                                        t = n && n instanceof f ? n : null;
                                    }
                                    return !0;
                                })(t)
                                    ? t.error(e)
                                    : console.warn(e);
                        }
                    }
                    forEach(t, e) {
                        return new (e = v(e))((e, n) => {
                            let s;
                            s = this.subscribe(
                                (e) => {
                                    try {
                                        t(e);
                                    } catch (r) {
                                        n(r), s && s.unsubscribe();
                                    }
                                },
                                n,
                                e
                            );
                        });
                    }
                    _subscribe(t) {
                        const { source: e } = this;
                        return e && e.subscribe(t);
                    }
                    [g]() {
                        return this;
                    }
                    pipe(...t) {
                        return 0 === t.length
                            ? this
                            : (0 === (e = t).length
                                  ? y
                                  : 1 === e.length
                                  ? e[0]
                                  : function (t) {
                                        return e.reduce((t, e) => e(t), t);
                                    })(this);
                        var e;
                    }
                    toPromise(t) {
                        return new (t = v(t))((t, e) => {
                            let n;
                            this.subscribe(
                                (t) => (n = t),
                                (t) => e(t),
                                () => t(n)
                            );
                        });
                    }
                }
                return (t.create = (e) => new t(e)), t;
            })();
            function v(t) {
                if ((t || (t = i.Promise || Promise), !t)) throw new Error('no Promise impl found');
                return t;
            }
            const b = (() => {
                function t() {
                    return Error.call(this), (this.message = 'object unsubscribed'), (this.name = 'ObjectUnsubscribedError'), this;
                }
                return (t.prototype = Object.create(Error.prototype)), t;
            })();
            class w extends h {
                constructor(t, e) {
                    super(), (this.subject = t), (this.subscriber = e), (this.closed = !1);
                }
                unsubscribe() {
                    if (this.closed) return;
                    this.closed = !0;
                    const t = this.subject,
                        e = t.observers;
                    if (((this.subject = null), !e || 0 === e.length || t.isStopped || t.closed)) return;
                    const n = e.indexOf(this.subscriber);
                    -1 !== n && e.splice(n, 1);
                }
            }
            class x extends f {
                constructor(t) {
                    super(t), (this.destination = t);
                }
            }
            let S = (() => {
                class t extends _ {
                    constructor() {
                        super(),
                            (this.observers = []),
                            (this.closed = !1),
                            (this.isStopped = !1),
                            (this.hasError = !1),
                            (this.thrownError = null);
                    }
                    [p]() {
                        return new x(this);
                    }
                    lift(t) {
                        const e = new E(this, this);
                        return (e.operator = t), e;
                    }
                    next(t) {
                        if (this.closed) throw new b();
                        if (!this.isStopped) {
                            const { observers: e } = this,
                                n = e.length,
                                s = e.slice();
                            for (let r = 0; r < n; r++) s[r].next(t);
                        }
                    }
                    error(t) {
                        if (this.closed) throw new b();
                        (this.hasError = !0), (this.thrownError = t), (this.isStopped = !0);
                        const { observers: e } = this,
                            n = e.length,
                            s = e.slice();
                        for (let r = 0; r < n; r++) s[r].error(t);
                        this.observers.length = 0;
                    }
                    complete() {
                        if (this.closed) throw new b();
                        this.isStopped = !0;
                        const { observers: t } = this,
                            e = t.length,
                            n = t.slice();
                        for (let s = 0; s < e; s++) n[s].complete();
                        this.observers.length = 0;
                    }
                    unsubscribe() {
                        (this.isStopped = !0), (this.closed = !0), (this.observers = null);
                    }
                    _trySubscribe(t) {
                        if (this.closed) throw new b();
                        return super._trySubscribe(t);
                    }
                    _subscribe(t) {
                        if (this.closed) throw new b();
                        return this.hasError
                            ? (t.error(this.thrownError), h.EMPTY)
                            : this.isStopped
                            ? (t.complete(), h.EMPTY)
                            : (this.observers.push(t), new w(this, t));
                    }
                    asObservable() {
                        const t = new _();
                        return (t.source = this), t;
                    }
                }
                return (t.create = (t, e) => new E(t, e)), t;
            })();
            class E extends S {
                constructor(t, e) {
                    super(), (this.destination = t), (this.source = e);
                }
                next(t) {
                    const { destination: e } = this;
                    e && e.next && e.next(t);
                }
                error(t) {
                    const { destination: e } = this;
                    e && e.error && this.destination.error(t);
                }
                complete() {
                    const { destination: t } = this;
                    t && t.complete && this.destination.complete();
                }
                _subscribe(t) {
                    const { source: e } = this;
                    return e ? this.source.subscribe(t) : h.EMPTY;
                }
            }
            function C(t) {
                return t && 'function' == typeof t.schedule;
            }
            function k(t, e) {
                return function (n) {
                    if ('function' != typeof t) throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
                    return n.lift(new T(t, e));
                };
            }
            class T {
                constructor(t, e) {
                    (this.project = t), (this.thisArg = e);
                }
                call(t, e) {
                    return e.subscribe(new A(t, this.project, this.thisArg));
                }
            }
            class A extends f {
                constructor(t, e, n) {
                    super(t), (this.project = e), (this.count = 0), (this.thisArg = n || this);
                }
                _next(t) {
                    let e;
                    try {
                        e = this.project.call(this.thisArg, t, this.count++);
                    } catch (n) {
                        return void this.destination.error(n);
                    }
                    this.destination.next(e);
                }
            }
            const R = (t) => (e) => {
                    for (let n = 0, s = t.length; n < s && !e.closed; n++) e.next(t[n]);
                    e.complete();
                },
                O = 'function' == typeof Symbol && Symbol.iterator ? Symbol.iterator : '@@iterator',
                I = (t) => t && 'number' == typeof t.length && 'function' != typeof t;
            function P(t) {
                return !!t && 'function' != typeof t.subscribe && 'function' == typeof t.then;
            }
            const L = (t) => {
                if (t && 'function' == typeof t[g])
                    return (
                        (n = t),
                        (t) => {
                            const e = n[g]();
                            if ('function' != typeof e.subscribe)
                                throw new TypeError('Provided object does not correctly implement Symbol.observable');
                            return e.subscribe(t);
                        }
                    );
                if (I(t)) return R(t);
                if (P(t))
                    return (
                        (t) => (e) =>
                            t
                                .then(
                                    (t) => {
                                        e.closed || (e.next(t), e.complete());
                                    },
                                    (t) => e.error(t)
                                )
                                .then(null, o),
                            e
                    )(t);
                if (t && 'function' == typeof t[O])
                    return (
                        (e = t),
                        (t) => {
                            const n = e[O]();
                            for (;;) {
                                let e;
                                try {
                                    e = n.next();
                                } catch (s) {
                                    return t.error(s), t;
                                }
                                if (e.done) {
                                    t.complete();
                                    break;
                                }
                                if ((t.next(e.value), t.closed)) break;
                            }
                            return (
                                'function' == typeof n.return &&
                                    t.add(() => {
                                        n.return && n.return();
                                    }),
                                t
                            );
                        }
                    );
                {
                    const e = c(t) ? 'an invalid object' : `'${t}'`;
                    throw new TypeError(
                        `You provided ${e} where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.`
                    );
                }
                var e, n;
            };
            function D(t, e) {
                return new _((n) => {
                    const s = new h();
                    let r = 0;
                    return (
                        s.add(
                            e.schedule(function () {
                                r !== t.length ? (n.next(t[r++]), n.closed || s.add(this.schedule())) : n.complete();
                            })
                        ),
                        s
                    );
                });
            }
            function N(t, e) {
                return e
                    ? (function (t, e) {
                          if (null != t) {
                              if (
                                  (function (t) {
                                      return t && 'function' == typeof t[g];
                                  })(t)
                              )
                                  return (function (t, e) {
                                      return new _((n) => {
                                          const s = new h();
                                          return (
                                              s.add(
                                                  e.schedule(() => {
                                                      const r = t[g]();
                                                      s.add(
                                                          r.subscribe({
                                                              next(t) {
                                                                  s.add(e.schedule(() => n.next(t)));
                                                              },
                                                              error(t) {
                                                                  s.add(e.schedule(() => n.error(t)));
                                                              },
                                                              complete() {
                                                                  s.add(e.schedule(() => n.complete()));
                                                              },
                                                          })
                                                      );
                                                  })
                                              ),
                                              s
                                          );
                                      });
                                  })(t, e);
                              if (P(t))
                                  return (function (t, e) {
                                      return new _((n) => {
                                          const s = new h();
                                          return (
                                              s.add(
                                                  e.schedule(() =>
                                                      t.then(
                                                          (t) => {
                                                              s.add(
                                                                  e.schedule(() => {
                                                                      n.next(t), s.add(e.schedule(() => n.complete()));
                                                                  })
                                                              );
                                                          },
                                                          (t) => {
                                                              s.add(e.schedule(() => n.error(t)));
                                                          }
                                                      )
                                                  )
                                              ),
                                              s
                                          );
                                      });
                                  })(t, e);
                              if (I(t)) return D(t, e);
                              if (
                                  (function (t) {
                                      return t && 'function' == typeof t[O];
                                  })(t) ||
                                  'string' == typeof t
                              )
                                  return (function (t, e) {
                                      if (!t) throw new Error('Iterable cannot be null');
                                      return new _((n) => {
                                          const s = new h();
                                          let r;
                                          return (
                                              s.add(() => {
                                                  r && 'function' == typeof r.return && r.return();
                                              }),
                                              s.add(
                                                  e.schedule(() => {
                                                      (r = t[O]()),
                                                          s.add(
                                                              e.schedule(function () {
                                                                  if (n.closed) return;
                                                                  let t, e;
                                                                  try {
                                                                      const n = r.next();
                                                                      (t = n.value), (e = n.done);
                                                                  } catch (s) {
                                                                      return void n.error(s);
                                                                  }
                                                                  e ? n.complete() : (n.next(t), this.schedule());
                                                              })
                                                          );
                                                  })
                                              ),
                                              s
                                          );
                                      });
                                  })(t, e);
                          }
                          throw new TypeError(((null !== t && typeof t) || t) + ' is not observable');
                      })(t, e)
                    : t instanceof _
                    ? t
                    : new _(L(t));
            }
            class F extends f {
                constructor(t) {
                    super(), (this.parent = t);
                }
                _next(t) {
                    this.parent.notifyNext(t);
                }
                _error(t) {
                    this.parent.notifyError(t), this.unsubscribe();
                }
                _complete() {
                    this.parent.notifyComplete(), this.unsubscribe();
                }
            }
            class M extends f {
                notifyNext(t) {
                    this.destination.next(t);
                }
                notifyError(t) {
                    this.destination.error(t);
                }
                notifyComplete() {
                    this.destination.complete();
                }
            }
            function j(t, e) {
                if (e.closed) return;
                if (t instanceof _) return t.subscribe(e);
                let n;
                try {
                    n = L(t)(e);
                } catch (s) {
                    e.error(s);
                }
                return n;
            }
            function H(t, e, n = Number.POSITIVE_INFINITY) {
                return 'function' == typeof e
                    ? (s) => s.pipe(H((n, s) => N(t(n, s)).pipe(k((t, r) => e(n, t, s, r))), n))
                    : ('number' == typeof e && (n = e), (e) => e.lift(new B(t, n)));
            }
            class B {
                constructor(t, e = Number.POSITIVE_INFINITY) {
                    (this.project = t), (this.concurrent = e);
                }
                call(t, e) {
                    return e.subscribe(new V(t, this.project, this.concurrent));
                }
            }
            class V extends M {
                constructor(t, e, n = Number.POSITIVE_INFINITY) {
                    super(t),
                        (this.project = e),
                        (this.concurrent = n),
                        (this.hasCompleted = !1),
                        (this.buffer = []),
                        (this.active = 0),
                        (this.index = 0);
                }
                _next(t) {
                    this.active < this.concurrent ? this._tryNext(t) : this.buffer.push(t);
                }
                _tryNext(t) {
                    let e;
                    const n = this.index++;
                    try {
                        e = this.project(t, n);
                    } catch (s) {
                        return void this.destination.error(s);
                    }
                    this.active++, this._innerSub(e);
                }
                _innerSub(t) {
                    const e = new F(this),
                        n = this.destination;
                    n.add(e);
                    const s = j(t, e);
                    s !== e && n.add(s);
                }
                _complete() {
                    (this.hasCompleted = !0),
                        0 === this.active && 0 === this.buffer.length && this.destination.complete(),
                        this.unsubscribe();
                }
                notifyNext(t) {
                    this.destination.next(t);
                }
                notifyComplete() {
                    const t = this.buffer;
                    this.active--,
                        t.length > 0 ? this._next(t.shift()) : 0 === this.active && this.hasCompleted && this.destination.complete();
                }
            }
            function U(t = Number.POSITIVE_INFINITY) {
                return H(y, t);
            }
            function $(t, e) {
                return e ? D(t, e) : new _(R(t));
            }
            function z(...t) {
                let e = Number.POSITIVE_INFINITY,
                    n = null,
                    s = t[t.length - 1];
                return (
                    C(s)
                        ? ((n = t.pop()), t.length > 1 && 'number' == typeof t[t.length - 1] && (e = t.pop()))
                        : 'number' == typeof s && (e = t.pop()),
                    null === n && 1 === t.length && t[0] instanceof _ ? t[0] : U(e)($(t, n))
                );
            }
            function q() {
                return function (t) {
                    return t.lift(new W(t));
                };
            }
            class W {
                constructor(t) {
                    this.connectable = t;
                }
                call(t, e) {
                    const { connectable: n } = this;
                    n._refCount++;
                    const s = new Q(t, n),
                        r = e.subscribe(s);
                    return s.closed || (s.connection = n.connect()), r;
                }
            }
            class Q extends f {
                constructor(t, e) {
                    super(t), (this.connectable = e);
                }
                _unsubscribe() {
                    const { connectable: t } = this;
                    if (!t) return void (this.connection = null);
                    this.connectable = null;
                    const e = t._refCount;
                    if (e <= 0) return void (this.connection = null);
                    if (((t._refCount = e - 1), e > 1)) return void (this.connection = null);
                    const { connection: n } = this,
                        s = t._connection;
                    (this.connection = null), !s || (n && s !== n) || s.unsubscribe();
                }
            }
            class K extends _ {
                constructor(t, e) {
                    super(), (this.source = t), (this.subjectFactory = e), (this._refCount = 0), (this._isComplete = !1);
                }
                _subscribe(t) {
                    return this.getSubject().subscribe(t);
                }
                getSubject() {
                    const t = this._subject;
                    return (t && !t.isStopped) || (this._subject = this.subjectFactory()), this._subject;
                }
                connect() {
                    let t = this._connection;
                    return (
                        t ||
                            ((this._isComplete = !1),
                            (t = this._connection = new h()),
                            t.add(this.source.subscribe(new Y(this.getSubject(), this))),
                            t.closed && ((this._connection = null), (t = h.EMPTY))),
                        t
                    );
                }
                refCount() {
                    return q()(this);
                }
            }
            const Z = (() => {
                const t = K.prototype;
                return {
                    operator: { value: null },
                    _refCount: { value: 0, writable: !0 },
                    _subject: { value: null, writable: !0 },
                    _connection: { value: null, writable: !0 },
                    _subscribe: { value: t._subscribe },
                    _isComplete: { value: t._isComplete, writable: !0 },
                    getSubject: { value: t.getSubject },
                    connect: { value: t.connect },
                    refCount: { value: t.refCount },
                };
            })();
            class Y extends x {
                constructor(t, e) {
                    super(t), (this.connectable = e);
                }
                _error(t) {
                    this._unsubscribe(), super._error(t);
                }
                _complete() {
                    (this.connectable._isComplete = !0), this._unsubscribe(), super._complete();
                }
                _unsubscribe() {
                    const t = this.connectable;
                    if (t) {
                        this.connectable = null;
                        const e = t._connection;
                        (t._refCount = 0), (t._subject = null), (t._connection = null), e && e.unsubscribe();
                    }
                }
            }
            function G() {
                return new S();
            }
            function X() {
                return (t) => {
                    return q()(
                        ((e = G),
                        function (t) {
                            let n;
                            n =
                                'function' == typeof e
                                    ? e
                                    : function () {
                                          return e;
                                      };
                            const s = Object.create(t, Z);
                            return (s.source = t), (s.subjectFactory = n), s;
                        })(t)
                    );
                    var e;
                };
            }
            function J(t) {
                for (let e in t) if (t[e] === J) return e;
                throw Error('Could not find renamed property on target object.');
            }
            function tt(t, e) {
                for (const n in e) e.hasOwnProperty(n) && !t.hasOwnProperty(n) && (t[n] = e[n]);
            }
            function et(t) {
                if ('string' == typeof t) return t;
                if (Array.isArray(t)) return '[' + t.map(et).join(', ') + ']';
                if (null == t) return '' + t;
                if (t.overriddenName) return `${t.overriddenName}`;
                if (t.name) return `${t.name}`;
                const e = t.toString();
                if (null == e) return '' + e;
                const n = e.indexOf('\n');
                return -1 === n ? e : e.substring(0, n);
            }
            function nt(t, e) {
                return null == t || '' === t ? (null === e ? '' : e) : null == e || '' === e ? t : t + ' ' + e;
            }
            const st = J({ __forward_ref__: J });
            function rt(t) {
                return (
                    (t.__forward_ref__ = rt),
                    (t.toString = function () {
                        return et(this());
                    }),
                    t
                );
            }
            function it(t) {
                return ot(t) ? t() : t;
            }
            function ot(t) {
                return 'function' == typeof t && t.hasOwnProperty(st) && t.__forward_ref__ === rt;
            }
            class at extends Error {
                constructor(t, e) {
                    super(
                        (function (t, e) {
                            return `${t ? `NG0${t}: ` : ''}${e}`;
                        })(t, e)
                    ),
                        (this.code = t);
                }
            }
            function lt(t) {
                return 'string' == typeof t ? t : null == t ? '' : String(t);
            }
            function ct(t) {
                return 'function' == typeof t
                    ? t.name || t.toString()
                    : 'object' == typeof t && null != t && 'function' == typeof t.type
                    ? t.type.name || t.type.toString()
                    : lt(t);
            }
            function ut(t, e) {
                const n = e ? ` in ${e}` : '';
                throw new at('201', `No provider for ${ct(t)} found${n}`);
            }
            function ht(t) {
                return { token: t.token, providedIn: t.providedIn || null, factory: t.factory, value: void 0 };
            }
            function dt(t) {
                return { providers: t.providers || [], imports: t.imports || [] };
            }
            function pt(t) {
                return ft(t, gt) || ft(t, _t);
            }
            function ft(t, e) {
                return t.hasOwnProperty(e) ? t[e] : null;
            }
            function mt(t) {
                return t && (t.hasOwnProperty(yt) || t.hasOwnProperty(vt)) ? t[yt] : null;
            }
            const gt = J({ '\u0275prov': J }),
                yt = J({ '\u0275inj': J }),
                _t = J({ ngInjectableDef: J }),
                vt = J({ ngInjectorDef: J });
            var bt = (() => (
                ((bt = bt || {})[(bt.Default = 0)] = 'Default'),
                (bt[(bt.Host = 1)] = 'Host'),
                (bt[(bt.Self = 2)] = 'Self'),
                (bt[(bt.SkipSelf = 4)] = 'SkipSelf'),
                (bt[(bt.Optional = 8)] = 'Optional'),
                bt
            ))();
            let wt;
            function xt(t) {
                const e = wt;
                return (wt = t), e;
            }
            function St(t, e, n) {
                const s = pt(t);
                return s && 'root' == s.providedIn
                    ? void 0 === s.value
                        ? (s.value = s.factory())
                        : s.value
                    : n & bt.Optional
                    ? null
                    : void 0 !== e
                    ? e
                    : void ut(et(t), 'Injector');
            }
            function Et(t) {
                return { toString: t }.toString();
            }
            var Ct = (() => (((Ct = Ct || {})[(Ct.OnPush = 0)] = 'OnPush'), (Ct[(Ct.Default = 1)] = 'Default'), Ct))(),
                kt = (() => (
                    ((kt = kt || {})[(kt.Emulated = 0)] = 'Emulated'),
                    (kt[(kt.None = 2)] = 'None'),
                    (kt[(kt.ShadowDom = 3)] = 'ShadowDom'),
                    kt
                ))();
            const Tt = 'undefined' != typeof globalThis && globalThis,
                At = 'undefined' != typeof window && window,
                Rt = 'undefined' != typeof self && 'undefined' != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope && self,
                Ot = 'undefined' != typeof global && global,
                It = Tt || Ot || At || Rt,
                Pt = {},
                Lt = [],
                Dt = J({ '\u0275cmp': J }),
                Nt = J({ '\u0275dir': J }),
                Ft = J({ '\u0275pipe': J }),
                Mt = J({ '\u0275mod': J }),
                jt = J({ '\u0275loc': J }),
                Ht = J({ '\u0275fac': J }),
                Bt = J({ __NG_ELEMENT_ID__: J });
            let Vt = 0;
            function Ut(t) {
                return Et(() => {
                    const e = {},
                        n = {
                            type: t.type,
                            providersResolver: null,
                            decls: t.decls,
                            vars: t.vars,
                            factory: null,
                            template: t.template || null,
                            consts: t.consts || null,
                            ngContentSelectors: t.ngContentSelectors,
                            hostBindings: t.hostBindings || null,
                            hostVars: t.hostVars || 0,
                            hostAttrs: t.hostAttrs || null,
                            contentQueries: t.contentQueries || null,
                            declaredInputs: e,
                            inputs: null,
                            outputs: null,
                            exportAs: t.exportAs || null,
                            onPush: t.changeDetection === Ct.OnPush,
                            directiveDefs: null,
                            pipeDefs: null,
                            selectors: t.selectors || Lt,
                            viewQuery: t.viewQuery || null,
                            features: t.features || null,
                            data: t.data || {},
                            encapsulation: t.encapsulation || kt.Emulated,
                            id: 'c',
                            styles: t.styles || Lt,
                            _: null,
                            setInput: null,
                            schemas: t.schemas || null,
                            tView: null,
                        },
                        s = t.directives,
                        r = t.features,
                        i = t.pipes;
                    return (
                        (n.id += Vt++),
                        (n.inputs = Qt(t.inputs, e)),
                        (n.outputs = Qt(t.outputs)),
                        r && r.forEach((t) => t(n)),
                        (n.directiveDefs = s ? () => ('function' == typeof s ? s() : s).map($t) : null),
                        (n.pipeDefs = i ? () => ('function' == typeof i ? i() : i).map(zt) : null),
                        n
                    );
                });
            }
            function $t(t) {
                return (
                    Zt(t) ||
                    (function (t) {
                        return t[Nt] || null;
                    })(t)
                );
            }
            function zt(t) {
                return (function (t) {
                    return t[Ft] || null;
                })(t);
            }
            const qt = {};
            function Wt(t) {
                return Et(() => {
                    const e = {
                        type: t.type,
                        bootstrap: t.bootstrap || Lt,
                        declarations: t.declarations || Lt,
                        imports: t.imports || Lt,
                        exports: t.exports || Lt,
                        transitiveCompileScopes: null,
                        schemas: t.schemas || null,
                        id: t.id || null,
                    };
                    return null != t.id && (qt[t.id] = t.type), e;
                });
            }
            function Qt(t, e) {
                if (null == t) return Pt;
                const n = {};
                for (const s in t)
                    if (t.hasOwnProperty(s)) {
                        let r = t[s],
                            i = r;
                        Array.isArray(r) && ((i = r[1]), (r = r[0])), (n[r] = s), e && (e[r] = i);
                    }
                return n;
            }
            const Kt = Ut;
            function Zt(t) {
                return t[Dt] || null;
            }
            function Yt(t, e) {
                const n = t[Mt] || null;
                if (!n && !0 === e) throw new Error(`Type ${et(t)} does not have '\u0275mod' property.`);
                return n;
            }
            const Gt = 20,
                Xt = 10;
            function Jt(t) {
                return Array.isArray(t) && 'object' == typeof t[1];
            }
            function te(t) {
                return Array.isArray(t) && !0 === t[1];
            }
            function ee(t) {
                return 0 != (8 & t.flags);
            }
            function ne(t) {
                return 2 == (2 & t.flags);
            }
            function se(t) {
                return 1 == (1 & t.flags);
            }
            function re(t) {
                return null !== t.template;
            }
            function ie(t, e) {
                return t.hasOwnProperty(Ht) ? t[Ht] : null;
            }
            class oe {
                constructor(t, e, n) {
                    (this.previousValue = t), (this.currentValue = e), (this.firstChange = n);
                }
                isFirstChange() {
                    return this.firstChange;
                }
            }
            function ae() {
                return le;
            }
            function le(t) {
                return t.type.prototype.ngOnChanges && (t.setInput = ue), ce;
            }
            function ce() {
                const t = he(this),
                    e = null == t ? void 0 : t.current;
                if (e) {
                    const n = t.previous;
                    if (n === Pt) t.previous = e;
                    else for (let t in e) n[t] = e[t];
                    (t.current = null), this.ngOnChanges(e);
                }
            }
            function ue(t, e, n, s) {
                const r =
                        he(t) ||
                        (function (t, e) {
                            return (t.__ngSimpleChanges__ = e);
                        })(t, { previous: Pt, current: null }),
                    i = r.current || (r.current = {}),
                    o = r.previous,
                    a = this.declaredInputs[n],
                    l = o[a];
                (i[a] = new oe(l && l.currentValue, e, o === Pt)), (t[s] = e);
            }
            function he(t) {
                return t.__ngSimpleChanges__ || null;
            }
            ae.ngInherit = !0;
            const de = 'http://www.w3.org/2000/svg';
            let pe;
            function fe(t) {
                return !!t.listen;
            }
            const me = { createRenderer: (t, e) => (void 0 !== pe ? pe : 'undefined' != typeof document ? document : void 0) };
            function ge(t) {
                for (; Array.isArray(t); ) t = t[0];
                return t;
            }
            function ye(t, e) {
                return ge(e[t]);
            }
            function _e(t, e) {
                return ge(e[t.index]);
            }
            function ve(t, e) {
                return t.data[e];
            }
            function be(t, e) {
                const n = e[t];
                return Jt(n) ? n : n[0];
            }
            function we(t) {
                return 4 == (4 & t[2]);
            }
            function xe(t) {
                return 128 == (128 & t[2]);
            }
            function Se(t, e) {
                return null == e ? null : t[e];
            }
            function Ee(t) {
                t[18] = 0;
            }
            function Ce(t, e) {
                t[5] += e;
                let n = t,
                    s = t[3];
                for (; null !== s && ((1 === e && 1 === n[5]) || (-1 === e && 0 === n[5])); ) (s[5] += e), (n = s), (s = s[3]);
            }
            const ke = { lFrame: Ke(null), bindingsEnabled: !0, isInCheckNoChangesMode: !1 };
            function Te() {
                return ke.bindingsEnabled;
            }
            function Ae() {
                return ke.lFrame.lView;
            }
            function Re() {
                return ke.lFrame.tView;
            }
            function Oe() {
                let t = Ie();
                for (; null !== t && 64 === t.type; ) t = t.parent;
                return t;
            }
            function Ie() {
                return ke.lFrame.currentTNode;
            }
            function Pe(t, e) {
                const n = ke.lFrame;
                (n.currentTNode = t), (n.isParent = e);
            }
            function Le() {
                return ke.lFrame.isParent;
            }
            function De() {
                ke.lFrame.isParent = !1;
            }
            function Ne() {
                return ke.isInCheckNoChangesMode;
            }
            function Fe(t) {
                ke.isInCheckNoChangesMode = t;
            }
            function Me() {
                return ke.lFrame.bindingIndex++;
            }
            function je(t) {
                const e = ke.lFrame,
                    n = e.bindingIndex;
                return (e.bindingIndex = e.bindingIndex + t), n;
            }
            function He(t, e) {
                const n = ke.lFrame;
                (n.bindingIndex = n.bindingRootIndex = t), Be(e);
            }
            function Be(t) {
                ke.lFrame.currentDirectiveIndex = t;
            }
            function Ve(t) {
                const e = ke.lFrame.currentDirectiveIndex;
                return -1 === e ? null : t[e];
            }
            function Ue() {
                return ke.lFrame.currentQueryIndex;
            }
            function $e(t) {
                ke.lFrame.currentQueryIndex = t;
            }
            function ze(t) {
                const e = t[1];
                return 2 === e.type ? e.declTNode : 1 === e.type ? t[6] : null;
            }
            function qe(t, e, n) {
                if (n & bt.SkipSelf) {
                    let s = e,
                        r = t;
                    for (; (s = s.parent), !(null !== s || n & bt.Host || ((s = ze(r)), null === s) || ((r = r[15]), 10 & s.type)); );
                    if (null === s) return !1;
                    (e = s), (t = r);
                }
                const s = (ke.lFrame = Qe());
                return (s.currentTNode = e), (s.lView = t), !0;
            }
            function We(t) {
                const e = Qe(),
                    n = t[1];
                (ke.lFrame = e),
                    (e.currentTNode = n.firstChild),
                    (e.lView = t),
                    (e.tView = n),
                    (e.contextLView = t),
                    (e.bindingIndex = n.bindingStartIndex),
                    (e.inI18n = !1);
            }
            function Qe() {
                const t = ke.lFrame,
                    e = null === t ? null : t.child;
                return null === e ? Ke(t) : e;
            }
            function Ke(t) {
                const e = {
                    currentTNode: null,
                    isParent: !0,
                    lView: null,
                    tView: null,
                    selectedIndex: -1,
                    contextLView: null,
                    elementDepthCount: 0,
                    currentNamespace: null,
                    currentDirectiveIndex: -1,
                    bindingRootIndex: -1,
                    bindingIndex: -1,
                    currentQueryIndex: 0,
                    parent: t,
                    child: null,
                    inI18n: !1,
                };
                return null !== t && (t.child = e), e;
            }
            function Ze() {
                const t = ke.lFrame;
                return (ke.lFrame = t.parent), (t.currentTNode = null), (t.lView = null), t;
            }
            const Ye = Ze;
            function Ge() {
                const t = Ze();
                (t.isParent = !0),
                    (t.tView = null),
                    (t.selectedIndex = -1),
                    (t.contextLView = null),
                    (t.elementDepthCount = 0),
                    (t.currentDirectiveIndex = -1),
                    (t.currentNamespace = null),
                    (t.bindingRootIndex = -1),
                    (t.bindingIndex = -1),
                    (t.currentQueryIndex = 0);
            }
            function Xe() {
                return ke.lFrame.selectedIndex;
            }
            function Je(t) {
                ke.lFrame.selectedIndex = t;
            }
            function tn() {
                const t = ke.lFrame;
                return ve(t.tView, t.selectedIndex);
            }
            function en() {
                ke.lFrame.currentNamespace = de;
            }
            function nn(t, e) {
                for (let n = e.directiveStart, s = e.directiveEnd; n < s; n++) {
                    const e = t.data[n].type.prototype,
                        { ngAfterContentInit: s, ngAfterContentChecked: r, ngAfterViewInit: i, ngAfterViewChecked: o, ngOnDestroy: a } = e;
                    s && (t.contentHooks || (t.contentHooks = [])).push(-n, s),
                        r &&
                            ((t.contentHooks || (t.contentHooks = [])).push(n, r),
                            (t.contentCheckHooks || (t.contentCheckHooks = [])).push(n, r)),
                        i && (t.viewHooks || (t.viewHooks = [])).push(-n, i),
                        o && ((t.viewHooks || (t.viewHooks = [])).push(n, o), (t.viewCheckHooks || (t.viewCheckHooks = [])).push(n, o)),
                        null != a && (t.destroyHooks || (t.destroyHooks = [])).push(n, a);
                }
            }
            function sn(t, e, n) {
                an(t, e, 3, n);
            }
            function rn(t, e, n, s) {
                (3 & t[2]) === n && an(t, e, n, s);
            }
            function on(t, e) {
                let n = t[2];
                (3 & n) === e && ((n &= 2047), (n += 1), (t[2] = n));
            }
            function an(t, e, n, s) {
                const r = null != s ? s : -1,
                    i = e.length - 1;
                let o = 0;
                for (let a = void 0 !== s ? 65535 & t[18] : 0; a < i; a++)
                    if ('number' == typeof e[a + 1]) {
                        if (((o = e[a]), null != s && o >= s)) break;
                    } else
                        e[a] < 0 && (t[18] += 65536), (o < r || -1 == r) && (ln(t, n, e, a), (t[18] = (4294901760 & t[18]) + a + 2)), a++;
            }
            function ln(t, e, n, s) {
                const r = n[s] < 0,
                    i = n[s + 1],
                    o = t[r ? -n[s] : n[s]];
                if (r) {
                    if (t[2] >> 11 < t[18] >> 16 && (3 & t[2]) === e) {
                        t[2] += 2048;
                        try {
                            i.call(o);
                        } finally {
                        }
                    }
                } else
                    try {
                        i.call(o);
                    } finally {
                    }
            }
            const cn = -1;
            class un {
                constructor(t, e, n) {
                    (this.factory = t), (this.resolving = !1), (this.canSeeViewProviders = e), (this.injectImpl = n);
                }
            }
            function hn(t, e, n) {
                const s = fe(t);
                let r = 0;
                for (; r < n.length; ) {
                    const i = n[r];
                    if ('number' == typeof i) {
                        if (0 !== i) break;
                        r++;
                        const o = n[r++],
                            a = n[r++],
                            l = n[r++];
                        s ? t.setAttribute(e, a, l, o) : e.setAttributeNS(o, a, l);
                    } else {
                        const o = i,
                            a = n[++r];
                        pn(o) ? s && t.setProperty(e, o, a) : s ? t.setAttribute(e, o, a) : e.setAttribute(o, a), r++;
                    }
                }
                return r;
            }
            function dn(t) {
                return 3 === t || 4 === t || 6 === t;
            }
            function pn(t) {
                return 64 === t.charCodeAt(0);
            }
            function fn(t, e) {
                if (null === e || 0 === e.length);
                else if (null === t || 0 === t.length) t = e.slice();
                else {
                    let n = -1;
                    for (let s = 0; s < e.length; s++) {
                        const r = e[s];
                        'number' == typeof r ? (n = r) : 0 === n || mn(t, n, r, null, -1 === n || 2 === n ? e[++s] : null);
                    }
                }
                return t;
            }
            function mn(t, e, n, s, r) {
                let i = 0,
                    o = t.length;
                if (-1 === e) o = -1;
                else
                    for (; i < t.length; ) {
                        const n = t[i++];
                        if ('number' == typeof n) {
                            if (n === e) {
                                o = -1;
                                break;
                            }
                            if (n > e) {
                                o = i - 1;
                                break;
                            }
                        }
                    }
                for (; i < t.length; ) {
                    const e = t[i];
                    if ('number' == typeof e) break;
                    if (e === n) {
                        if (null === s) return void (null !== r && (t[i + 1] = r));
                        if (s === t[i + 1]) return void (t[i + 2] = r);
                    }
                    i++, null !== s && i++, null !== r && i++;
                }
                -1 !== o && (t.splice(o, 0, e), (i = o + 1)),
                    t.splice(i++, 0, n),
                    null !== s && t.splice(i++, 0, s),
                    null !== r && t.splice(i++, 0, r);
            }
            function gn(t) {
                return t !== cn;
            }
            function yn(t) {
                return 32767 & t;
            }
            function _n(t, e) {
                let n = t >> 16,
                    s = e;
                for (; n > 0; ) (s = s[15]), n--;
                return s;
            }
            let vn = !0;
            function bn(t) {
                const e = vn;
                return (vn = t), e;
            }
            let wn = 0;
            function xn(t, e) {
                const n = En(t, e);
                if (-1 !== n) return n;
                const s = e[1];
                s.firstCreatePass && ((t.injectorIndex = e.length), Sn(s.data, t), Sn(e, null), Sn(s.blueprint, null));
                const r = Cn(t, e),
                    i = t.injectorIndex;
                if (gn(r)) {
                    const t = yn(r),
                        n = _n(r, e),
                        s = n[1].data;
                    for (let r = 0; r < 8; r++) e[i + r] = n[t + r] | s[t + r];
                }
                return (e[i + 8] = r), i;
            }
            function Sn(t, e) {
                t.push(0, 0, 0, 0, 0, 0, 0, 0, e);
            }
            function En(t, e) {
                return -1 === t.injectorIndex || (t.parent && t.parent.injectorIndex === t.injectorIndex) || null === e[t.injectorIndex + 8]
                    ? -1
                    : t.injectorIndex;
            }
            function Cn(t, e) {
                if (t.parent && -1 !== t.parent.injectorIndex) return t.parent.injectorIndex;
                let n = 0,
                    s = null,
                    r = e;
                for (; null !== r; ) {
                    const t = r[1],
                        e = t.type;
                    if (((s = 2 === e ? t.declTNode : 1 === e ? r[6] : null), null === s)) return cn;
                    if ((n++, (r = r[15]), -1 !== s.injectorIndex)) return s.injectorIndex | (n << 16);
                }
                return cn;
            }
            function kn(t, e, n) {
                !(function (t, e, n) {
                    let s;
                    'string' == typeof n ? (s = n.charCodeAt(0) || 0) : n.hasOwnProperty(Bt) && (s = n[Bt]),
                        null == s && (s = n[Bt] = wn++);
                    const r = 255 & s;
                    e.data[t + (r >> 5)] |= 1 << r;
                })(t, e, n);
            }
            function Tn(t, e, n) {
                if (n & bt.Optional) return t;
                ut(e, 'NodeInjector');
            }
            function An(t, e, n, s) {
                if ((n & bt.Optional && void 0 === s && (s = null), 0 == (n & (bt.Self | bt.Host)))) {
                    const r = t[9],
                        i = xt(void 0);
                    try {
                        return r ? r.get(e, s, n & bt.Optional) : St(e, s, n & bt.Optional);
                    } finally {
                        xt(i);
                    }
                }
                return Tn(s, e, n);
            }
            function Rn(t, e, n, s = bt.Default, r) {
                if (null !== t) {
                    const i = (function (t) {
                        if ('string' == typeof t) return t.charCodeAt(0) || 0;
                        const e = t.hasOwnProperty(Bt) ? t[Bt] : void 0;
                        return 'number' == typeof e ? (e >= 0 ? 255 & e : In) : e;
                    })(n);
                    if ('function' == typeof i) {
                        if (!qe(e, t, s)) return s & bt.Host ? Tn(r, n, s) : An(e, n, s, r);
                        try {
                            const t = i(s);
                            if (null != t || s & bt.Optional) return t;
                            ut(n);
                        } finally {
                            Ye();
                        }
                    } else if ('number' == typeof i) {
                        let r = null,
                            o = En(t, e),
                            a = cn,
                            l = s & bt.Host ? e[16][6] : null;
                        for (
                            (-1 === o || s & bt.SkipSelf) &&
                            ((a = -1 === o ? Cn(t, e) : e[o + 8]),
                            a !== cn && Fn(s, !1) ? ((r = e[1]), (o = yn(a)), (e = _n(a, e))) : (o = -1));
                            -1 !== o;

                        ) {
                            const t = e[1];
                            if (Nn(i, o, t.data)) {
                                const t = Pn(o, e, n, r, s, l);
                                if (t !== On) return t;
                            }
                            (a = e[o + 8]),
                                a !== cn && Fn(s, e[1].data[o + 8] === l) && Nn(i, o, e)
                                    ? ((r = t), (o = yn(a)), (e = _n(a, e)))
                                    : (o = -1);
                        }
                    }
                }
                return An(e, n, s, r);
            }
            const On = {};
            function In() {
                return new Mn(Oe(), Ae());
            }
            function Pn(t, e, n, s, r, i) {
                const o = e[1],
                    a = o.data[t + 8],
                    l = Ln(a, o, n, null == s ? ne(a) && vn : s != o && 0 != (3 & a.type), r & bt.Host && i === a);
                return null !== l ? Dn(e, o, l, a) : On;
            }
            function Ln(t, e, n, s, r) {
                const i = t.providerIndexes,
                    o = e.data,
                    a = 1048575 & i,
                    l = t.directiveStart,
                    c = i >> 20,
                    u = r ? a + c : t.directiveEnd;
                for (let h = s ? a : a + c; h < u; h++) {
                    const t = o[h];
                    if ((h < l && n === t) || (h >= l && t.type === n)) return h;
                }
                if (r) {
                    const t = o[l];
                    if (t && re(t) && t.type === n) return l;
                }
                return null;
            }
            function Dn(t, e, n, s) {
                let r = t[n];
                const i = e.data;
                if (r instanceof un) {
                    const o = r;
                    o.resolving &&
                        (function (t, e) {
                            throw new at('200', `Circular dependency in DI detected for ${t}`);
                        })(ct(i[n]));
                    const a = bn(o.canSeeViewProviders);
                    o.resolving = !0;
                    const l = o.injectImpl ? xt(o.injectImpl) : null;
                    qe(t, s, bt.Default);
                    try {
                        (r = t[n] = o.factory(void 0, i, t, s)),
                            e.firstCreatePass &&
                                n >= s.directiveStart &&
                                (function (t, e, n) {
                                    const { ngOnChanges: s, ngOnInit: r, ngDoCheck: i } = e.type.prototype;
                                    if (s) {
                                        const s = le(e);
                                        (n.preOrderHooks || (n.preOrderHooks = [])).push(t, s),
                                            (n.preOrderCheckHooks || (n.preOrderCheckHooks = [])).push(t, s);
                                    }
                                    r && (n.preOrderHooks || (n.preOrderHooks = [])).push(0 - t, r),
                                        i &&
                                            ((n.preOrderHooks || (n.preOrderHooks = [])).push(t, i),
                                            (n.preOrderCheckHooks || (n.preOrderCheckHooks = [])).push(t, i));
                                })(n, i[n], e);
                    } finally {
                        null !== l && xt(l), bn(a), (o.resolving = !1), Ye();
                    }
                }
                return r;
            }
            function Nn(t, e, n) {
                return !!(n[e + (t >> 5)] & (1 << t));
            }
            function Fn(t, e) {
                return !(t & bt.Self || (t & bt.Host && e));
            }
            class Mn {
                constructor(t, e) {
                    (this._tNode = t), (this._lView = e);
                }
                get(t, e) {
                    return Rn(this._tNode, this._lView, t, void 0, e);
                }
            }
            function jn(t) {
                return Et(() => {
                    const e = t.prototype.constructor,
                        n = e[Ht] || Hn(e),
                        s = Object.prototype;
                    let r = Object.getPrototypeOf(t.prototype).constructor;
                    for (; r && r !== s; ) {
                        const t = r[Ht] || Hn(r);
                        if (t && t !== n) return t;
                        r = Object.getPrototypeOf(r);
                    }
                    return (t) => new t();
                });
            }
            function Hn(t) {
                return ot(t)
                    ? () => {
                          const e = Hn(it(t));
                          return e && e();
                      }
                    : ie(t);
            }
            function Bn(t) {
                return (function (t, e) {
                    if ('class' === e) return t.classes;
                    if ('style' === e) return t.styles;
                    const n = t.attrs;
                    if (n) {
                        const t = n.length;
                        let s = 0;
                        for (; s < t; ) {
                            const r = n[s];
                            if (dn(r)) break;
                            if (0 === r) s += 2;
                            else if ('number' == typeof r) for (s++; s < t && 'string' == typeof n[s]; ) s++;
                            else {
                                if (r === e) return n[s + 1];
                                s += 2;
                            }
                        }
                    }
                    return null;
                })(Oe(), t);
            }
            const Vn = '__parameters__';
            function Un(t, e, n) {
                return Et(() => {
                    const s = (function (t) {
                        return function (...e) {
                            if (t) {
                                const n = t(...e);
                                for (const t in n) this[t] = n[t];
                            }
                        };
                    })(e);
                    function r(...t) {
                        if (this instanceof r) return s.apply(this, t), this;
                        const e = new r(...t);
                        return (n.annotation = e), n;
                        function n(t, n, s) {
                            const r = t.hasOwnProperty(Vn) ? t[Vn] : Object.defineProperty(t, Vn, { value: [] })[Vn];
                            for (; r.length <= s; ) r.push(null);
                            return (r[s] = r[s] || []).push(e), t;
                        }
                    }
                    return n && (r.prototype = Object.create(n.prototype)), (r.prototype.ngMetadataName = t), (r.annotationCls = r), r;
                });
            }
            class $n {
                constructor(t, e) {
                    (this._desc = t),
                        (this.ngMetadataName = 'InjectionToken'),
                        (this.ɵprov = void 0),
                        'number' == typeof e
                            ? (this.__NG_ELEMENT_ID__ = e)
                            : void 0 !== e && (this.ɵprov = ht({ token: this, providedIn: e.providedIn || 'root', factory: e.factory }));
                }
                toString() {
                    return `InjectionToken ${this._desc}`;
                }
            }
            const zn = new $n('AnalyzeForEntryComponents'),
                qn = Function;
            function Wn(t, e) {
                void 0 === e && (e = t);
                for (let n = 0; n < t.length; n++) {
                    let s = t[n];
                    Array.isArray(s) ? (e === t && (e = t.slice(0, n)), Wn(s, e)) : e !== t && e.push(s);
                }
                return e;
            }
            function Qn(t, e) {
                t.forEach((t) => (Array.isArray(t) ? Qn(t, e) : e(t)));
            }
            function Kn(t, e, n) {
                e >= t.length ? t.push(n) : t.splice(e, 0, n);
            }
            function Zn(t, e) {
                return e >= t.length - 1 ? t.pop() : t.splice(e, 1)[0];
            }
            function Yn(t, e) {
                const n = [];
                for (let s = 0; s < t; s++) n.push(e);
                return n;
            }
            function Gn(t, e, n) {
                let s = Jn(t, e);
                return (
                    s >= 0
                        ? (t[1 | s] = n)
                        : ((s = ~s),
                          (function (t, e, n, s) {
                              let r = t.length;
                              if (r == e) t.push(n, s);
                              else if (1 === r) t.push(s, t[0]), (t[0] = n);
                              else {
                                  for (r--, t.push(t[r - 1], t[r]); r > e; ) (t[r] = t[r - 2]), r--;
                                  (t[e] = n), (t[e + 1] = s);
                              }
                          })(t, s, e, n)),
                    s
                );
            }
            function Xn(t, e) {
                const n = Jn(t, e);
                if (n >= 0) return t[1 | n];
            }
            function Jn(t, e) {
                return (function (t, e, n) {
                    let s = 0,
                        r = t.length >> 1;
                    for (; r !== s; ) {
                        const n = s + ((r - s) >> 1),
                            i = t[n << 1];
                        if (e === i) return n << 1;
                        i > e ? (r = n) : (s = n + 1);
                    }
                    return ~(r << 1);
                })(t, e);
            }
            const ts = {},
                es = /\n/gm,
                ns = '__source',
                ss = J({ provide: String, useValue: J });
            let rs;
            function is(t) {
                const e = rs;
                return (rs = t), e;
            }
            function os(t, e = bt.Default) {
                if (void 0 === rs) throw new Error('inject() must be called from an injection context');
                return null === rs ? St(t, void 0, e) : rs.get(t, e & bt.Optional ? null : void 0, e);
            }
            function as(t, e = bt.Default) {
                return (wt || os)(it(t), e);
            }
            const ls = as;
            function cs(t) {
                const e = [];
                for (let n = 0; n < t.length; n++) {
                    const s = it(t[n]);
                    if (Array.isArray(s)) {
                        if (0 === s.length) throw new Error('Arguments array must have arguments.');
                        let t,
                            n = bt.Default;
                        for (let e = 0; e < s.length; e++) {
                            const r = s[e],
                                i = r.__NG_DI_FLAG__;
                            'number' == typeof i ? (-1 === i ? (t = r.token) : (n |= i)) : (t = r);
                        }
                        e.push(as(t, n));
                    } else e.push(as(s));
                }
                return e;
            }
            function us(t, e) {
                return (t.__NG_DI_FLAG__ = e), (t.prototype.__NG_DI_FLAG__ = e), t;
            }
            const hs = us(
                    Un('Inject', (t) => ({ token: t })),
                    -1
                ),
                ds = us(Un('Optional'), 8),
                ps = us(Un('SkipSelf'), 4);
            let fs;
            function ms(t) {
                var e;
                return (
                    (null ===
                        (e = (function () {
                            if (void 0 === fs && ((fs = null), It.trustedTypes))
                                try {
                                    fs = It.trustedTypes.createPolicy('angular', {
                                        createHTML: (t) => t,
                                        createScript: (t) => t,
                                        createScriptURL: (t) => t,
                                    });
                                } catch (e) {}
                            return fs;
                        })()) || void 0 === e
                        ? void 0
                        : e.createHTML(t)) || t
                );
            }
            class gs {
                constructor(t) {
                    this.changingThisBreaksApplicationSecurity = t;
                }
                toString() {
                    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`;
                }
            }
            class ys extends gs {
                getTypeName() {
                    return 'HTML';
                }
            }
            class _s extends gs {
                getTypeName() {
                    return 'Style';
                }
            }
            class vs extends gs {
                getTypeName() {
                    return 'Script';
                }
            }
            class bs extends gs {
                getTypeName() {
                    return 'URL';
                }
            }
            class ws extends gs {
                getTypeName() {
                    return 'ResourceURL';
                }
            }
            function xs(t) {
                return t instanceof gs ? t.changingThisBreaksApplicationSecurity : t;
            }
            function Ss(t, e) {
                const n = Es(t);
                if (null != n && n !== e) {
                    if ('ResourceURL' === n && 'URL' === e) return !0;
                    throw new Error(`Required a safe ${e}, got a ${n} (see https://g.co/ng/security#xss)`);
                }
                return n === e;
            }
            function Es(t) {
                return (t instanceof gs && t.getTypeName()) || null;
            }
            class Cs {
                constructor(t) {
                    this.inertDocumentHelper = t;
                }
                getInertBodyElement(t) {
                    t = '<body><remove></remove>' + t;
                    try {
                        const e = new window.DOMParser().parseFromString(ms(t), 'text/html').body;
                        return null === e ? this.inertDocumentHelper.getInertBodyElement(t) : (e.removeChild(e.firstChild), e);
                    } catch (e) {
                        return null;
                    }
                }
            }
            class ks {
                constructor(t) {
                    if (
                        ((this.defaultDoc = t),
                        (this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert')),
                        null == this.inertDocument.body)
                    ) {
                        const t = this.inertDocument.createElement('html');
                        this.inertDocument.appendChild(t);
                        const e = this.inertDocument.createElement('body');
                        t.appendChild(e);
                    }
                }
                getInertBodyElement(t) {
                    const e = this.inertDocument.createElement('template');
                    if ('content' in e) return (e.innerHTML = ms(t)), e;
                    const n = this.inertDocument.createElement('body');
                    return (n.innerHTML = ms(t)), this.defaultDoc.documentMode && this.stripCustomNsAttrs(n), n;
                }
                stripCustomNsAttrs(t) {
                    const e = t.attributes;
                    for (let s = e.length - 1; 0 < s; s--) {
                        const n = e.item(s).name;
                        ('xmlns:ns1' !== n && 0 !== n.indexOf('ns1:')) || t.removeAttribute(n);
                    }
                    let n = t.firstChild;
                    for (; n; ) n.nodeType === Node.ELEMENT_NODE && this.stripCustomNsAttrs(n), (n = n.nextSibling);
                }
            }
            const Ts = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,
                As =
                    /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
            function Rs(t) {
                return (t = String(t)).match(Ts) || t.match(As) ? t : 'unsafe:' + t;
            }
            function Os(t) {
                const e = {};
                for (const n of t.split(',')) e[n] = !0;
                return e;
            }
            function Is(...t) {
                const e = {};
                for (const n of t) for (const t in n) n.hasOwnProperty(t) && (e[t] = !0);
                return e;
            }
            const Ps = Os('area,br,col,hr,img,wbr'),
                Ls = Os('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
                Ds = Os('rp,rt'),
                Ns = Is(Ds, Ls),
                Fs = Is(
                    Ps,
                    Is(
                        Ls,
                        Os(
                            'address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'
                        )
                    ),
                    Is(
                        Ds,
                        Os(
                            'a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'
                        )
                    ),
                    Ns
                ),
                Ms = Os('background,cite,href,itemtype,longdesc,poster,src,xlink:href'),
                js = Os('srcset'),
                Hs = Is(
                    Ms,
                    js,
                    Os(
                        'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width'
                    ),
                    Os(
                        'aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'
                    )
                ),
                Bs = Os('script,style,template');
            class Vs {
                constructor() {
                    (this.sanitizedSomething = !1), (this.buf = []);
                }
                sanitizeChildren(t) {
                    let e = t.firstChild,
                        n = !0;
                    for (; e; )
                        if (
                            (e.nodeType === Node.ELEMENT_NODE
                                ? (n = this.startElement(e))
                                : e.nodeType === Node.TEXT_NODE
                                ? this.chars(e.nodeValue)
                                : (this.sanitizedSomething = !0),
                            n && e.firstChild)
                        )
                            e = e.firstChild;
                        else
                            for (; e; ) {
                                e.nodeType === Node.ELEMENT_NODE && this.endElement(e);
                                let t = this.checkClobberedElement(e, e.nextSibling);
                                if (t) {
                                    e = t;
                                    break;
                                }
                                e = this.checkClobberedElement(e, e.parentNode);
                            }
                    return this.buf.join('');
                }
                startElement(t) {
                    const e = t.nodeName.toLowerCase();
                    if (!Fs.hasOwnProperty(e)) return (this.sanitizedSomething = !0), !Bs.hasOwnProperty(e);
                    this.buf.push('<'), this.buf.push(e);
                    const n = t.attributes;
                    for (let r = 0; r < n.length; r++) {
                        const t = n.item(r),
                            e = t.name,
                            i = e.toLowerCase();
                        if (!Hs.hasOwnProperty(i)) {
                            this.sanitizedSomething = !0;
                            continue;
                        }
                        let o = t.value;
                        Ms[i] && (o = Rs(o)),
                            js[i] &&
                                ((s = o),
                                (o = (s = String(s))
                                    .split(',')
                                    .map((t) => Rs(t.trim()))
                                    .join(', '))),
                            this.buf.push(' ', e, '="', zs(o), '"');
                    }
                    var s;
                    return this.buf.push('>'), !0;
                }
                endElement(t) {
                    const e = t.nodeName.toLowerCase();
                    Fs.hasOwnProperty(e) && !Ps.hasOwnProperty(e) && (this.buf.push('</'), this.buf.push(e), this.buf.push('>'));
                }
                chars(t) {
                    this.buf.push(zs(t));
                }
                checkClobberedElement(t, e) {
                    if (e && (t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY)
                        throw new Error(`Failed to sanitize html because the element is clobbered: ${t.outerHTML}`);
                    return e;
                }
            }
            const Us = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                $s = /([^\#-~ |!])/g;
            function zs(t) {
                return t
                    .replace(/&/g, '&amp;')
                    .replace(Us, function (t) {
                        return '&#' + (1024 * (t.charCodeAt(0) - 55296) + (t.charCodeAt(1) - 56320) + 65536) + ';';
                    })
                    .replace($s, function (t) {
                        return '&#' + t.charCodeAt(0) + ';';
                    })
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;');
            }
            let qs;
            function Ws(t) {
                return 'content' in t &&
                    (function (t) {
                        return t.nodeType === Node.ELEMENT_NODE && 'TEMPLATE' === t.nodeName;
                    })(t)
                    ? t.content
                    : null;
            }
            var Qs = (() => (
                ((Qs = Qs || {})[(Qs.NONE = 0)] = 'NONE'),
                (Qs[(Qs.HTML = 1)] = 'HTML'),
                (Qs[(Qs.STYLE = 2)] = 'STYLE'),
                (Qs[(Qs.SCRIPT = 3)] = 'SCRIPT'),
                (Qs[(Qs.URL = 4)] = 'URL'),
                (Qs[(Qs.RESOURCE_URL = 5)] = 'RESOURCE_URL'),
                Qs
            ))();
            function Ks(t) {
                const e = (function () {
                    const t = Ae();
                    return t && t[12];
                })();
                return e ? e.sanitize(Qs.URL, t) || '' : Ss(t, 'URL') ? xs(t) : Rs(lt(t));
            }
            function Zs(t, e) {
                t.__ngContext__ = e;
            }
            function Ys(t) {
                const e = (function (t) {
                    return t.__ngContext__ || null;
                })(t);
                return e ? (Array.isArray(e) ? e : e.lView) : null;
            }
            function Gs(t) {
                return t.ngOriginalError;
            }
            function Xs(t, ...e) {
                t.error(...e);
            }
            class Js {
                constructor() {
                    this._console = console;
                }
                handleError(t) {
                    const e = this._findOriginalError(t),
                        n = this._findContext(t),
                        s = (function (t) {
                            return (t && t.ngErrorLogger) || Xs;
                        })(t);
                    s(this._console, 'ERROR', t), e && s(this._console, 'ORIGINAL ERROR', e), n && s(this._console, 'ERROR CONTEXT', n);
                }
                _findContext(t) {
                    return t
                        ? (function (t) {
                              return t.ngDebugContext;
                          })(t) || this._findContext(Gs(t))
                        : null;
                }
                _findOriginalError(t) {
                    let e = t && Gs(t);
                    for (; e && Gs(e); ) e = Gs(e);
                    return e || null;
                }
            }
            const tr = (() => (('undefined' != typeof requestAnimationFrame && requestAnimationFrame) || setTimeout).bind(It))();
            function er(t) {
                return t instanceof Function ? t() : t;
            }
            var nr = (() => (((nr = nr || {})[(nr.Important = 1)] = 'Important'), (nr[(nr.DashCase = 2)] = 'DashCase'), nr))();
            function sr(t, e) {
                return (void 0)(t, e);
            }
            function rr(t) {
                const e = t[3];
                return te(e) ? e[3] : e;
            }
            function ir(t) {
                return ar(t[13]);
            }
            function or(t) {
                return ar(t[4]);
            }
            function ar(t) {
                for (; null !== t && !te(t); ) t = t[4];
                return t;
            }
            function lr(t, e, n, s, r) {
                if (null != s) {
                    let i,
                        o = !1;
                    te(s) ? (i = s) : Jt(s) && ((o = !0), (s = s[0]));
                    const a = ge(s);
                    0 === t && null !== n
                        ? null == r
                            ? gr(e, n, a)
                            : mr(e, n, a, r || null, !0)
                        : 1 === t && null !== n
                        ? mr(e, n, a, r || null, !0)
                        : 2 === t
                        ? (function (t, e, n) {
                              const s = _r(t, e);
                              s &&
                                  (function (t, e, n, s) {
                                      fe(t) ? t.removeChild(e, n, s) : e.removeChild(n);
                                  })(t, s, e, n);
                          })(e, a, o)
                        : 3 === t && e.destroyNode(a),
                        null != i &&
                            (function (t, e, n, s, r) {
                                const i = n[7];
                                i !== ge(n) && lr(e, t, s, i, r);
                                for (let o = Xt; o < n.length; o++) {
                                    const r = n[o];
                                    kr(r[1], r, t, e, s, i);
                                }
                            })(e, t, i, n, r);
                }
            }
            function cr(t, e, n) {
                return fe(t) ? t.createElement(e, n) : null === n ? t.createElement(e) : t.createElementNS(n, e);
            }
            function ur(t, e) {
                const n = t[9],
                    s = n.indexOf(e),
                    r = e[3];
                1024 & e[2] && ((e[2] &= -1025), Ce(r, -1)), n.splice(s, 1);
            }
            function hr(t, e) {
                if (t.length <= Xt) return;
                const n = Xt + e,
                    s = t[n];
                if (s) {
                    const i = s[17];
                    null !== i && i !== t && ur(i, s), e > 0 && (t[n - 1][4] = s[4]);
                    const o = Zn(t, Xt + e);
                    kr(s[1], (r = s), r[11], 2, null, null), (r[0] = null), (r[6] = null);
                    const a = o[19];
                    null !== a && a.detachView(o[1]), (s[3] = null), (s[4] = null), (s[2] &= -129);
                }
                var r;
                return s;
            }
            function dr(t, e) {
                if (!(256 & e[2])) {
                    const n = e[11];
                    fe(n) && n.destroyNode && kr(t, e, n, 3, null, null),
                        (function (t) {
                            let e = t[13];
                            if (!e) return pr(t[1], t);
                            for (; e; ) {
                                let n = null;
                                if (Jt(e)) n = e[13];
                                else {
                                    const t = e[10];
                                    t && (n = t);
                                }
                                if (!n) {
                                    for (; e && !e[4] && e !== t; ) Jt(e) && pr(e[1], e), (e = e[3]);
                                    null === e && (e = t), Jt(e) && pr(e[1], e), (n = e && e[4]);
                                }
                                e = n;
                            }
                        })(e);
                }
            }
            function pr(t, e) {
                if (!(256 & e[2])) {
                    (e[2] &= -129),
                        (e[2] |= 256),
                        (function (t, e) {
                            let n;
                            if (null != t && null != (n = t.destroyHooks))
                                for (let s = 0; s < n.length; s += 2) {
                                    const t = e[n[s]];
                                    if (!(t instanceof un)) {
                                        const e = n[s + 1];
                                        if (Array.isArray(e))
                                            for (let n = 0; n < e.length; n += 2) {
                                                const s = t[e[n]],
                                                    r = e[n + 1];
                                                try {
                                                    r.call(s);
                                                } finally {
                                                }
                                            }
                                        else
                                            try {
                                                e.call(t);
                                            } finally {
                                            }
                                    }
                                }
                        })(t, e),
                        (function (t, e) {
                            const n = t.cleanup,
                                s = e[7];
                            let r = -1;
                            if (null !== n)
                                for (let i = 0; i < n.length - 1; i += 2)
                                    if ('string' == typeof n[i]) {
                                        const t = n[i + 1],
                                            o = 'function' == typeof t ? t(e) : ge(e[t]),
                                            a = s[(r = n[i + 2])],
                                            l = n[i + 3];
                                        'boolean' == typeof l
                                            ? o.removeEventListener(n[i], a, l)
                                            : l >= 0
                                            ? s[(r = l)]()
                                            : s[(r = -l)].unsubscribe(),
                                            (i += 2);
                                    } else {
                                        const t = s[(r = n[i + 1])];
                                        n[i].call(t);
                                    }
                            if (null !== s) {
                                for (let t = r + 1; t < s.length; t++) (0, s[t])();
                                e[7] = null;
                            }
                        })(t, e),
                        1 === e[1].type && fe(e[11]) && e[11].destroy();
                    const n = e[17];
                    if (null !== n && te(e[3])) {
                        n !== e[3] && ur(n, e);
                        const s = e[19];
                        null !== s && s.detachView(t);
                    }
                }
            }
            function fr(t, e, n) {
                return (function (t, e, n) {
                    let s = e;
                    for (; null !== s && 40 & s.type; ) s = (e = s).parent;
                    if (null === s) return n[0];
                    if (2 & s.flags) {
                        const e = t.data[s.directiveStart].encapsulation;
                        if (e === kt.None || e === kt.Emulated) return null;
                    }
                    return _e(s, n);
                })(t, e.parent, n);
            }
            function mr(t, e, n, s, r) {
                fe(t) ? t.insertBefore(e, n, s, r) : e.insertBefore(n, s, r);
            }
            function gr(t, e, n) {
                fe(t) ? t.appendChild(e, n) : e.appendChild(n);
            }
            function yr(t, e, n, s, r) {
                null !== s ? mr(t, e, n, s, r) : gr(t, e, n);
            }
            function _r(t, e) {
                return fe(t) ? t.parentNode(e) : e.parentNode;
            }
            function vr(t, e, n) {
                return br(t, e, n);
            }
            let br = function (t, e, n) {
                return 40 & t.type ? _e(t, n) : null;
            };
            function wr(t, e, n, s) {
                const r = fr(t, s, e),
                    i = e[11],
                    o = vr(s.parent || e[6], s, e);
                if (null != r)
                    if (Array.isArray(n)) for (let a = 0; a < n.length; a++) yr(i, r, n[a], o, !1);
                    else yr(i, r, n, o, !1);
            }
            function xr(t, e) {
                if (null !== e) {
                    const n = e.type;
                    if (3 & n) return _e(e, t);
                    if (4 & n) return Er(-1, t[e.index]);
                    if (8 & n) {
                        const n = e.child;
                        if (null !== n) return xr(t, n);
                        {
                            const n = t[e.index];
                            return te(n) ? Er(-1, n) : ge(n);
                        }
                    }
                    if (32 & n) return sr(e, t)() || ge(t[e.index]);
                    {
                        const n = Sr(t, e);
                        return null !== n ? (Array.isArray(n) ? n[0] : xr(rr(t[16]), n)) : xr(t, e.next);
                    }
                }
                return null;
            }
            function Sr(t, e) {
                return null !== e ? t[16][6].projection[e.projection] : null;
            }
            function Er(t, e) {
                const n = Xt + t + 1;
                if (n < e.length) {
                    const t = e[n],
                        s = t[1].firstChild;
                    if (null !== s) return xr(t, s);
                }
                return e[7];
            }
            function Cr(t, e, n, s, r, i, o) {
                for (; null != n; ) {
                    const a = s[n.index],
                        l = n.type;
                    if ((o && 0 === e && (a && Zs(ge(a), s), (n.flags |= 4)), 64 != (64 & n.flags)))
                        if (8 & l) Cr(t, e, n.child, s, r, i, !1), lr(e, t, r, a, i);
                        else if (32 & l) {
                            const o = sr(n, s);
                            let l;
                            for (; (l = o()); ) lr(e, t, r, l, i);
                            lr(e, t, r, a, i);
                        } else 16 & l ? Tr(t, e, s, n, r, i) : lr(e, t, r, a, i);
                    n = o ? n.projectionNext : n.next;
                }
            }
            function kr(t, e, n, s, r, i) {
                Cr(n, s, t.firstChild, e, r, i, !1);
            }
            function Tr(t, e, n, s, r, i) {
                const o = n[16],
                    a = o[6].projection[s.projection];
                if (Array.isArray(a)) for (let l = 0; l < a.length; l++) lr(e, t, r, a[l], i);
                else Cr(t, e, a, o[3], r, i, !0);
            }
            function Ar(t, e, n) {
                fe(t) ? t.setAttribute(e, 'style', n) : (e.style.cssText = n);
            }
            function Rr(t, e, n) {
                fe(t) ? ('' === n ? t.removeAttribute(e, 'class') : t.setAttribute(e, 'class', n)) : (e.className = n);
            }
            function Or(t, e, n) {
                let s = t.length;
                for (;;) {
                    const r = t.indexOf(e, n);
                    if (-1 === r) return r;
                    if (0 === r || t.charCodeAt(r - 1) <= 32) {
                        const n = e.length;
                        if (r + n === s || t.charCodeAt(r + n) <= 32) return r;
                    }
                    n = r + 1;
                }
            }
            const Ir = 'ng-template';
            function Pr(t, e, n) {
                let s = 0;
                for (; s < t.length; ) {
                    let r = t[s++];
                    if (n && 'class' === r) {
                        if (((r = t[s]), -1 !== Or(r.toLowerCase(), e, 0))) return !0;
                    } else if (1 === r) {
                        for (; s < t.length && 'string' == typeof (r = t[s++]); ) if (r.toLowerCase() === e) return !0;
                        return !1;
                    }
                }
                return !1;
            }
            function Lr(t) {
                return 4 === t.type && t.value !== Ir;
            }
            function Dr(t, e, n) {
                return e === (4 !== t.type || n ? t.value : Ir);
            }
            function Nr(t, e, n) {
                let s = 4;
                const r = t.attrs || [],
                    i = (function (t) {
                        for (let e = 0; e < t.length; e++) if (dn(t[e])) return e;
                        return t.length;
                    })(r);
                let o = !1;
                for (let a = 0; a < e.length; a++) {
                    const l = e[a];
                    if ('number' != typeof l) {
                        if (!o)
                            if (4 & s) {
                                if (((s = 2 | (1 & s)), ('' !== l && !Dr(t, l, n)) || ('' === l && 1 === e.length))) {
                                    if (Fr(s)) return !1;
                                    o = !0;
                                }
                            } else {
                                const c = 8 & s ? l : e[++a];
                                if (8 & s && null !== t.attrs) {
                                    if (!Pr(t.attrs, c, n)) {
                                        if (Fr(s)) return !1;
                                        o = !0;
                                    }
                                    continue;
                                }
                                const u = Mr(8 & s ? 'class' : l, r, Lr(t), n);
                                if (-1 === u) {
                                    if (Fr(s)) return !1;
                                    o = !0;
                                    continue;
                                }
                                if ('' !== c) {
                                    let t;
                                    t = u > i ? '' : r[u + 1].toLowerCase();
                                    const e = 8 & s ? t : null;
                                    if ((e && -1 !== Or(e, c, 0)) || (2 & s && c !== t)) {
                                        if (Fr(s)) return !1;
                                        o = !0;
                                    }
                                }
                            }
                    } else {
                        if (!o && !Fr(s) && !Fr(l)) return !1;
                        if (o && Fr(l)) continue;
                        (o = !1), (s = l | (1 & s));
                    }
                }
                return Fr(s) || o;
            }
            function Fr(t) {
                return 0 == (1 & t);
            }
            function Mr(t, e, n, s) {
                if (null === e) return -1;
                let r = 0;
                if (s || !n) {
                    let n = !1;
                    for (; r < e.length; ) {
                        const s = e[r];
                        if (s === t) return r;
                        if (3 === s || 6 === s) n = !0;
                        else {
                            if (1 === s || 2 === s) {
                                let t = e[++r];
                                for (; 'string' == typeof t; ) t = e[++r];
                                continue;
                            }
                            if (4 === s) break;
                            if (0 === s) {
                                r += 4;
                                continue;
                            }
                        }
                        r += n ? 1 : 2;
                    }
                    return -1;
                }
                return (function (t, e) {
                    let n = t.indexOf(4);
                    if (n > -1)
                        for (n++; n < t.length; ) {
                            const s = t[n];
                            if ('number' == typeof s) return -1;
                            if (s === e) return n;
                            n++;
                        }
                    return -1;
                })(e, t);
            }
            function jr(t, e, n = !1) {
                for (let s = 0; s < e.length; s++) if (Nr(t, e[s], n)) return !0;
                return !1;
            }
            function Hr(t, e) {
                t: for (let n = 0; n < e.length; n++) {
                    const s = e[n];
                    if (t.length === s.length) {
                        for (let e = 0; e < t.length; e++) if (t[e] !== s[e]) continue t;
                        return !0;
                    }
                }
                return !1;
            }
            function Br(t, e) {
                return t ? ':not(' + e.trim() + ')' : e;
            }
            function Vr(t) {
                let e = t[0],
                    n = 1,
                    s = 2,
                    r = '',
                    i = !1;
                for (; n < t.length; ) {
                    let o = t[n];
                    if ('string' == typeof o)
                        if (2 & s) {
                            const e = t[++n];
                            r += '[' + o + (e.length > 0 ? '="' + e + '"' : '') + ']';
                        } else 8 & s ? (r += '.' + o) : 4 & s && (r += ' ' + o);
                    else '' === r || Fr(o) || ((e += Br(i, r)), (r = '')), (s = o), (i = i || !Fr(s));
                    n++;
                }
                return '' !== r && (e += Br(i, r)), e;
            }
            const Ur = {};
            function $r(t) {
                zr(Re(), Ae(), Xe() + t, Ne());
            }
            function zr(t, e, n, s) {
                if (!s)
                    if (3 == (3 & e[2])) {
                        const s = t.preOrderCheckHooks;
                        null !== s && sn(e, s, n);
                    } else {
                        const s = t.preOrderHooks;
                        null !== s && rn(e, s, 0, n);
                    }
                Je(n);
            }
            function qr(t, e) {
                return (t << 17) | (e << 2);
            }
            function Wr(t) {
                return (t >> 17) & 32767;
            }
            function Qr(t) {
                return 2 | t;
            }
            function Kr(t) {
                return (131068 & t) >> 2;
            }
            function Zr(t, e) {
                return (-131069 & t) | (e << 2);
            }
            function Yr(t) {
                return 1 | t;
            }
            function Gr(t, e) {
                const n = t.contentQueries;
                if (null !== n)
                    for (let s = 0; s < n.length; s += 2) {
                        const r = n[s],
                            i = n[s + 1];
                        if (-1 !== i) {
                            const n = t.data[i];
                            $e(r), n.contentQueries(2, e[i], i);
                        }
                    }
            }
            function Xr(t, e, n, s, r, i, o, a, l, c) {
                const u = e.blueprint.slice();
                return (
                    (u[0] = r),
                    (u[2] = 140 | s),
                    Ee(u),
                    (u[3] = u[15] = t),
                    (u[8] = n),
                    (u[10] = o || (t && t[10])),
                    (u[11] = a || (t && t[11])),
                    (u[12] = l || (t && t[12]) || null),
                    (u[9] = c || (t && t[9]) || null),
                    (u[6] = i),
                    (u[16] = 2 == e.type ? t[16] : u),
                    u
                );
            }
            function Jr(t, e, n, s, r) {
                let i = t.data[e];
                if (null === i)
                    (i = (function (t, e, n, s, r) {
                        const i = Ie(),
                            o = Le(),
                            a = (t.data[e] = (function (t, e, n, s, r, i) {
                                return {
                                    type: n,
                                    index: s,
                                    insertBeforeIndex: null,
                                    injectorIndex: e ? e.injectorIndex : -1,
                                    directiveStart: -1,
                                    directiveEnd: -1,
                                    directiveStylingLast: -1,
                                    propertyBindings: null,
                                    flags: 0,
                                    providerIndexes: 0,
                                    value: r,
                                    attrs: i,
                                    mergedAttrs: null,
                                    localNames: null,
                                    initialInputs: void 0,
                                    inputs: null,
                                    outputs: null,
                                    tViews: null,
                                    next: null,
                                    projectionNext: null,
                                    child: null,
                                    parent: e,
                                    projection: null,
                                    styles: null,
                                    stylesWithoutHost: null,
                                    residualStyles: void 0,
                                    classes: null,
                                    classesWithoutHost: null,
                                    residualClasses: void 0,
                                    classBindings: 0,
                                    styleBindings: 0,
                                };
                            })(0, o ? i : i && i.parent, n, e, s, r));
                        return (
                            null === t.firstChild && (t.firstChild = a),
                            null !== i && (o ? null == i.child && null !== a.parent && (i.child = a) : null === i.next && (i.next = a)),
                            a
                        );
                    })(t, e, n, s, r)),
                        ke.lFrame.inI18n && (i.flags |= 64);
                else if (64 & i.type) {
                    (i.type = n), (i.value = s), (i.attrs = r);
                    const t = (function () {
                        const t = ke.lFrame,
                            e = t.currentTNode;
                        return t.isParent ? e : e.parent;
                    })();
                    i.injectorIndex = null === t ? -1 : t.injectorIndex;
                }
                return Pe(i, !0), i;
            }
            function ti(t, e, n, s) {
                if (0 === n) return -1;
                const r = e.length;
                for (let i = 0; i < n; i++) e.push(s), t.blueprint.push(s), t.data.push(null);
                return r;
            }
            function ei(t, e, n) {
                We(e);
                try {
                    const s = t.viewQuery;
                    null !== s && Oi(1, s, n);
                    const r = t.template;
                    null !== r && ri(t, e, r, 1, n),
                        t.firstCreatePass && (t.firstCreatePass = !1),
                        t.staticContentQueries && Gr(t, e),
                        t.staticViewQueries && Oi(2, t.viewQuery, n);
                    const i = t.components;
                    null !== i &&
                        (function (t, e) {
                            for (let n = 0; n < e.length; n++) Ci(t, e[n]);
                        })(e, i);
                } catch (s) {
                    throw (t.firstCreatePass && ((t.incompleteFirstPass = !0), (t.firstCreatePass = !1)), s);
                } finally {
                    (e[2] &= -5), Ge();
                }
            }
            function ni(t, e, n, s) {
                const r = e[2];
                if (256 == (256 & r)) return;
                We(e);
                const i = Ne();
                try {
                    Ee(e), (ke.lFrame.bindingIndex = t.bindingStartIndex), null !== n && ri(t, e, n, 2, s);
                    const o = 3 == (3 & r);
                    if (!i)
                        if (o) {
                            const n = t.preOrderCheckHooks;
                            null !== n && sn(e, n, null);
                        } else {
                            const n = t.preOrderHooks;
                            null !== n && rn(e, n, 0, null), on(e, 0);
                        }
                    if (
                        ((function (t) {
                            for (let e = ir(t); null !== e; e = or(e)) {
                                if (!e[2]) continue;
                                const t = e[9];
                                for (let e = 0; e < t.length; e++) {
                                    const n = t[e],
                                        s = n[3];
                                    0 == (1024 & n[2]) && Ce(s, 1), (n[2] |= 1024);
                                }
                            }
                        })(e),
                        (function (t) {
                            for (let e = ir(t); null !== e; e = or(e))
                                for (let t = Xt; t < e.length; t++) {
                                    const n = e[t],
                                        s = n[1];
                                    xe(n) && ni(s, n, s.template, n[8]);
                                }
                        })(e),
                        null !== t.contentQueries && Gr(t, e),
                        !i)
                    )
                        if (o) {
                            const n = t.contentCheckHooks;
                            null !== n && sn(e, n);
                        } else {
                            const n = t.contentHooks;
                            null !== n && rn(e, n, 1), on(e, 1);
                        }
                    !(function (t, e) {
                        const n = t.hostBindingOpCodes;
                        if (null !== n)
                            try {
                                for (let t = 0; t < n.length; t++) {
                                    const s = n[t];
                                    if (s < 0) Je(~s);
                                    else {
                                        const r = s,
                                            i = n[++t],
                                            o = n[++t];
                                        He(i, r), o(2, e[r]);
                                    }
                                }
                            } finally {
                                Je(-1);
                            }
                    })(t, e);
                    const a = t.components;
                    null !== a &&
                        (function (t, e) {
                            for (let n = 0; n < e.length; n++) Si(t, e[n]);
                        })(e, a);
                    const l = t.viewQuery;
                    if ((null !== l && Oi(2, l, s), !i))
                        if (o) {
                            const n = t.viewCheckHooks;
                            null !== n && sn(e, n);
                        } else {
                            const n = t.viewHooks;
                            null !== n && rn(e, n, 2), on(e, 2);
                        }
                    !0 === t.firstUpdatePass && (t.firstUpdatePass = !1),
                        i || (e[2] &= -73),
                        1024 & e[2] && ((e[2] &= -1025), Ce(e[3], -1));
                } finally {
                    Ge();
                }
            }
            function si(t, e, n, s) {
                const r = e[10],
                    i = !Ne(),
                    o = we(e);
                try {
                    i && !o && r.begin && r.begin(), o && ei(t, e, s), ni(t, e, n, s);
                } finally {
                    i && !o && r.end && r.end();
                }
            }
            function ri(t, e, n, s, r) {
                const i = Xe(),
                    o = 2 & s;
                try {
                    Je(-1), o && e.length > Gt && zr(t, e, Gt, Ne()), n(s, r);
                } finally {
                    Je(i);
                }
            }
            function ii(t, e, n) {
                Te() &&
                    ((function (t, e, n, s) {
                        const r = n.directiveStart,
                            i = n.directiveEnd;
                        t.firstCreatePass || xn(n, e), Zs(s, e);
                        const o = n.initialInputs;
                        for (let a = r; a < i; a++) {
                            const s = t.data[a],
                                i = re(s);
                            i && vi(e, n, s);
                            const l = Dn(e, t, a, n);
                            Zs(l, e), null !== o && bi(0, a - r, l, s, 0, o), i && (be(n.index, e)[8] = l);
                        }
                    })(t, e, n, _e(n, e)),
                    128 == (128 & n.flags) &&
                        (function (t, e, n) {
                            const s = n.directiveStart,
                                r = n.directiveEnd,
                                i = n.index,
                                o = ke.lFrame.currentDirectiveIndex;
                            try {
                                Je(i);
                                for (let n = s; n < r; n++) {
                                    const s = t.data[n],
                                        r = e[n];
                                    Be(n), (null === s.hostBindings && 0 === s.hostVars && null === s.hostAttrs) || fi(s, r);
                                }
                            } finally {
                                Je(-1), Be(o);
                            }
                        })(t, e, n));
            }
            function oi(t, e, n = _e) {
                const s = e.localNames;
                if (null !== s) {
                    let r = e.index + 1;
                    for (let i = 0; i < s.length; i += 2) {
                        const o = s[i + 1],
                            a = -1 === o ? n(e, t) : t[o];
                        t[r++] = a;
                    }
                }
            }
            function ai(t) {
                const e = t.tView;
                return null === e || e.incompleteFirstPass
                    ? (t.tView = li(1, null, t.template, t.decls, t.vars, t.directiveDefs, t.pipeDefs, t.viewQuery, t.schemas, t.consts))
                    : e;
            }
            function li(t, e, n, s, r, i, o, a, l, c) {
                const u = Gt + s,
                    h = u + r,
                    d = (function (t, e) {
                        const n = [];
                        for (let s = 0; s < e; s++) n.push(s < t ? null : Ur);
                        return n;
                    })(u, h),
                    p = 'function' == typeof c ? c() : c;
                return (d[1] = {
                    type: t,
                    blueprint: d,
                    template: n,
                    queries: null,
                    viewQuery: a,
                    declTNode: e,
                    data: d.slice().fill(null, u),
                    bindingStartIndex: u,
                    expandoStartIndex: h,
                    hostBindingOpCodes: null,
                    firstCreatePass: !0,
                    firstUpdatePass: !0,
                    staticViewQueries: !1,
                    staticContentQueries: !1,
                    preOrderHooks: null,
                    preOrderCheckHooks: null,
                    contentHooks: null,
                    contentCheckHooks: null,
                    viewHooks: null,
                    viewCheckHooks: null,
                    destroyHooks: null,
                    cleanup: null,
                    contentQueries: null,
                    components: null,
                    directiveRegistry: 'function' == typeof i ? i() : i,
                    pipeRegistry: 'function' == typeof o ? o() : o,
                    firstChild: null,
                    schemas: l,
                    consts: p,
                    incompleteFirstPass: !1,
                });
            }
            function ci(t, e, n, s) {
                const r = Pi(e);
                null === n ? r.push(s) : (r.push(n), t.firstCreatePass && Li(t).push(s, r.length - 1));
            }
            function ui(t, e, n) {
                for (let s in t)
                    if (t.hasOwnProperty(s)) {
                        const r = t[s];
                        (n = null === n ? {} : n).hasOwnProperty(s) ? n[s].push(e, r) : (n[s] = [e, r]);
                    }
                return n;
            }
            function hi(t, e, n, s, r, i, o, a) {
                const l = _e(e, n);
                let c,
                    u = e.inputs;
                var h;
                !a && null != u && (c = u[s])
                    ? (Fi(t, n, c, s, r),
                      ne(e) &&
                          (function (t, e) {
                              const n = be(e, t);
                              16 & n[2] || (n[2] |= 64);
                          })(n, e.index))
                    : 3 & e.type &&
                      ((s =
                          'class' === (h = s)
                              ? 'className'
                              : 'for' === h
                              ? 'htmlFor'
                              : 'formaction' === h
                              ? 'formAction'
                              : 'innerHtml' === h
                              ? 'innerHTML'
                              : 'readonly' === h
                              ? 'readOnly'
                              : 'tabindex' === h
                              ? 'tabIndex'
                              : h),
                      (r = null != o ? o(r, e.value || '', s) : r),
                      fe(i) ? i.setProperty(l, s, r) : pn(s) || (l.setProperty ? l.setProperty(s, r) : (l[s] = r)));
            }
            function di(t, e, n, s) {
                let r = !1;
                if (Te()) {
                    const i = (function (t, e, n) {
                            const s = t.directiveRegistry;
                            let r = null;
                            if (s)
                                for (let i = 0; i < s.length; i++) {
                                    const o = s[i];
                                    jr(n, o.selectors, !1) &&
                                        (r || (r = []), kn(xn(n, e), t, o.type), re(o) ? (mi(t, n), r.unshift(o)) : r.push(o));
                                }
                            return r;
                        })(t, e, n),
                        o = null === s ? null : { '': -1 };
                    if (null !== i) {
                        (r = !0), yi(n, t.data.length, i.length);
                        for (let t = 0; t < i.length; t++) {
                            const e = i[t];
                            e.providersResolver && e.providersResolver(e);
                        }
                        let s = !1,
                            a = !1,
                            l = ti(t, e, i.length, null);
                        for (let r = 0; r < i.length; r++) {
                            const c = i[r];
                            (n.mergedAttrs = fn(n.mergedAttrs, c.hostAttrs)),
                                _i(t, n, e, l, c),
                                gi(l, c, o),
                                null !== c.contentQueries && (n.flags |= 8),
                                (null === c.hostBindings && null === c.hostAttrs && 0 === c.hostVars) || (n.flags |= 128);
                            const u = c.type.prototype;
                            !s &&
                                (u.ngOnChanges || u.ngOnInit || u.ngDoCheck) &&
                                ((t.preOrderHooks || (t.preOrderHooks = [])).push(n.index), (s = !0)),
                                a ||
                                    (!u.ngOnChanges && !u.ngDoCheck) ||
                                    ((t.preOrderCheckHooks || (t.preOrderCheckHooks = [])).push(n.index), (a = !0)),
                                l++;
                        }
                        !(function (t, e) {
                            const n = e.directiveEnd,
                                s = t.data,
                                r = e.attrs,
                                i = [];
                            let o = null,
                                a = null;
                            for (let l = e.directiveStart; l < n; l++) {
                                const t = s[l],
                                    n = t.inputs,
                                    c = null === r || Lr(e) ? null : wi(n, r);
                                i.push(c), (o = ui(n, l, o)), (a = ui(t.outputs, l, a));
                            }
                            null !== o && (o.hasOwnProperty('class') && (e.flags |= 16), o.hasOwnProperty('style') && (e.flags |= 32)),
                                (e.initialInputs = i),
                                (e.inputs = o),
                                (e.outputs = a);
                        })(t, n);
                    }
                    o &&
                        (function (t, e, n) {
                            if (e) {
                                const s = (t.localNames = []);
                                for (let t = 0; t < e.length; t += 2) {
                                    const r = n[e[t + 1]];
                                    if (null == r) throw new at('301', `Export of name '${e[t + 1]}' not found!`);
                                    s.push(e[t], r);
                                }
                            }
                        })(n, s, o);
                }
                return (n.mergedAttrs = fn(n.mergedAttrs, n.attrs)), r;
            }
            function pi(t, e, n, s, r, i) {
                const o = i.hostBindings;
                if (o) {
                    let n = t.hostBindingOpCodes;
                    null === n && (n = t.hostBindingOpCodes = []);
                    const i = ~e.index;
                    (function (t) {
                        let e = t.length;
                        for (; e > 0; ) {
                            const n = t[--e];
                            if ('number' == typeof n && n < 0) return n;
                        }
                        return 0;
                    })(n) != i && n.push(i),
                        n.push(s, r, o);
                }
            }
            function fi(t, e) {
                null !== t.hostBindings && t.hostBindings(1, e);
            }
            function mi(t, e) {
                (e.flags |= 2), (t.components || (t.components = [])).push(e.index);
            }
            function gi(t, e, n) {
                if (n) {
                    if (e.exportAs) for (let s = 0; s < e.exportAs.length; s++) n[e.exportAs[s]] = t;
                    re(e) && (n[''] = t);
                }
            }
            function yi(t, e, n) {
                (t.flags |= 1), (t.directiveStart = e), (t.directiveEnd = e + n), (t.providerIndexes = e);
            }
            function _i(t, e, n, s, r) {
                t.data[s] = r;
                const i = r.factory || (r.factory = ie(r.type)),
                    o = new un(i, re(r), null);
                (t.blueprint[s] = o), (n[s] = o), pi(t, e, 0, s, ti(t, n, r.hostVars, Ur), r);
            }
            function vi(t, e, n) {
                const s = _e(e, t),
                    r = ai(n),
                    i = t[10],
                    o = ki(t, Xr(t, r, null, n.onPush ? 64 : 16, s, e, i, i.createRenderer(s, n), null, null));
                t[e.index] = o;
            }
            function bi(t, e, n, s, r, i) {
                const o = i[e];
                if (null !== o) {
                    const t = s.setInput;
                    for (let e = 0; e < o.length; ) {
                        const r = o[e++],
                            i = o[e++],
                            a = o[e++];
                        null !== t ? s.setInput(n, a, r, i) : (n[i] = a);
                    }
                }
            }
            function wi(t, e) {
                let n = null,
                    s = 0;
                for (; s < e.length; ) {
                    const r = e[s];
                    if (0 !== r)
                        if (5 !== r) {
                            if ('number' == typeof r) break;
                            t.hasOwnProperty(r) && (null === n && (n = []), n.push(r, t[r], e[s + 1])), (s += 2);
                        } else s += 2;
                    else s += 4;
                }
                return n;
            }
            function xi(t, e, n, s) {
                return new Array(t, !0, !1, e, null, 0, s, n, null, null);
            }
            function Si(t, e) {
                const n = be(e, t);
                if (xe(n)) {
                    const t = n[1];
                    80 & n[2] ? ni(t, n, t.template, n[8]) : n[5] > 0 && Ei(n);
                }
            }
            function Ei(t) {
                for (let n = ir(t); null !== n; n = or(n))
                    for (let t = Xt; t < n.length; t++) {
                        const e = n[t];
                        if (1024 & e[2]) {
                            const t = e[1];
                            ni(t, e, t.template, e[8]);
                        } else e[5] > 0 && Ei(e);
                    }
                const e = t[1].components;
                if (null !== e)
                    for (let n = 0; n < e.length; n++) {
                        const s = be(e[n], t);
                        xe(s) && s[5] > 0 && Ei(s);
                    }
            }
            function Ci(t, e) {
                const n = be(e, t),
                    s = n[1];
                !(function (t, e) {
                    for (let n = e.length; n < t.blueprint.length; n++) e.push(t.blueprint[n]);
                })(s, n),
                    ei(s, n, n[8]);
            }
            function ki(t, e) {
                return t[13] ? (t[14][4] = e) : (t[13] = e), (t[14] = e), e;
            }
            function Ti(t) {
                for (; t; ) {
                    t[2] |= 64;
                    const e = rr(t);
                    if (0 != (512 & t[2]) && !e) return t;
                    t = e;
                }
                return null;
            }
            function Ai(t, e, n) {
                const s = e[10];
                s.begin && s.begin();
                try {
                    ni(t, e, t.template, n);
                } catch (r) {
                    throw (Ni(e, r), r);
                } finally {
                    s.end && s.end();
                }
            }
            function Ri(t) {
                !(function (t) {
                    for (let e = 0; e < t.components.length; e++) {
                        const n = t.components[e],
                            s = Ys(n),
                            r = s[1];
                        si(r, s, r.template, n);
                    }
                })(t[8]);
            }
            function Oi(t, e, n) {
                $e(0), e(t, n);
            }
            const Ii = (() => Promise.resolve(null))();
            function Pi(t) {
                return t[7] || (t[7] = []);
            }
            function Li(t) {
                return t.cleanup || (t.cleanup = []);
            }
            function Di(t, e, n) {
                return (
                    (null === t || re(t)) &&
                        (n = (function (t) {
                            for (; Array.isArray(t); ) {
                                if ('object' == typeof t[1]) return t;
                                t = t[0];
                            }
                            return null;
                        })(n[e.index])),
                    n[11]
                );
            }
            function Ni(t, e) {
                const n = t[9],
                    s = n ? n.get(Js, null) : null;
                s && s.handleError(e);
            }
            function Fi(t, e, n, s, r) {
                for (let i = 0; i < n.length; ) {
                    const o = n[i++],
                        a = n[i++],
                        l = e[o],
                        c = t.data[o];
                    null !== c.setInput ? c.setInput(l, r, s, a) : (l[a] = r);
                }
            }
            function Mi(t, e, n) {
                const s = ye(e, t);
                !(function (t, e, n) {
                    fe(t) ? t.setValue(e, n) : (e.textContent = n);
                })(t[11], s, n);
            }
            function ji(t, e, n) {
                let s = n ? t.styles : null,
                    r = n ? t.classes : null,
                    i = 0;
                if (null !== e)
                    for (let o = 0; o < e.length; o++) {
                        const t = e[o];
                        'number' == typeof t ? (i = t) : 1 == i ? (r = nt(r, t)) : 2 == i && (s = nt(s, t + ': ' + e[++o] + ';'));
                    }
                n ? (t.styles = s) : (t.stylesWithoutHost = s), n ? (t.classes = r) : (t.classesWithoutHost = r);
            }
            const Hi = new $n('INJECTOR', -1);
            class Bi {
                get(t, e = ts) {
                    if (e === ts) {
                        const e = new Error(`NullInjectorError: No provider for ${et(t)}!`);
                        throw ((e.name = 'NullInjectorError'), e);
                    }
                    return e;
                }
            }
            const Vi = new $n('Set Injector scope.'),
                Ui = {},
                $i = {};
            let zi;
            function qi() {
                return void 0 === zi && (zi = new Bi()), zi;
            }
            function Wi(t, e = null, n = null, s) {
                return new Qi(t, n, e || qi(), s);
            }
            class Qi {
                constructor(t, e, n, s = null) {
                    (this.parent = n),
                        (this.records = new Map()),
                        (this.injectorDefTypes = new Set()),
                        (this.onDestroy = new Set()),
                        (this._destroyed = !1);
                    const r = [];
                    e && Qn(e, (n) => this.processProvider(n, t, e)),
                        Qn([t], (t) => this.processInjectorType(t, [], r)),
                        this.records.set(Hi, Zi(void 0, this));
                    const i = this.records.get(Vi);
                    (this.scope = null != i ? i.value : null), (this.source = s || ('object' == typeof t ? null : et(t)));
                }
                get destroyed() {
                    return this._destroyed;
                }
                destroy() {
                    this.assertNotDestroyed(), (this._destroyed = !0);
                    try {
                        this.onDestroy.forEach((t) => t.ngOnDestroy());
                    } finally {
                        this.records.clear(), this.onDestroy.clear(), this.injectorDefTypes.clear();
                    }
                }
                get(t, e = ts, n = bt.Default) {
                    this.assertNotDestroyed();
                    const s = is(this),
                        r = xt(void 0);
                    try {
                        if (!(n & bt.SkipSelf)) {
                            let e = this.records.get(t);
                            if (void 0 === e) {
                                const n = ('function' == typeof (i = t) || ('object' == typeof i && i instanceof $n)) && pt(t);
                                (e = n && this.injectableDefInScope(n) ? Zi(Ki(t), Ui) : null), this.records.set(t, e);
                            }
                            if (null != e) return this.hydrate(t, e);
                        }
                        return (n & bt.Self ? qi() : this.parent).get(t, (e = n & bt.Optional && e === ts ? null : e));
                    } catch (o) {
                        if ('NullInjectorError' === o.name) {
                            if (((o.ngTempTokenPath = o.ngTempTokenPath || []).unshift(et(t)), s)) throw o;
                            return (function (t, e, n, s) {
                                const r = t.ngTempTokenPath;
                                throw (
                                    (e[ns] && r.unshift(e[ns]),
                                    (t.message = (function (t, e, n, s = null) {
                                        t = t && '\n' === t.charAt(0) && '\u0275' == t.charAt(1) ? t.substr(2) : t;
                                        let r = et(e);
                                        if (Array.isArray(e)) r = e.map(et).join(' -> ');
                                        else if ('object' == typeof e) {
                                            let t = [];
                                            for (let n in e)
                                                if (e.hasOwnProperty(n)) {
                                                    let s = e[n];
                                                    t.push(n + ':' + ('string' == typeof s ? JSON.stringify(s) : et(s)));
                                                }
                                            r = `{${t.join(', ')}}`;
                                        }
                                        return `${n}${s ? '(' + s + ')' : ''}[${r}]: ${t.replace(es, '\n  ')}`;
                                    })('\n' + t.message, r, n, s)),
                                    (t.ngTokenPath = r),
                                    (t.ngTempTokenPath = null),
                                    t)
                                );
                            })(o, t, 'R3InjectorError', this.source);
                        }
                        throw o;
                    } finally {
                        xt(r), is(s);
                    }
                    var i;
                }
                _resolveInjectorDefTypes() {
                    this.injectorDefTypes.forEach((t) => this.get(t));
                }
                toString() {
                    const t = [];
                    return this.records.forEach((e, n) => t.push(et(n))), `R3Injector[${t.join(', ')}]`;
                }
                assertNotDestroyed() {
                    if (this._destroyed) throw new Error('Injector has already been destroyed.');
                }
                processInjectorType(t, e, n) {
                    if (!(t = it(t))) return !1;
                    let s = mt(t);
                    const r = (null == s && t.ngModule) || void 0,
                        i = void 0 === r ? t : r,
                        o = -1 !== n.indexOf(i);
                    if ((void 0 !== r && (s = mt(r)), null == s)) return !1;
                    if (null != s.imports && !o) {
                        let t;
                        n.push(i);
                        try {
                            Qn(s.imports, (s) => {
                                this.processInjectorType(s, e, n) && (void 0 === t && (t = []), t.push(s));
                            });
                        } finally {
                        }
                        if (void 0 !== t)
                            for (let e = 0; e < t.length; e++) {
                                const { ngModule: n, providers: s } = t[e];
                                Qn(s, (t) => this.processProvider(t, n, s || Lt));
                            }
                    }
                    this.injectorDefTypes.add(i);
                    const a = ie(i) || (() => new i());
                    this.records.set(i, Zi(a, Ui));
                    const l = s.providers;
                    if (null != l && !o) {
                        const e = t;
                        Qn(l, (t) => this.processProvider(t, e, l));
                    }
                    return void 0 !== r && void 0 !== t.providers;
                }
                processProvider(t, e, n) {
                    let s = Gi((t = it(t))) ? t : it(t && t.provide);
                    const r = (function (t, e, n) {
                        return Yi(t)
                            ? Zi(void 0, t.useValue)
                            : Zi(
                                  (function (t, e, n) {
                                      let s;
                                      if (Gi(t)) {
                                          const e = it(t);
                                          return ie(e) || Ki(e);
                                      }
                                      if (Yi(t)) s = () => it(t.useValue);
                                      else if ((r = t) && r.useFactory) s = () => t.useFactory(...cs(t.deps || []));
                                      else if (
                                          (function (t) {
                                              return !(!t || !t.useExisting);
                                          })(t)
                                      )
                                          s = () => as(it(t.useExisting));
                                      else {
                                          const e = it(t && (t.useClass || t.provide));
                                          if (
                                              !(function (t) {
                                                  return !!t.deps;
                                              })(t)
                                          )
                                              return ie(e) || Ki(e);
                                          s = () => new e(...cs(t.deps));
                                      }
                                      var r;
                                      return s;
                                  })(t),
                                  Ui
                              );
                    })(t);
                    if (Gi(t) || !0 !== t.multi) this.records.get(s);
                    else {
                        let e = this.records.get(s);
                        e || ((e = Zi(void 0, Ui, !0)), (e.factory = () => cs(e.multi)), this.records.set(s, e)), (s = t), e.multi.push(t);
                    }
                    this.records.set(s, r);
                }
                hydrate(t, e) {
                    var n;
                    return (
                        e.value === Ui && ((e.value = $i), (e.value = e.factory())),
                        'object' == typeof e.value &&
                            e.value &&
                            null !== (n = e.value) &&
                            'object' == typeof n &&
                            'function' == typeof n.ngOnDestroy &&
                            this.onDestroy.add(e.value),
                        e.value
                    );
                }
                injectableDefInScope(t) {
                    if (!t.providedIn) return !1;
                    const e = it(t.providedIn);
                    return 'string' == typeof e ? 'any' === e || e === this.scope : this.injectorDefTypes.has(e);
                }
            }
            function Ki(t) {
                const e = pt(t),
                    n = null !== e ? e.factory : ie(t);
                if (null !== n) return n;
                if (t instanceof $n) throw new Error(`Token ${et(t)} is missing a \u0275prov definition.`);
                if (t instanceof Function)
                    return (function (t) {
                        const e = t.length;
                        if (e > 0) {
                            const n = Yn(e, '?');
                            throw new Error(`Can't resolve all parameters for ${et(t)}: (${n.join(', ')}).`);
                        }
                        const n = (function (t) {
                            const e = t && (t[gt] || t[_t]);
                            if (e) {
                                const n = (function (t) {
                                    if (t.hasOwnProperty('name')) return t.name;
                                    const e = ('' + t).match(/^function\s*([^\s(]+)/);
                                    return null === e ? '' : e[1];
                                })(t);
                                return (
                                    console.warn(
                                        `DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`
                                    ),
                                    e
                                );
                            }
                            return null;
                        })(t);
                        return null !== n ? () => n.factory(t) : () => new t();
                    })(t);
                throw new Error('unreachable');
            }
            function Zi(t, e, n = !1) {
                return { factory: t, value: e, multi: n ? [] : void 0 };
            }
            function Yi(t) {
                return null !== t && 'object' == typeof t && ss in t;
            }
            function Gi(t) {
                return 'function' == typeof t;
            }
            const Xi = function (t, e, n) {
                return (function (t, e = null, n = null, s) {
                    const r = Wi(t, e, n, s);
                    return r._resolveInjectorDefTypes(), r;
                })({ name: n }, e, t, n);
            };
            class Ji {
                static create(t, e) {
                    return Array.isArray(t) ? Xi(t, e, '') : Xi(t.providers, t.parent, t.name || '');
                }
            }
            function to(t, e) {
                nn(Ys(t)[1], Oe());
            }
            function eo(t) {
                let e = Object.getPrototypeOf(t.type.prototype).constructor,
                    n = !0;
                const s = [t];
                for (; e; ) {
                    let r;
                    if (re(t)) r = e.ɵcmp || e.ɵdir;
                    else {
                        if (e.ɵcmp) throw new Error('Directives cannot inherit Components');
                        r = e.ɵdir;
                    }
                    if (r) {
                        if (n) {
                            s.push(r);
                            const e = t;
                            (e.inputs = no(t.inputs)), (e.declaredInputs = no(t.declaredInputs)), (e.outputs = no(t.outputs));
                            const n = r.hostBindings;
                            n && io(t, n);
                            const i = r.viewQuery,
                                o = r.contentQueries;
                            if (
                                (i && so(t, i),
                                o && ro(t, o),
                                tt(t.inputs, r.inputs),
                                tt(t.declaredInputs, r.declaredInputs),
                                tt(t.outputs, r.outputs),
                                re(r) && r.data.animation)
                            ) {
                                const e = t.data;
                                e.animation = (e.animation || []).concat(r.data.animation);
                            }
                        }
                        const e = r.features;
                        if (e)
                            for (let s = 0; s < e.length; s++) {
                                const r = e[s];
                                r && r.ngInherit && r(t), r === eo && (n = !1);
                            }
                    }
                    e = Object.getPrototypeOf(e);
                }
                !(function (t) {
                    let e = 0,
                        n = null;
                    for (let s = t.length - 1; s >= 0; s--) {
                        const r = t[s];
                        (r.hostVars = e += r.hostVars), (r.hostAttrs = fn(r.hostAttrs, (n = fn(n, r.hostAttrs))));
                    }
                })(s);
            }
            function no(t) {
                return t === Pt ? {} : t === Lt ? [] : t;
            }
            function so(t, e) {
                const n = t.viewQuery;
                t.viewQuery = n
                    ? (t, s) => {
                          e(t, s), n(t, s);
                      }
                    : e;
            }
            function ro(t, e) {
                const n = t.contentQueries;
                t.contentQueries = n
                    ? (t, s, r) => {
                          e(t, s, r), n(t, s, r);
                      }
                    : e;
            }
            function io(t, e) {
                const n = t.hostBindings;
                t.hostBindings = n
                    ? (t, s) => {
                          e(t, s), n(t, s);
                      }
                    : e;
            }
            (Ji.THROW_IF_NOT_FOUND = ts),
                (Ji.NULL = new Bi()),
                (Ji.ɵprov = ht({ token: Ji, providedIn: 'any', factory: () => as(Hi) })),
                (Ji.__NG_ELEMENT_ID__ = -1);
            let oo = null;
            function ao() {
                if (!oo) {
                    const t = It.Symbol;
                    if (t && t.iterator) oo = t.iterator;
                    else {
                        const t = Object.getOwnPropertyNames(Map.prototype);
                        for (let e = 0; e < t.length; ++e) {
                            const n = t[e];
                            'entries' !== n && 'size' !== n && Map.prototype[n] === Map.prototype.entries && (oo = n);
                        }
                    }
                }
                return oo;
            }
            function lo(t) {
                return !!co(t) && (Array.isArray(t) || (!(t instanceof Map) && ao() in t));
            }
            function co(t) {
                return null !== t && ('function' == typeof t || 'object' == typeof t);
            }
            function uo(t, e, n) {
                return !Object.is(t[e], n) && ((t[e] = n), !0);
            }
            function ho(t, e, n, s) {
                const r = Ae();
                return (
                    uo(r, Me(), e) &&
                        (Re(),
                        (function (t, e, n, s, r, i) {
                            const o = _e(t, e);
                            !(function (t, e, n, s, r, i, o) {
                                if (null == i) fe(t) ? t.removeAttribute(e, r, n) : e.removeAttribute(r);
                                else {
                                    const a = null == o ? lt(i) : o(i, s || '', r);
                                    fe(t) ? t.setAttribute(e, r, a, n) : n ? e.setAttributeNS(n, r, a) : e.setAttribute(r, a);
                                }
                            })(e[11], o, i, t.value, n, s, r);
                        })(tn(), r, t, e, n, s)),
                    ho
                );
            }
            function po(t, e, n, s, r, i, o, a) {
                const l = Ae(),
                    c = Re(),
                    u = t + Gt,
                    h = c.firstCreatePass
                        ? (function (t, e, n, s, r, i, o, a, l) {
                              const c = e.consts,
                                  u = Jr(e, t, 4, o || null, Se(c, a));
                              di(e, n, u, Se(c, l)), nn(e, u);
                              const h = (u.tViews = li(2, u, s, r, i, e.directiveRegistry, e.pipeRegistry, null, e.schemas, c));
                              return null !== e.queries && (e.queries.template(e, u), (h.queries = e.queries.embeddedTView(u))), u;
                          })(u, c, l, e, n, s, r, i, o)
                        : c.data[u];
                Pe(h, !1);
                const d = l[11].createComment('');
                wr(c, l, d, h), Zs(d, l), ki(l, (l[u] = xi(d, l, d, h))), se(h) && ii(c, l, h), null != o && oi(l, h, a);
            }
            function fo(t, e = bt.Default) {
                const n = Ae();
                return null === n ? as(t, e) : Rn(Oe(), n, it(t), e);
            }
            function mo(t, e, n) {
                const s = Ae();
                return uo(s, Me(), e) && hi(Re(), tn(), s, t, e, s[11], n, !1), mo;
            }
            function go(t, e, n, s, r) {
                const i = r ? 'class' : 'style';
                Fi(t, n, e.inputs[i], i, s);
            }
            function yo(t, e, n, s) {
                const r = Ae(),
                    i = Re(),
                    o = Gt + t,
                    a = r[11],
                    l = (r[o] = cr(a, e, ke.lFrame.currentNamespace)),
                    c = i.firstCreatePass
                        ? (function (t, e, n, s, r, i, o) {
                              const a = e.consts,
                                  l = Jr(e, t, 2, r, Se(a, i));
                              return (
                                  di(e, n, l, Se(a, o)),
                                  null !== l.attrs && ji(l, l.attrs, !1),
                                  null !== l.mergedAttrs && ji(l, l.mergedAttrs, !0),
                                  null !== e.queries && e.queries.elementStart(e, l),
                                  l
                              );
                          })(o, i, r, 0, e, n, s)
                        : i.data[o];
                Pe(c, !0);
                const u = c.mergedAttrs;
                null !== u && hn(a, l, u);
                const h = c.classes;
                null !== h && Rr(a, l, h);
                const d = c.styles;
                null !== d && Ar(a, l, d),
                    64 != (64 & c.flags) && wr(i, r, l, c),
                    0 === ke.lFrame.elementDepthCount && Zs(l, r),
                    ke.lFrame.elementDepthCount++,
                    se(c) &&
                        (ii(i, r, c),
                        (function (t, e, n) {
                            if (ee(e)) {
                                const s = e.directiveEnd;
                                for (let r = e.directiveStart; r < s; r++) {
                                    const e = t.data[r];
                                    e.contentQueries && e.contentQueries(1, n[r], r);
                                }
                            }
                        })(i, c, r)),
                    null !== s && oi(r, c);
            }
            function _o() {
                let t = Oe();
                Le() ? De() : ((t = t.parent), Pe(t, !1));
                const e = t;
                ke.lFrame.elementDepthCount--;
                const n = Re();
                n.firstCreatePass && (nn(n, t), ee(t) && n.queries.elementEnd(t)),
                    null != e.classesWithoutHost &&
                        (function (t) {
                            return 0 != (16 & t.flags);
                        })(e) &&
                        go(n, e, Ae(), e.classesWithoutHost, !0),
                    null != e.stylesWithoutHost &&
                        (function (t) {
                            return 0 != (32 & t.flags);
                        })(e) &&
                        go(n, e, Ae(), e.stylesWithoutHost, !1);
            }
            function vo(t, e, n, s) {
                yo(t, e, n, s), _o();
            }
            function bo(t) {
                return !!t && 'function' == typeof t.then;
            }
            const wo = function (t) {
                return !!t && 'function' == typeof t.subscribe;
            };
            function xo(t, e, n, s) {
                const r = Ae(),
                    i = Re(),
                    o = Oe();
                return Eo(i, r, r[11], o, t, e, !!n, s), xo;
            }
            function So(t, e) {
                const n = Oe(),
                    s = Ae(),
                    r = Re();
                return Eo(r, s, Di(Ve(r.data), n, s), n, t, e, !1), So;
            }
            function Eo(t, e, n, s, r, i, o, a) {
                const l = se(s),
                    c = t.firstCreatePass && Li(t),
                    u = Pi(e);
                let h = !0;
                if (3 & s.type || a) {
                    const d = _e(s, e),
                        p = a ? a(d) : d,
                        f = u.length,
                        m = a ? (t) => a(ge(t[s.index])) : s.index;
                    if (fe(n)) {
                        let o = null;
                        if (
                            (!a &&
                                l &&
                                (o = (function (t, e, n, s) {
                                    const r = t.cleanup;
                                    if (null != r)
                                        for (let i = 0; i < r.length - 1; i += 2) {
                                            const t = r[i];
                                            if (t === n && r[i + 1] === s) {
                                                const t = e[7],
                                                    n = r[i + 2];
                                                return t.length > n ? t[n] : null;
                                            }
                                            'string' == typeof t && (i += 2);
                                        }
                                    return null;
                                })(t, e, r, s.index)),
                            null !== o)
                        )
                            ((o.__ngLastListenerFn__ || o).__ngNextListenerFn__ = i), (o.__ngLastListenerFn__ = i), (h = !1);
                        else {
                            i = ko(s, e, 0, i, !1);
                            const t = n.listen(p, r, i);
                            u.push(i, t), c && c.push(r, m, f, f + 1);
                        }
                    } else (i = ko(s, e, 0, i, !0)), p.addEventListener(r, i, o), u.push(i), c && c.push(r, m, f, o);
                } else i = ko(s, e, 0, i, !1);
                const d = s.outputs;
                let p;
                if (h && null !== d && (p = d[r])) {
                    const t = p.length;
                    if (t)
                        for (let n = 0; n < t; n += 2) {
                            const t = e[p[n]][p[n + 1]].subscribe(i),
                                o = u.length;
                            u.push(i, t), c && c.push(r, s.index, o, -(o + 1));
                        }
                }
            }
            function Co(t, e, n, s) {
                try {
                    return !1 !== n(s);
                } catch (r) {
                    return Ni(t, r), !1;
                }
            }
            function ko(t, e, n, s, r) {
                return function n(i) {
                    if (i === Function) return s;
                    const o = 2 & t.flags ? be(t.index, e) : e;
                    0 == (32 & e[2]) && Ti(o);
                    let a = Co(e, 0, s, i),
                        l = n.__ngNextListenerFn__;
                    for (; l; ) (a = Co(e, 0, l, i) && a), (l = l.__ngNextListenerFn__);
                    return r && !1 === a && (i.preventDefault(), (i.returnValue = !1)), a;
                };
            }
            function To(t = 1) {
                return (function (t) {
                    return (ke.lFrame.contextLView = (function (t, e) {
                        for (; t > 0; ) (e = e[15]), t--;
                        return e;
                    })(t, ke.lFrame.contextLView))[8];
                })(t);
            }
            function Ao(t, e) {
                let n = null;
                const s = (function (t) {
                    const e = t.attrs;
                    if (null != e) {
                        const t = e.indexOf(5);
                        if (0 == (1 & t)) return e[t + 1];
                    }
                    return null;
                })(t);
                for (let r = 0; r < e.length; r++) {
                    const i = e[r];
                    if ('*' !== i) {
                        if (null === s ? jr(t, i, !0) : Hr(s, i)) return r;
                    } else n = r;
                }
                return n;
            }
            function Ro(t) {
                const e = Ae()[16][6];
                if (!e.projection) {
                    const n = (e.projection = Yn(t ? t.length : 1, null)),
                        s = n.slice();
                    let r = e.child;
                    for (; null !== r; ) {
                        const e = t ? Ao(r, t) : 0;
                        null !== e && (s[e] ? (s[e].projectionNext = r) : (n[e] = r), (s[e] = r)), (r = r.next);
                    }
                }
            }
            function Oo(t, e = 0, n) {
                const s = Ae(),
                    r = Re(),
                    i = Jr(r, Gt + t, 16, null, n || null);
                null === i.projection && (i.projection = e),
                    De(),
                    64 != (64 & i.flags) &&
                        (function (t, e, n) {
                            Tr(e[11], 0, e, n, fr(t, n, e), vr(n.parent || e[6], n, e));
                        })(r, s, i);
            }
            function Io(t, e, n, s, r) {
                const i = t[n + 1],
                    o = null === e;
                let a = s ? Wr(i) : Kr(i),
                    l = !1;
                for (; 0 !== a && (!1 === l || o); ) {
                    const n = t[a + 1];
                    Po(t[a], e) && ((l = !0), (t[a + 1] = s ? Yr(n) : Qr(n))), (a = s ? Wr(n) : Kr(n));
                }
                l && (t[n + 1] = s ? Qr(i) : Yr(i));
            }
            function Po(t, e) {
                return (
                    null === t ||
                    null == e ||
                    (Array.isArray(t) ? t[1] : t) === e ||
                    (!(!Array.isArray(t) || 'string' != typeof e) && Jn(t, e) >= 0)
                );
            }
            function Lo(t, e, n) {
                return No(t, e, n, !1), Lo;
            }
            function Do(t, e) {
                return No(t, e, null, !0), Do;
            }
            function No(t, e, n, s) {
                const r = Ae(),
                    i = Re(),
                    o = je(2);
                i.firstUpdatePass &&
                    (function (t, e, n, s) {
                        const r = t.data;
                        if (null === r[n + 1]) {
                            const i = r[Xe()],
                                o = (function (t, e) {
                                    return e >= t.expandoStartIndex;
                                })(t, n);
                            (function (t, e) {
                                return 0 != (t.flags & (e ? 16 : 32));
                            })(i, s) &&
                                null === e &&
                                !o &&
                                (e = !1),
                                (e = (function (t, e, n, s) {
                                    const r = Ve(t);
                                    let i = s ? e.residualClasses : e.residualStyles;
                                    if (null === r)
                                        0 === (s ? e.classBindings : e.styleBindings) &&
                                            ((n = Mo((n = Fo(null, t, e, n, s)), e.attrs, s)), (i = null));
                                    else {
                                        const o = e.directiveStylingLast;
                                        if (-1 === o || t[o] !== r)
                                            if (((n = Fo(r, t, e, n, s)), null === i)) {
                                                let n = (function (t, e, n) {
                                                    const s = n ? e.classBindings : e.styleBindings;
                                                    if (0 !== Kr(s)) return t[Wr(s)];
                                                })(t, e, s);
                                                void 0 !== n &&
                                                    Array.isArray(n) &&
                                                    ((n = Fo(null, t, e, n[1], s)),
                                                    (n = Mo(n, e.attrs, s)),
                                                    (function (t, e, n, s) {
                                                        t[Wr(n ? e.classBindings : e.styleBindings)] = s;
                                                    })(t, e, s, n));
                                            } else
                                                i = (function (t, e, n) {
                                                    let s;
                                                    const r = e.directiveEnd;
                                                    for (let i = 1 + e.directiveStylingLast; i < r; i++) s = Mo(s, t[i].hostAttrs, n);
                                                    return Mo(s, e.attrs, n);
                                                })(t, e, s);
                                    }
                                    return void 0 !== i && (s ? (e.residualClasses = i) : (e.residualStyles = i)), n;
                                })(r, i, e, s)),
                                (function (t, e, n, s, r, i) {
                                    let o = i ? e.classBindings : e.styleBindings,
                                        a = Wr(o),
                                        l = Kr(o);
                                    t[s] = n;
                                    let c,
                                        u = !1;
                                    if (Array.isArray(n)) {
                                        const t = n;
                                        (c = t[1]), (null === c || Jn(t, c) > 0) && (u = !0);
                                    } else c = n;
                                    if (r)
                                        if (0 !== l) {
                                            const e = Wr(t[a + 1]);
                                            (t[s + 1] = qr(e, a)),
                                                0 !== e && (t[e + 1] = Zr(t[e + 1], s)),
                                                (t[a + 1] = (131071 & t[a + 1]) | (s << 17));
                                        } else (t[s + 1] = qr(a, 0)), 0 !== a && (t[a + 1] = Zr(t[a + 1], s)), (a = s);
                                    else (t[s + 1] = qr(l, 0)), 0 === a ? (a = s) : (t[l + 1] = Zr(t[l + 1], s)), (l = s);
                                    u && (t[s + 1] = Qr(t[s + 1])),
                                        Io(t, c, s, !0),
                                        Io(t, c, s, !1),
                                        (function (t, e, n, s, r) {
                                            const i = r ? t.residualClasses : t.residualStyles;
                                            null != i && 'string' == typeof e && Jn(i, e) >= 0 && (n[s + 1] = Yr(n[s + 1]));
                                        })(e, c, t, s, i),
                                        (o = qr(a, l)),
                                        i ? (e.classBindings = o) : (e.styleBindings = o);
                                })(r, i, e, n, o, s);
                        }
                    })(i, t, o, s),
                    e !== Ur &&
                        uo(r, o, e) &&
                        (function (t, e, n, s, r, i, o, a) {
                            if (!(3 & e.type)) return;
                            const l = t.data,
                                c = l[a + 1];
                            Ho(1 == (1 & c) ? jo(l, e, n, r, Kr(c), o) : void 0) ||
                                (Ho(i) ||
                                    ((function (t) {
                                        return 2 == (2 & t);
                                    })(c) &&
                                        (i = jo(l, null, n, r, a, o))),
                                (function (t, e, n, s, r) {
                                    const i = fe(t);
                                    if (e)
                                        r ? (i ? t.addClass(n, s) : n.classList.add(s)) : i ? t.removeClass(n, s) : n.classList.remove(s);
                                    else {
                                        let e = -1 === s.indexOf('-') ? void 0 : nr.DashCase;
                                        if (null == r) i ? t.removeStyle(n, s, e) : n.style.removeProperty(s);
                                        else {
                                            const o = 'string' == typeof r && r.endsWith('!important');
                                            o && ((r = r.slice(0, -10)), (e |= nr.Important)),
                                                i ? t.setStyle(n, s, r, e) : n.style.setProperty(s, r, o ? 'important' : '');
                                        }
                                    }
                                })(s, o, ye(Xe(), n), r, i));
                        })(
                            i,
                            i.data[Xe()],
                            r,
                            r[11],
                            t,
                            (r[o + 1] = (function (t, e) {
                                return null == t || ('string' == typeof e ? (t += e) : 'object' == typeof t && (t = et(xs(t)))), t;
                            })(e, n)),
                            s,
                            o
                        );
            }
            function Fo(t, e, n, s, r) {
                let i = null;
                const o = n.directiveEnd;
                let a = n.directiveStylingLast;
                for (-1 === a ? (a = n.directiveStart) : a++; a < o && ((i = e[a]), (s = Mo(s, i.hostAttrs, r)), i !== t); ) a++;
                return null !== t && (n.directiveStylingLast = a), s;
            }
            function Mo(t, e, n) {
                const s = n ? 1 : 2;
                let r = -1;
                if (null !== e)
                    for (let i = 0; i < e.length; i++) {
                        const o = e[i];
                        'number' == typeof o
                            ? (r = o)
                            : r === s && (Array.isArray(t) || (t = void 0 === t ? [] : ['', t]), Gn(t, o, !!n || e[++i]));
                    }
                return void 0 === t ? null : t;
            }
            function jo(t, e, n, s, r, i) {
                const o = null === e;
                let a;
                for (; r > 0; ) {
                    const e = t[r],
                        i = Array.isArray(e),
                        l = i ? e[1] : e,
                        c = null === l;
                    let u = n[r + 1];
                    u === Ur && (u = c ? Lt : void 0);
                    let h = c ? Xn(u, s) : l === s ? u : void 0;
                    if ((i && !Ho(h) && (h = Xn(e, s)), Ho(h) && ((a = h), o))) return a;
                    const d = t[r + 1];
                    r = o ? Wr(d) : Kr(d);
                }
                if (null !== e) {
                    let t = i ? e.residualClasses : e.residualStyles;
                    null != t && (a = Xn(t, s));
                }
                return a;
            }
            function Ho(t) {
                return void 0 !== t;
            }
            function Bo(t, e = '') {
                const n = Ae(),
                    s = Re(),
                    r = t + Gt,
                    i = s.firstCreatePass ? Jr(s, r, 1, e, null) : s.data[r],
                    o = (n[r] = (function (t, e) {
                        return fe(t) ? t.createText(e) : t.createTextNode(e);
                    })(n[11], e));
                wr(s, n, o, i), Pe(i, !1);
            }
            function Vo(t) {
                return Uo('', t, ''), Vo;
            }
            function Uo(t, e, n) {
                const s = Ae(),
                    r = (function (t, e, n, s) {
                        return uo(t, Me(), n) ? e + lt(n) + s : Ur;
                    })(s, t, e, n);
                return r !== Ur && Mi(s, Xe(), r), Uo;
            }
            function $o(t, e, n, s, r) {
                const i = Ae(),
                    o = (function (t, e, n, s, r, i) {
                        const o = (function (t, e, n, s) {
                            const r = uo(t, e, n);
                            return uo(t, e + 1, s) || r;
                        })(t, ke.lFrame.bindingIndex, n, r);
                        return je(2), o ? e + lt(n) + s + lt(r) + i : Ur;
                    })(i, t, e, n, s, r);
                return o !== Ur && Mi(i, Xe(), o), $o;
            }
            function zo(t, e, n) {
                const s = Ae();
                return uo(s, Me(), e) && hi(Re(), tn(), s, t, e, s[11], n, !0), zo;
            }
            function qo(t, e, n) {
                const s = Ae();
                if (uo(s, Me(), e)) {
                    const r = Re(),
                        i = tn();
                    hi(r, i, s, t, e, Di(Ve(r.data), i, s), n, !0);
                }
                return qo;
            }
            const Wo = void 0;
            var Qo = [
                'en',
                [['a', 'p'], ['AM', 'PM'], Wo],
                [['AM', 'PM'], Wo, Wo],
                [
                    ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
                    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                    ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                ],
                Wo,
                [
                    ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
                    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July',
                        'August',
                        'September',
                        'October',
                        'November',
                        'December',
                    ],
                ],
                Wo,
                [
                    ['B', 'A'],
                    ['BC', 'AD'],
                    ['Before Christ', 'Anno Domini'],
                ],
                0,
                [6, 0],
                ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],
                ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],
                ['{1}, {0}', Wo, "{1} 'at' {0}", Wo],
                ['.', ',', ';', '%', '+', '-', 'E', '\xd7', '\u2030', '\u221e', 'NaN', ':'],
                ['#,##0.###', '#,##0%', '\xa4#,##0.00', '#E0'],
                'USD',
                '$',
                'US Dollar',
                {},
                'ltr',
                function (t) {
                    const e = Math.floor(Math.abs(t)),
                        n = t.toString().replace(/^[^.]*\.?/, '').length;
                    return 1 === e && 0 === n ? 1 : 5;
                },
            ];
            let Ko = {};
            function Zo(t) {
                return t in Ko || (Ko[t] = It.ng && It.ng.common && It.ng.common.locales && It.ng.common.locales[t]), Ko[t];
            }
            var Yo = (() => (
                ((Yo = Yo || {})[(Yo.LocaleId = 0)] = 'LocaleId'),
                (Yo[(Yo.DayPeriodsFormat = 1)] = 'DayPeriodsFormat'),
                (Yo[(Yo.DayPeriodsStandalone = 2)] = 'DayPeriodsStandalone'),
                (Yo[(Yo.DaysFormat = 3)] = 'DaysFormat'),
                (Yo[(Yo.DaysStandalone = 4)] = 'DaysStandalone'),
                (Yo[(Yo.MonthsFormat = 5)] = 'MonthsFormat'),
                (Yo[(Yo.MonthsStandalone = 6)] = 'MonthsStandalone'),
                (Yo[(Yo.Eras = 7)] = 'Eras'),
                (Yo[(Yo.FirstDayOfWeek = 8)] = 'FirstDayOfWeek'),
                (Yo[(Yo.WeekendRange = 9)] = 'WeekendRange'),
                (Yo[(Yo.DateFormat = 10)] = 'DateFormat'),
                (Yo[(Yo.TimeFormat = 11)] = 'TimeFormat'),
                (Yo[(Yo.DateTimeFormat = 12)] = 'DateTimeFormat'),
                (Yo[(Yo.NumberSymbols = 13)] = 'NumberSymbols'),
                (Yo[(Yo.NumberFormats = 14)] = 'NumberFormats'),
                (Yo[(Yo.CurrencyCode = 15)] = 'CurrencyCode'),
                (Yo[(Yo.CurrencySymbol = 16)] = 'CurrencySymbol'),
                (Yo[(Yo.CurrencyName = 17)] = 'CurrencyName'),
                (Yo[(Yo.Currencies = 18)] = 'Currencies'),
                (Yo[(Yo.Directionality = 19)] = 'Directionality'),
                (Yo[(Yo.PluralCase = 20)] = 'PluralCase'),
                (Yo[(Yo.ExtraData = 21)] = 'ExtraData'),
                Yo
            ))();
            const Go = 'en-US';
            let Xo = Go;
            function Jo(t) {
                var e, n;
                (n = 'Expected localeId to be defined'),
                    null == (e = t) &&
                        (function (t, e, n, s) {
                            throw new Error(`ASSERTION ERROR: ${t} [Expected=> null != ${e} <=Actual]`);
                        })(n, e),
                    'string' == typeof t && (Xo = t.toLowerCase().replace(/_/g, '-'));
            }
            class ta {}
            class ea {
                resolveComponentFactory(t) {
                    throw (function (t) {
                        const e = Error(`No component factory found for ${et(t)}. Did you add it to @NgModule.entryComponents?`);
                        return (e.ngComponent = t), e;
                    })(t);
                }
            }
            class na {}
            function sa(...t) {}
            function ra(t, e) {
                return new oa(_e(t, e));
            }
            na.NULL = new ea();
            const ia = function () {
                return ra(Oe(), Ae());
            };
            let oa = (() => {
                class t {
                    constructor(t) {
                        this.nativeElement = t;
                    }
                }
                return (t.__NG_ELEMENT_ID__ = ia), t;
            })();
            function aa(t) {
                return t instanceof oa ? t.nativeElement : t;
            }
            class la {}
            let ca = (() => {
                class t {}
                return (t.__NG_ELEMENT_ID__ = () => ua()), t;
            })();
            const ua = function () {
                const t = Ae(),
                    e = be(Oe().index, t);
                return (function (t) {
                    return t[11];
                })(Jt(e) ? e : t);
            };
            let ha = (() => {
                class t {}
                return (t.ɵprov = ht({ token: t, providedIn: 'root', factory: () => null })), t;
            })();
            class da {
                constructor(t) {
                    (this.full = t),
                        (this.major = t.split('.')[0]),
                        (this.minor = t.split('.')[1]),
                        (this.patch = t.split('.').slice(2).join('.'));
                }
            }
            const pa = new da('12.2.2');
            class fa {
                constructor() {}
                supports(t) {
                    return lo(t);
                }
                create(t) {
                    return new ga(t);
                }
            }
            const ma = (t, e) => e;
            class ga {
                constructor(t) {
                    (this.length = 0),
                        (this._linkedRecords = null),
                        (this._unlinkedRecords = null),
                        (this._previousItHead = null),
                        (this._itHead = null),
                        (this._itTail = null),
                        (this._additionsHead = null),
                        (this._additionsTail = null),
                        (this._movesHead = null),
                        (this._movesTail = null),
                        (this._removalsHead = null),
                        (this._removalsTail = null),
                        (this._identityChangesHead = null),
                        (this._identityChangesTail = null),
                        (this._trackByFn = t || ma);
                }
                forEachItem(t) {
                    let e;
                    for (e = this._itHead; null !== e; e = e._next) t(e);
                }
                forEachOperation(t) {
                    let e = this._itHead,
                        n = this._removalsHead,
                        s = 0,
                        r = null;
                    for (; e || n; ) {
                        const i = !n || (e && e.currentIndex < ba(n, s, r)) ? e : n,
                            o = ba(i, s, r),
                            a = i.currentIndex;
                        if (i === n) s--, (n = n._nextRemoved);
                        else if (((e = e._next), null == i.previousIndex)) s++;
                        else {
                            r || (r = []);
                            const t = o - s,
                                e = a - s;
                            if (t != e) {
                                for (let n = 0; n < t; n++) {
                                    const s = n < r.length ? r[n] : (r[n] = 0),
                                        i = s + n;
                                    e <= i && i < t && (r[n] = s + 1);
                                }
                                r[i.previousIndex] = e - t;
                            }
                        }
                        o !== a && t(i, o, a);
                    }
                }
                forEachPreviousItem(t) {
                    let e;
                    for (e = this._previousItHead; null !== e; e = e._nextPrevious) t(e);
                }
                forEachAddedItem(t) {
                    let e;
                    for (e = this._additionsHead; null !== e; e = e._nextAdded) t(e);
                }
                forEachMovedItem(t) {
                    let e;
                    for (e = this._movesHead; null !== e; e = e._nextMoved) t(e);
                }
                forEachRemovedItem(t) {
                    let e;
                    for (e = this._removalsHead; null !== e; e = e._nextRemoved) t(e);
                }
                forEachIdentityChange(t) {
                    let e;
                    for (e = this._identityChangesHead; null !== e; e = e._nextIdentityChange) t(e);
                }
                diff(t) {
                    if ((null == t && (t = []), !lo(t)))
                        throw new Error(`Error trying to diff '${et(t)}'. Only arrays and iterables are allowed`);
                    return this.check(t) ? this : null;
                }
                onDestroy() {}
                check(t) {
                    this._reset();
                    let e,
                        n,
                        s,
                        r = this._itHead,
                        i = !1;
                    if (Array.isArray(t)) {
                        this.length = t.length;
                        for (let e = 0; e < this.length; e++)
                            (n = t[e]),
                                (s = this._trackByFn(e, n)),
                                null !== r && Object.is(r.trackById, s)
                                    ? (i && (r = this._verifyReinsertion(r, n, s, e)),
                                      Object.is(r.item, n) || this._addIdentityChange(r, n))
                                    : ((r = this._mismatch(r, n, s, e)), (i = !0)),
                                (r = r._next);
                    } else
                        (e = 0),
                            (function (t, e) {
                                if (Array.isArray(t)) for (let n = 0; n < t.length; n++) e(t[n]);
                                else {
                                    const n = t[ao()]();
                                    let s;
                                    for (; !(s = n.next()).done; ) e(s.value);
                                }
                            })(t, (t) => {
                                (s = this._trackByFn(e, t)),
                                    null !== r && Object.is(r.trackById, s)
                                        ? (i && (r = this._verifyReinsertion(r, t, s, e)),
                                          Object.is(r.item, t) || this._addIdentityChange(r, t))
                                        : ((r = this._mismatch(r, t, s, e)), (i = !0)),
                                    (r = r._next),
                                    e++;
                            }),
                            (this.length = e);
                    return this._truncate(r), (this.collection = t), this.isDirty;
                }
                get isDirty() {
                    return (
                        null !== this._additionsHead ||
                        null !== this._movesHead ||
                        null !== this._removalsHead ||
                        null !== this._identityChangesHead
                    );
                }
                _reset() {
                    if (this.isDirty) {
                        let t;
                        for (t = this._previousItHead = this._itHead; null !== t; t = t._next) t._nextPrevious = t._next;
                        for (t = this._additionsHead; null !== t; t = t._nextAdded) t.previousIndex = t.currentIndex;
                        for (this._additionsHead = this._additionsTail = null, t = this._movesHead; null !== t; t = t._nextMoved)
                            t.previousIndex = t.currentIndex;
                        (this._movesHead = this._movesTail = null),
                            (this._removalsHead = this._removalsTail = null),
                            (this._identityChangesHead = this._identityChangesTail = null);
                    }
                }
                _mismatch(t, e, n, s) {
                    let r;
                    return (
                        null === t ? (r = this._itTail) : ((r = t._prev), this._remove(t)),
                        null !== (t = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(n, null))
                            ? (Object.is(t.item, e) || this._addIdentityChange(t, e), this._reinsertAfter(t, r, s))
                            : null !== (t = null === this._linkedRecords ? null : this._linkedRecords.get(n, s))
                            ? (Object.is(t.item, e) || this._addIdentityChange(t, e), this._moveAfter(t, r, s))
                            : (t = this._addAfter(new ya(e, n), r, s)),
                        t
                    );
                }
                _verifyReinsertion(t, e, n, s) {
                    let r = null === this._unlinkedRecords ? null : this._unlinkedRecords.get(n, null);
                    return (
                        null !== r
                            ? (t = this._reinsertAfter(r, t._prev, s))
                            : t.currentIndex != s && ((t.currentIndex = s), this._addToMoves(t, s)),
                        t
                    );
                }
                _truncate(t) {
                    for (; null !== t; ) {
                        const e = t._next;
                        this._addToRemovals(this._unlink(t)), (t = e);
                    }
                    null !== this._unlinkedRecords && this._unlinkedRecords.clear(),
                        null !== this._additionsTail && (this._additionsTail._nextAdded = null),
                        null !== this._movesTail && (this._movesTail._nextMoved = null),
                        null !== this._itTail && (this._itTail._next = null),
                        null !== this._removalsTail && (this._removalsTail._nextRemoved = null),
                        null !== this._identityChangesTail && (this._identityChangesTail._nextIdentityChange = null);
                }
                _reinsertAfter(t, e, n) {
                    null !== this._unlinkedRecords && this._unlinkedRecords.remove(t);
                    const s = t._prevRemoved,
                        r = t._nextRemoved;
                    return (
                        null === s ? (this._removalsHead = r) : (s._nextRemoved = r),
                        null === r ? (this._removalsTail = s) : (r._prevRemoved = s),
                        this._insertAfter(t, e, n),
                        this._addToMoves(t, n),
                        t
                    );
                }
                _moveAfter(t, e, n) {
                    return this._unlink(t), this._insertAfter(t, e, n), this._addToMoves(t, n), t;
                }
                _addAfter(t, e, n) {
                    return (
                        this._insertAfter(t, e, n),
                        (this._additionsTail =
                            null === this._additionsTail ? (this._additionsHead = t) : (this._additionsTail._nextAdded = t)),
                        t
                    );
                }
                _insertAfter(t, e, n) {
                    const s = null === e ? this._itHead : e._next;
                    return (
                        (t._next = s),
                        (t._prev = e),
                        null === s ? (this._itTail = t) : (s._prev = t),
                        null === e ? (this._itHead = t) : (e._next = t),
                        null === this._linkedRecords && (this._linkedRecords = new va()),
                        this._linkedRecords.put(t),
                        (t.currentIndex = n),
                        t
                    );
                }
                _remove(t) {
                    return this._addToRemovals(this._unlink(t));
                }
                _unlink(t) {
                    null !== this._linkedRecords && this._linkedRecords.remove(t);
                    const e = t._prev,
                        n = t._next;
                    return null === e ? (this._itHead = n) : (e._next = n), null === n ? (this._itTail = e) : (n._prev = e), t;
                }
                _addToMoves(t, e) {
                    return (
                        t.previousIndex === e ||
                            (this._movesTail = null === this._movesTail ? (this._movesHead = t) : (this._movesTail._nextMoved = t)),
                        t
                    );
                }
                _addToRemovals(t) {
                    return (
                        null === this._unlinkedRecords && (this._unlinkedRecords = new va()),
                        this._unlinkedRecords.put(t),
                        (t.currentIndex = null),
                        (t._nextRemoved = null),
                        null === this._removalsTail
                            ? ((this._removalsTail = this._removalsHead = t), (t._prevRemoved = null))
                            : ((t._prevRemoved = this._removalsTail), (this._removalsTail = this._removalsTail._nextRemoved = t)),
                        t
                    );
                }
                _addIdentityChange(t, e) {
                    return (
                        (t.item = e),
                        (this._identityChangesTail =
                            null === this._identityChangesTail
                                ? (this._identityChangesHead = t)
                                : (this._identityChangesTail._nextIdentityChange = t)),
                        t
                    );
                }
            }
            class ya {
                constructor(t, e) {
                    (this.item = t),
                        (this.trackById = e),
                        (this.currentIndex = null),
                        (this.previousIndex = null),
                        (this._nextPrevious = null),
                        (this._prev = null),
                        (this._next = null),
                        (this._prevDup = null),
                        (this._nextDup = null),
                        (this._prevRemoved = null),
                        (this._nextRemoved = null),
                        (this._nextAdded = null),
                        (this._nextMoved = null),
                        (this._nextIdentityChange = null);
                }
            }
            class _a {
                constructor() {
                    (this._head = null), (this._tail = null);
                }
                add(t) {
                    null === this._head
                        ? ((this._head = this._tail = t), (t._nextDup = null), (t._prevDup = null))
                        : ((this._tail._nextDup = t), (t._prevDup = this._tail), (t._nextDup = null), (this._tail = t));
                }
                get(t, e) {
                    let n;
                    for (n = this._head; null !== n; n = n._nextDup)
                        if ((null === e || e <= n.currentIndex) && Object.is(n.trackById, t)) return n;
                    return null;
                }
                remove(t) {
                    const e = t._prevDup,
                        n = t._nextDup;
                    return (
                        null === e ? (this._head = n) : (e._nextDup = n),
                        null === n ? (this._tail = e) : (n._prevDup = e),
                        null === this._head
                    );
                }
            }
            class va {
                constructor() {
                    this.map = new Map();
                }
                put(t) {
                    const e = t.trackById;
                    let n = this.map.get(e);
                    n || ((n = new _a()), this.map.set(e, n)), n.add(t);
                }
                get(t, e) {
                    const n = this.map.get(t);
                    return n ? n.get(t, e) : null;
                }
                remove(t) {
                    const e = t.trackById;
                    return this.map.get(e).remove(t) && this.map.delete(e), t;
                }
                get isEmpty() {
                    return 0 === this.map.size;
                }
                clear() {
                    this.map.clear();
                }
            }
            function ba(t, e, n) {
                const s = t.previousIndex;
                if (null === s) return s;
                let r = 0;
                return n && s < n.length && (r = n[s]), s + e + r;
            }
            class wa {
                constructor() {}
                supports(t) {
                    return t instanceof Map || co(t);
                }
                create() {
                    return new xa();
                }
            }
            class xa {
                constructor() {
                    (this._records = new Map()),
                        (this._mapHead = null),
                        (this._appendAfter = null),
                        (this._previousMapHead = null),
                        (this._changesHead = null),
                        (this._changesTail = null),
                        (this._additionsHead = null),
                        (this._additionsTail = null),
                        (this._removalsHead = null),
                        (this._removalsTail = null);
                }
                get isDirty() {
                    return null !== this._additionsHead || null !== this._changesHead || null !== this._removalsHead;
                }
                forEachItem(t) {
                    let e;
                    for (e = this._mapHead; null !== e; e = e._next) t(e);
                }
                forEachPreviousItem(t) {
                    let e;
                    for (e = this._previousMapHead; null !== e; e = e._nextPrevious) t(e);
                }
                forEachChangedItem(t) {
                    let e;
                    for (e = this._changesHead; null !== e; e = e._nextChanged) t(e);
                }
                forEachAddedItem(t) {
                    let e;
                    for (e = this._additionsHead; null !== e; e = e._nextAdded) t(e);
                }
                forEachRemovedItem(t) {
                    let e;
                    for (e = this._removalsHead; null !== e; e = e._nextRemoved) t(e);
                }
                diff(t) {
                    if (t) {
                        if (!(t instanceof Map || co(t)))
                            throw new Error(`Error trying to diff '${et(t)}'. Only maps and objects are allowed`);
                    } else t = new Map();
                    return this.check(t) ? this : null;
                }
                onDestroy() {}
                check(t) {
                    this._reset();
                    let e = this._mapHead;
                    if (
                        ((this._appendAfter = null),
                        this._forEach(t, (t, n) => {
                            if (e && e.key === n) this._maybeAddToChanges(e, t), (this._appendAfter = e), (e = e._next);
                            else {
                                const s = this._getOrCreateRecordForKey(n, t);
                                e = this._insertBeforeOrAppend(e, s);
                            }
                        }),
                        e)
                    ) {
                        e._prev && (e._prev._next = null), (this._removalsHead = e);
                        for (let t = e; null !== t; t = t._nextRemoved)
                            t === this._mapHead && (this._mapHead = null),
                                this._records.delete(t.key),
                                (t._nextRemoved = t._next),
                                (t.previousValue = t.currentValue),
                                (t.currentValue = null),
                                (t._prev = null),
                                (t._next = null);
                    }
                    return (
                        this._changesTail && (this._changesTail._nextChanged = null),
                        this._additionsTail && (this._additionsTail._nextAdded = null),
                        this.isDirty
                    );
                }
                _insertBeforeOrAppend(t, e) {
                    if (t) {
                        const n = t._prev;
                        return (
                            (e._next = t),
                            (e._prev = n),
                            (t._prev = e),
                            n && (n._next = e),
                            t === this._mapHead && (this._mapHead = e),
                            (this._appendAfter = t),
                            t
                        );
                    }
                    return (
                        this._appendAfter ? ((this._appendAfter._next = e), (e._prev = this._appendAfter)) : (this._mapHead = e),
                        (this._appendAfter = e),
                        null
                    );
                }
                _getOrCreateRecordForKey(t, e) {
                    if (this._records.has(t)) {
                        const n = this._records.get(t);
                        this._maybeAddToChanges(n, e);
                        const s = n._prev,
                            r = n._next;
                        return s && (s._next = r), r && (r._prev = s), (n._next = null), (n._prev = null), n;
                    }
                    const n = new Sa(t);
                    return this._records.set(t, n), (n.currentValue = e), this._addToAdditions(n), n;
                }
                _reset() {
                    if (this.isDirty) {
                        let t;
                        for (this._previousMapHead = this._mapHead, t = this._previousMapHead; null !== t; t = t._next)
                            t._nextPrevious = t._next;
                        for (t = this._changesHead; null !== t; t = t._nextChanged) t.previousValue = t.currentValue;
                        for (t = this._additionsHead; null != t; t = t._nextAdded) t.previousValue = t.currentValue;
                        (this._changesHead = this._changesTail = null),
                            (this._additionsHead = this._additionsTail = null),
                            (this._removalsHead = null);
                    }
                }
                _maybeAddToChanges(t, e) {
                    Object.is(e, t.currentValue) || ((t.previousValue = t.currentValue), (t.currentValue = e), this._addToChanges(t));
                }
                _addToAdditions(t) {
                    null === this._additionsHead
                        ? (this._additionsHead = this._additionsTail = t)
                        : ((this._additionsTail._nextAdded = t), (this._additionsTail = t));
                }
                _addToChanges(t) {
                    null === this._changesHead
                        ? (this._changesHead = this._changesTail = t)
                        : ((this._changesTail._nextChanged = t), (this._changesTail = t));
                }
                _forEach(t, e) {
                    t instanceof Map ? t.forEach(e) : Object.keys(t).forEach((n) => e(t[n], n));
                }
            }
            class Sa {
                constructor(t) {
                    (this.key = t),
                        (this.previousValue = null),
                        (this.currentValue = null),
                        (this._nextPrevious = null),
                        (this._next = null),
                        (this._prev = null),
                        (this._nextAdded = null),
                        (this._nextRemoved = null),
                        (this._nextChanged = null);
                }
            }
            function Ea() {
                return new Ca([new fa()]);
            }
            let Ca = (() => {
                class t {
                    constructor(t) {
                        this.factories = t;
                    }
                    static create(e, n) {
                        if (null != n) {
                            const t = n.factories.slice();
                            e = e.concat(t);
                        }
                        return new t(e);
                    }
                    static extend(e) {
                        return { provide: t, useFactory: (n) => t.create(e, n || Ea()), deps: [[t, new ps(), new ds()]] };
                    }
                    find(t) {
                        const e = this.factories.find((e) => e.supports(t));
                        if (null != e) return e;
                        throw new Error(`Cannot find a differ supporting object '${t}' of type '${((n = t), n.name || typeof n)}'`);
                        var n;
                    }
                }
                return (t.ɵprov = ht({ token: t, providedIn: 'root', factory: Ea })), t;
            })();
            function ka() {
                return new Ta([new wa()]);
            }
            let Ta = (() => {
                class t {
                    constructor(t) {
                        this.factories = t;
                    }
                    static create(e, n) {
                        if (n) {
                            const t = n.factories.slice();
                            e = e.concat(t);
                        }
                        return new t(e);
                    }
                    static extend(e) {
                        return { provide: t, useFactory: (n) => t.create(e, n || ka()), deps: [[t, new ps(), new ds()]] };
                    }
                    find(t) {
                        const e = this.factories.find((e) => e.supports(t));
                        if (e) return e;
                        throw new Error(`Cannot find a differ supporting object '${t}'`);
                    }
                }
                return (t.ɵprov = ht({ token: t, providedIn: 'root', factory: ka })), t;
            })();
            function Aa(t, e, n, s, r = !1) {
                for (; null !== n; ) {
                    const i = e[n.index];
                    if ((null !== i && s.push(ge(i)), te(i)))
                        for (let t = Xt; t < i.length; t++) {
                            const e = i[t],
                                n = e[1].firstChild;
                            null !== n && Aa(e[1], e, n, s);
                        }
                    const o = n.type;
                    if (8 & o) Aa(t, e, n.child, s);
                    else if (32 & o) {
                        const t = sr(n, e);
                        let r;
                        for (; (r = t()); ) s.push(r);
                    } else if (16 & o) {
                        const t = Sr(e, n);
                        if (Array.isArray(t)) s.push(...t);
                        else {
                            const n = rr(e[16]);
                            Aa(n[1], n, t, s, !0);
                        }
                    }
                    n = r ? n.projectionNext : n.next;
                }
                return s;
            }
            class Ra {
                constructor(t, e) {
                    (this._lView = t), (this._cdRefInjectingView = e), (this._appRef = null), (this._attachedToViewContainer = !1);
                }
                get rootNodes() {
                    const t = this._lView,
                        e = t[1];
                    return Aa(e, t, e.firstChild, []);
                }
                get context() {
                    return this._lView[8];
                }
                set context(t) {
                    this._lView[8] = t;
                }
                get destroyed() {
                    return 256 == (256 & this._lView[2]);
                }
                destroy() {
                    if (this._appRef) this._appRef.detachView(this);
                    else if (this._attachedToViewContainer) {
                        const t = this._lView[3];
                        if (te(t)) {
                            const e = t[8],
                                n = e ? e.indexOf(this) : -1;
                            n > -1 && (hr(t, n), Zn(e, n));
                        }
                        this._attachedToViewContainer = !1;
                    }
                    dr(this._lView[1], this._lView);
                }
                onDestroy(t) {
                    ci(this._lView[1], this._lView, null, t);
                }
                markForCheck() {
                    Ti(this._cdRefInjectingView || this._lView);
                }
                detach() {
                    this._lView[2] &= -129;
                }
                reattach() {
                    this._lView[2] |= 128;
                }
                detectChanges() {
                    Ai(this._lView[1], this._lView, this.context);
                }
                checkNoChanges() {
                    !(function (t, e, n) {
                        Fe(!0);
                        try {
                            Ai(t, e, n);
                        } finally {
                            Fe(!1);
                        }
                    })(this._lView[1], this._lView, this.context);
                }
                attachToViewContainerRef() {
                    if (this._appRef) throw new Error('This view is already attached directly to the ApplicationRef!');
                    this._attachedToViewContainer = !0;
                }
                detachFromAppRef() {
                    var t;
                    (this._appRef = null), kr(this._lView[1], (t = this._lView), t[11], 2, null, null);
                }
                attachToAppRef(t) {
                    if (this._attachedToViewContainer) throw new Error('This view is already attached to a ViewContainer!');
                    this._appRef = t;
                }
            }
            class Oa extends Ra {
                constructor(t) {
                    super(t), (this._view = t);
                }
                detectChanges() {
                    Ri(this._view);
                }
                checkNoChanges() {
                    !(function (t) {
                        Fe(!0);
                        try {
                            Ri(t);
                        } finally {
                            Fe(!1);
                        }
                    })(this._view);
                }
                get context() {
                    return null;
                }
            }
            const Ia = function (t) {
                return (function (t, e, n) {
                    if (ne(t) && !n) {
                        const n = be(t.index, e);
                        return new Ra(n, n);
                    }
                    return 47 & t.type ? new Ra(e[16], e) : null;
                })(Oe(), Ae(), 16 == (16 & t));
            };
            let Pa = (() => {
                class t {}
                return (t.__NG_ELEMENT_ID__ = Ia), t;
            })();
            const La = [new wa()],
                Da = new Ca([new fa()]),
                Na = new Ta(La),
                Fa = function () {
                    return Ba(Oe(), Ae());
                };
            let Ma = (() => {
                class t {}
                return (t.__NG_ELEMENT_ID__ = Fa), t;
            })();
            const ja = Ma,
                Ha = class extends ja {
                    constructor(t, e, n) {
                        super(), (this._declarationLView = t), (this._declarationTContainer = e), (this.elementRef = n);
                    }
                    createEmbeddedView(t) {
                        const e = this._declarationTContainer.tViews,
                            n = Xr(this._declarationLView, e, t, 16, null, e.declTNode, null, null, null, null);
                        n[17] = this._declarationLView[this._declarationTContainer.index];
                        const s = this._declarationLView[19];
                        return null !== s && (n[19] = s.createEmbeddedView(e)), ei(e, n, t), new Ra(n);
                    }
                };
            function Ba(t, e) {
                return 4 & t.type ? new Ha(e, t, ra(t, e)) : null;
            }
            class Va {}
            class Ua {}
            const $a = function () {
                return Za(Oe(), Ae());
            };
            let za = (() => {
                class t {}
                return (t.__NG_ELEMENT_ID__ = $a), t;
            })();
            const qa = za,
                Wa = class extends qa {
                    constructor(t, e, n) {
                        super(), (this._lContainer = t), (this._hostTNode = e), (this._hostLView = n);
                    }
                    get element() {
                        return ra(this._hostTNode, this._hostLView);
                    }
                    get injector() {
                        return new Mn(this._hostTNode, this._hostLView);
                    }
                    get parentInjector() {
                        const t = Cn(this._hostTNode, this._hostLView);
                        if (gn(t)) {
                            const e = _n(t, this._hostLView),
                                n = yn(t);
                            return new Mn(e[1].data[n + 8], e);
                        }
                        return new Mn(null, this._hostLView);
                    }
                    clear() {
                        for (; this.length > 0; ) this.remove(this.length - 1);
                    }
                    get(t) {
                        const e = Qa(this._lContainer);
                        return (null !== e && e[t]) || null;
                    }
                    get length() {
                        return this._lContainer.length - Xt;
                    }
                    createEmbeddedView(t, e, n) {
                        const s = t.createEmbeddedView(e || {});
                        return this.insert(s, n), s;
                    }
                    createComponent(t, e, n, s, r) {
                        const i = n || this.parentInjector;
                        if (!r && null == t.ngModule && i) {
                            const t = i.get(Va, null);
                            t && (r = t);
                        }
                        const o = t.create(i, s, void 0, r);
                        return this.insert(o.hostView, e), o;
                    }
                    insert(t, e) {
                        const n = t._lView,
                            s = n[1];
                        if (te(n[3])) {
                            const e = this.indexOf(t);
                            if (-1 !== e) this.detach(e);
                            else {
                                const e = n[3],
                                    s = new Wa(e, e[6], e[3]);
                                s.detach(s.indexOf(t));
                            }
                        }
                        const r = this._adjustIndex(e),
                            i = this._lContainer;
                        !(function (t, e, n, s) {
                            const r = Xt + s,
                                i = n.length;
                            s > 0 && (n[r - 1][4] = e),
                                s < i - Xt ? ((e[4] = n[r]), Kn(n, Xt + s, e)) : (n.push(e), (e[4] = null)),
                                (e[3] = n);
                            const o = e[17];
                            null !== o &&
                                n !== o &&
                                (function (t, e) {
                                    const n = t[9];
                                    e[16] !== e[3][3][16] && (t[2] = !0), null === n ? (t[9] = [e]) : n.push(e);
                                })(o, e);
                            const a = e[19];
                            null !== a && a.insertView(t), (e[2] |= 128);
                        })(s, n, i, r);
                        const o = Er(r, i),
                            a = n[11],
                            l = _r(a, i[7]);
                        return (
                            null !== l &&
                                (function (t, e, n, s, r, i) {
                                    (s[0] = r), (s[6] = e), kr(t, s, n, 1, r, i);
                                })(s, i[6], a, n, l, o),
                            t.attachToViewContainerRef(),
                            Kn(Ka(i), r, t),
                            t
                        );
                    }
                    move(t, e) {
                        return this.insert(t, e);
                    }
                    indexOf(t) {
                        const e = Qa(this._lContainer);
                        return null !== e ? e.indexOf(t) : -1;
                    }
                    remove(t) {
                        const e = this._adjustIndex(t, -1),
                            n = hr(this._lContainer, e);
                        n && (Zn(Ka(this._lContainer), e), dr(n[1], n));
                    }
                    detach(t) {
                        const e = this._adjustIndex(t, -1),
                            n = hr(this._lContainer, e);
                        return n && null != Zn(Ka(this._lContainer), e) ? new Ra(n) : null;
                    }
                    _adjustIndex(t, e = 0) {
                        return null == t ? this.length + e : t;
                    }
                };
            function Qa(t) {
                return t[8];
            }
            function Ka(t) {
                return t[8] || (t[8] = []);
            }
            function Za(t, e) {
                let n;
                const s = e[t.index];
                if (te(s)) n = s;
                else {
                    let r;
                    if (8 & t.type) r = ge(s);
                    else {
                        const n = e[11];
                        r = n.createComment('');
                        const s = _e(t, e);
                        mr(
                            n,
                            _r(n, s),
                            r,
                            (function (t, e) {
                                return fe(t) ? t.nextSibling(e) : e.nextSibling;
                            })(n, s),
                            !1
                        );
                    }
                    (e[t.index] = n = xi(s, e, r, t)), ki(e, n);
                }
                return new Wa(n, t, e);
            }
            const Ya = {};
            class Ga extends na {
                constructor(t) {
                    super(), (this.ngModule = t);
                }
                resolveComponentFactory(t) {
                    const e = Zt(t);
                    return new tl(e, this.ngModule);
                }
            }
            function Xa(t) {
                const e = [];
                for (let n in t) t.hasOwnProperty(n) && e.push({ propName: t[n], templateName: n });
                return e;
            }
            const Ja = new $n('SCHEDULER_TOKEN', { providedIn: 'root', factory: () => tr });
            class tl extends ta {
                constructor(t, e) {
                    super(),
                        (this.componentDef = t),
                        (this.ngModule = e),
                        (this.componentType = t.type),
                        (this.selector = t.selectors.map(Vr).join(',')),
                        (this.ngContentSelectors = t.ngContentSelectors ? t.ngContentSelectors : []),
                        (this.isBoundToModule = !!e);
                }
                get inputs() {
                    return Xa(this.componentDef.inputs);
                }
                get outputs() {
                    return Xa(this.componentDef.outputs);
                }
                create(t, e, n, s) {
                    const r = (s = s || this.ngModule)
                            ? (function (t, e) {
                                  return {
                                      get: (n, s, r) => {
                                          const i = t.get(n, Ya, r);
                                          return i !== Ya || s === Ya ? i : e.get(n, s, r);
                                      },
                                  };
                              })(t, s.injector)
                            : t,
                        i = r.get(la, me),
                        o = r.get(ha, null),
                        a = i.createRenderer(null, this.componentDef),
                        l = this.componentDef.selectors[0][0] || 'div',
                        c = n
                            ? (function (t, e, n) {
                                  if (fe(t)) return t.selectRootElement(e, n === kt.ShadowDom);
                                  let s = 'string' == typeof e ? t.querySelector(e) : e;
                                  return (s.textContent = ''), s;
                              })(a, n, this.componentDef.encapsulation)
                            : cr(
                                  i.createRenderer(null, this.componentDef),
                                  l,
                                  (function (t) {
                                      const e = t.toLowerCase();
                                      return 'svg' === e ? de : 'math' === e ? 'http://www.w3.org/1998/MathML/' : null;
                                  })(l)
                              ),
                        u = this.componentDef.onPush ? 576 : 528,
                        h = { components: [], scheduler: tr, clean: Ii, playerHandler: null, flags: 0 },
                        d = li(0, null, null, 1, 0, null, null, null, null, null),
                        p = Xr(null, d, h, u, null, null, i, a, o, r);
                    let f, m;
                    We(p);
                    try {
                        const t = (function (t, e, n, s, r, i) {
                            const o = n[1];
                            n[20] = t;
                            const a = Jr(o, 20, 2, '#host', null),
                                l = (a.mergedAttrs = e.hostAttrs);
                            null !== l &&
                                (ji(a, l, !0),
                                null !== t &&
                                    (hn(r, t, l), null !== a.classes && Rr(r, t, a.classes), null !== a.styles && Ar(r, t, a.styles)));
                            const c = s.createRenderer(t, e),
                                u = Xr(n, ai(e), null, e.onPush ? 64 : 16, n[20], a, s, c, null, null);
                            return o.firstCreatePass && (kn(xn(a, n), o, e.type), mi(o, a), yi(a, n.length, 1)), ki(n, u), (n[20] = u);
                        })(c, this.componentDef, p, i, a);
                        if (c)
                            if (n) hn(a, c, ['ng-version', pa.full]);
                            else {
                                const { attrs: t, classes: e } = (function (t) {
                                    const e = [],
                                        n = [];
                                    let s = 1,
                                        r = 2;
                                    for (; s < t.length; ) {
                                        let i = t[s];
                                        if ('string' == typeof i) 2 === r ? '' !== i && e.push(i, t[++s]) : 8 === r && n.push(i);
                                        else {
                                            if (!Fr(r)) break;
                                            r = i;
                                        }
                                        s++;
                                    }
                                    return { attrs: e, classes: n };
                                })(this.componentDef.selectors[0]);
                                t && hn(a, c, t), e && e.length > 0 && Rr(a, c, e.join(' '));
                            }
                        if (((m = ve(d, Gt)), void 0 !== e)) {
                            const t = (m.projection = []);
                            for (let n = 0; n < this.ngContentSelectors.length; n++) {
                                const s = e[n];
                                t.push(null != s ? Array.from(s) : null);
                            }
                        }
                        (f = (function (t, e, n, s, r) {
                            const i = n[1],
                                o = (function (t, e, n) {
                                    const s = Oe();
                                    t.firstCreatePass && (n.providersResolver && n.providersResolver(n), _i(t, s, e, ti(t, e, 1, null), n));
                                    const r = Dn(e, t, s.directiveStart, s);
                                    Zs(r, e);
                                    const i = _e(s, e);
                                    return i && Zs(i, e), r;
                                })(i, n, e);
                            if ((s.components.push(o), (t[8] = o), r && r.forEach((t) => t(o, e)), e.contentQueries)) {
                                const t = Oe();
                                e.contentQueries(1, o, t.directiveStart);
                            }
                            const a = Oe();
                            return (
                                !i.firstCreatePass ||
                                    (null === e.hostBindings && null === e.hostAttrs) ||
                                    (Je(a.index), pi(n[1], a, 0, a.directiveStart, a.directiveEnd, e), fi(e, o)),
                                o
                            );
                        })(t, this.componentDef, p, h, [to])),
                            ei(d, p, null);
                    } finally {
                        Ge();
                    }
                    return new el(this.componentType, f, ra(m, p), p, m);
                }
            }
            class el extends class {} {
                constructor(t, e, n, s, r) {
                    super(),
                        (this.location = n),
                        (this._rootLView = s),
                        (this._tNode = r),
                        (this.instance = e),
                        (this.hostView = this.changeDetectorRef = new Oa(s)),
                        (this.componentType = t);
                }
                get injector() {
                    return new Mn(this._tNode, this._rootLView);
                }
                destroy() {
                    this.hostView.destroy();
                }
                onDestroy(t) {
                    this.hostView.onDestroy(t);
                }
            }
            const nl = new Map();
            class sl extends Va {
                constructor(t, e) {
                    super(),
                        (this._parent = e),
                        (this._bootstrapComponents = []),
                        (this.injector = this),
                        (this.destroyCbs = []),
                        (this.componentFactoryResolver = new Ga(this));
                    const n = Yt(t),
                        s = t[jt] || null;
                    s && Jo(s),
                        (this._bootstrapComponents = er(n.bootstrap)),
                        (this._r3Injector = Wi(
                            t,
                            e,
                            [
                                { provide: Va, useValue: this },
                                { provide: na, useValue: this.componentFactoryResolver },
                            ],
                            et(t)
                        )),
                        this._r3Injector._resolveInjectorDefTypes(),
                        (this.instance = this.get(t));
                }
                get(t, e = Ji.THROW_IF_NOT_FOUND, n = bt.Default) {
                    return t === Ji || t === Va || t === Hi ? this : this._r3Injector.get(t, e, n);
                }
                destroy() {
                    const t = this._r3Injector;
                    !t.destroyed && t.destroy(), this.destroyCbs.forEach((t) => t()), (this.destroyCbs = null);
                }
                onDestroy(t) {
                    this.destroyCbs.push(t);
                }
            }
            class rl extends Ua {
                constructor(t) {
                    super(),
                        (this.moduleType = t),
                        null !== Yt(t) &&
                            (function (t) {
                                const e = new Set();
                                !(function t(n) {
                                    const s = Yt(n, !0),
                                        r = s.id;
                                    null !== r &&
                                        ((function (t, e, n) {
                                            if (e && e !== n)
                                                throw new Error(`Duplicate module registered for ${t} - ${et(e)} vs ${et(e.name)}`);
                                        })(r, nl.get(r), n),
                                        nl.set(r, n));
                                    const i = er(s.imports);
                                    for (const o of i) e.has(o) || (e.add(o), t(o));
                                })(t);
                            })(t);
                }
                create(t) {
                    return new sl(this.moduleType, t);
                }
            }
            function il(t) {
                return (e) => {
                    setTimeout(t, void 0, e);
                };
            }
            const ol = class extends S {
                constructor(t = !1) {
                    super(), (this.__isAsync = t);
                }
                emit(t) {
                    super.next(t);
                }
                subscribe(t, e, n) {
                    var s, r, i;
                    let o = t,
                        a = e || (() => null),
                        l = n;
                    if (t && 'object' == typeof t) {
                        const e = t;
                        (o = null === (s = e.next) || void 0 === s ? void 0 : s.bind(e)),
                            (a = null === (r = e.error) || void 0 === r ? void 0 : r.bind(e)),
                            (l = null === (i = e.complete) || void 0 === i ? void 0 : i.bind(e));
                    }
                    this.__isAsync && ((a = il(a)), o && (o = il(o)), l && (l = il(l)));
                    const c = super.subscribe({ next: o, error: a, complete: l });
                    return t instanceof h && t.add(c), c;
                }
            };
            function al() {
                return this._results[ao()]();
            }
            class ll {
                constructor(t = !1) {
                    (this._emitDistinctChangesOnly = t),
                        (this.dirty = !0),
                        (this._results = []),
                        (this._changesDetected = !1),
                        (this._changes = null),
                        (this.length = 0),
                        (this.first = void 0),
                        (this.last = void 0);
                    const e = ao(),
                        n = ll.prototype;
                    n[e] || (n[e] = al);
                }
                get changes() {
                    return this._changes || (this._changes = new ol());
                }
                get(t) {
                    return this._results[t];
                }
                map(t) {
                    return this._results.map(t);
                }
                filter(t) {
                    return this._results.filter(t);
                }
                find(t) {
                    return this._results.find(t);
                }
                reduce(t, e) {
                    return this._results.reduce(t, e);
                }
                forEach(t) {
                    this._results.forEach(t);
                }
                some(t) {
                    return this._results.some(t);
                }
                toArray() {
                    return this._results.slice();
                }
                toString() {
                    return this._results.toString();
                }
                reset(t, e) {
                    const n = this;
                    n.dirty = !1;
                    const s = Wn(t);
                    (this._changesDetected = !(function (t, e, n) {
                        if (t.length !== e.length) return !1;
                        for (let s = 0; s < t.length; s++) {
                            let r = t[s],
                                i = e[s];
                            if ((n && ((r = n(r)), (i = n(i))), i !== r)) return !1;
                        }
                        return !0;
                    })(n._results, s, e)) && ((n._results = s), (n.length = s.length), (n.last = s[this.length - 1]), (n.first = s[0]));
                }
                notifyOnChanges() {
                    !this._changes || (!this._changesDetected && this._emitDistinctChangesOnly) || this._changes.emit(this);
                }
                setDirty() {
                    this.dirty = !0;
                }
                destroy() {
                    this.changes.complete(), this.changes.unsubscribe();
                }
            }
            Symbol;
            class cl {
                constructor(t) {
                    (this.queryList = t), (this.matches = null);
                }
                clone() {
                    return new cl(this.queryList);
                }
                setDirty() {
                    this.queryList.setDirty();
                }
            }
            class ul {
                constructor(t = []) {
                    this.queries = t;
                }
                createEmbeddedView(t) {
                    const e = t.queries;
                    if (null !== e) {
                        const n = null !== t.contentQueries ? t.contentQueries[0] : e.length,
                            s = [];
                        for (let t = 0; t < n; t++) {
                            const n = e.getByIndex(t);
                            s.push(this.queries[n.indexInDeclarationView].clone());
                        }
                        return new ul(s);
                    }
                    return null;
                }
                insertView(t) {
                    this.dirtyQueriesWithMatches(t);
                }
                detachView(t) {
                    this.dirtyQueriesWithMatches(t);
                }
                dirtyQueriesWithMatches(t) {
                    for (let e = 0; e < this.queries.length; e++) null !== El(t, e).matches && this.queries[e].setDirty();
                }
            }
            class hl {
                constructor(t, e, n = null) {
                    (this.predicate = t), (this.flags = e), (this.read = n);
                }
            }
            class dl {
                constructor(t = []) {
                    this.queries = t;
                }
                elementStart(t, e) {
                    for (let n = 0; n < this.queries.length; n++) this.queries[n].elementStart(t, e);
                }
                elementEnd(t) {
                    for (let e = 0; e < this.queries.length; e++) this.queries[e].elementEnd(t);
                }
                embeddedTView(t) {
                    let e = null;
                    for (let n = 0; n < this.length; n++) {
                        const s = null !== e ? e.length : 0,
                            r = this.getByIndex(n).embeddedTView(t, s);
                        r && ((r.indexInDeclarationView = n), null !== e ? e.push(r) : (e = [r]));
                    }
                    return null !== e ? new dl(e) : null;
                }
                template(t, e) {
                    for (let n = 0; n < this.queries.length; n++) this.queries[n].template(t, e);
                }
                getByIndex(t) {
                    return this.queries[t];
                }
                get length() {
                    return this.queries.length;
                }
                track(t) {
                    this.queries.push(t);
                }
            }
            class pl {
                constructor(t, e = -1) {
                    (this.metadata = t),
                        (this.matches = null),
                        (this.indexInDeclarationView = -1),
                        (this.crossesNgTemplate = !1),
                        (this._appliesToNextNode = !0),
                        (this._declarationNodeIndex = e);
                }
                elementStart(t, e) {
                    this.isApplyingToNode(e) && this.matchTNode(t, e);
                }
                elementEnd(t) {
                    this._declarationNodeIndex === t.index && (this._appliesToNextNode = !1);
                }
                template(t, e) {
                    this.elementStart(t, e);
                }
                embeddedTView(t, e) {
                    return this.isApplyingToNode(t)
                        ? ((this.crossesNgTemplate = !0), this.addMatch(-t.index, e), new pl(this.metadata))
                        : null;
                }
                isApplyingToNode(t) {
                    if (this._appliesToNextNode && 1 != (1 & this.metadata.flags)) {
                        const e = this._declarationNodeIndex;
                        let n = t.parent;
                        for (; null !== n && 8 & n.type && n.index !== e; ) n = n.parent;
                        return e === (null !== n ? n.index : -1);
                    }
                    return this._appliesToNextNode;
                }
                matchTNode(t, e) {
                    const n = this.metadata.predicate;
                    if (Array.isArray(n))
                        for (let s = 0; s < n.length; s++) {
                            const r = n[s];
                            this.matchTNodeWithReadOption(t, e, fl(e, r)), this.matchTNodeWithReadOption(t, e, Ln(e, t, r, !1, !1));
                        }
                    else
                        n === Ma
                            ? 4 & e.type && this.matchTNodeWithReadOption(t, e, -1)
                            : this.matchTNodeWithReadOption(t, e, Ln(e, t, n, !1, !1));
                }
                matchTNodeWithReadOption(t, e, n) {
                    if (null !== n) {
                        const s = this.metadata.read;
                        if (null !== s)
                            if (s === oa || s === za || (s === Ma && 4 & e.type)) this.addMatch(e.index, -2);
                            else {
                                const n = Ln(e, t, s, !1, !1);
                                null !== n && this.addMatch(e.index, n);
                            }
                        else this.addMatch(e.index, n);
                    }
                }
                addMatch(t, e) {
                    null === this.matches ? (this.matches = [t, e]) : this.matches.push(t, e);
                }
            }
            function fl(t, e) {
                const n = t.localNames;
                if (null !== n) for (let s = 0; s < n.length; s += 2) if (n[s] === e) return n[s + 1];
                return null;
            }
            function ml(t, e, n, s) {
                return -1 === n
                    ? (function (t, e) {
                          return 11 & t.type ? ra(t, e) : 4 & t.type ? Ba(t, e) : null;
                      })(e, t)
                    : -2 === n
                    ? (function (t, e, n) {
                          return n === oa ? ra(e, t) : n === Ma ? Ba(e, t) : n === za ? Za(e, t) : void 0;
                      })(t, e, s)
                    : Dn(t, t[1], n, e);
            }
            function gl(t, e, n, s) {
                const r = e[19].queries[s];
                if (null === r.matches) {
                    const s = t.data,
                        i = n.matches,
                        o = [];
                    for (let t = 0; t < i.length; t += 2) {
                        const r = i[t];
                        o.push(r < 0 ? null : ml(e, s[r], i[t + 1], n.metadata.read));
                    }
                    r.matches = o;
                }
                return r.matches;
            }
            function yl(t, e, n, s) {
                const r = t.queries.getByIndex(n),
                    i = r.matches;
                if (null !== i) {
                    const o = gl(t, e, r, n);
                    for (let t = 0; t < i.length; t += 2) {
                        const n = i[t];
                        if (n > 0) s.push(o[t / 2]);
                        else {
                            const r = i[t + 1],
                                o = e[-n];
                            for (let t = Xt; t < o.length; t++) {
                                const e = o[t];
                                e[17] === e[3] && yl(e[1], e, r, s);
                            }
                            if (null !== o[9]) {
                                const t = o[9];
                                for (let e = 0; e < t.length; e++) {
                                    const n = t[e];
                                    yl(n[1], n, r, s);
                                }
                            }
                        }
                    }
                }
                return s;
            }
            function _l(t) {
                const e = Ae(),
                    n = Re(),
                    s = Ue();
                $e(s + 1);
                const r = El(n, s);
                if (t.dirty && we(e) === (2 == (2 & r.metadata.flags))) {
                    if (null === r.matches) t.reset([]);
                    else {
                        const i = r.crossesNgTemplate ? yl(n, e, s, []) : gl(n, e, r, s);
                        t.reset(i, aa), t.notifyOnChanges();
                    }
                    return !0;
                }
                return !1;
            }
            function vl(t, e, n) {
                const s = Re();
                s.firstCreatePass && (Sl(s, new hl(t, e, n), -1), 2 == (2 & e) && (s.staticViewQueries = !0)), xl(s, Ae(), e);
            }
            function bl(t, e, n, s) {
                const r = Re();
                if (r.firstCreatePass) {
                    const i = Oe();
                    Sl(r, new hl(e, n, s), i.index),
                        (function (t, e) {
                            const n = t.contentQueries || (t.contentQueries = []);
                            e !== (n.length ? n[n.length - 1] : -1) && n.push(t.queries.length - 1, e);
                        })(r, t),
                        2 == (2 & n) && (r.staticContentQueries = !0);
                }
                xl(r, Ae(), n);
            }
            function wl() {
                return (t = Ae()), (e = Ue()), t[19].queries[e].queryList;
                var t, e;
            }
            function xl(t, e, n) {
                const s = new ll(4 == (4 & n));
                ci(t, e, s, s.destroy), null === e[19] && (e[19] = new ul()), e[19].queries.push(new cl(s));
            }
            function Sl(t, e, n) {
                null === t.queries && (t.queries = new dl()), t.queries.track(new pl(e, n));
            }
            function El(t, e) {
                return t.queries.getByIndex(e);
            }
            const Cl = new $n('Application Initializer');
            let kl = (() => {
                class t {
                    constructor(t) {
                        (this.appInits = t),
                            (this.resolve = sa),
                            (this.reject = sa),
                            (this.initialized = !1),
                            (this.done = !1),
                            (this.donePromise = new Promise((t, e) => {
                                (this.resolve = t), (this.reject = e);
                            }));
                    }
                    runInitializers() {
                        if (this.initialized) return;
                        const t = [],
                            e = () => {
                                (this.done = !0), this.resolve();
                            };
                        if (this.appInits)
                            for (let n = 0; n < this.appInits.length; n++) {
                                const e = this.appInits[n]();
                                if (bo(e)) t.push(e);
                                else if (wo(e)) {
                                    const n = new Promise((t, n) => {
                                        e.subscribe({ complete: t, error: n });
                                    });
                                    t.push(n);
                                }
                            }
                        Promise.all(t)
                            .then(() => {
                                e();
                            })
                            .catch((t) => {
                                this.reject(t);
                            }),
                            0 === t.length && e(),
                            (this.initialized = !0);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Cl, 8));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const Tl = new $n('AppId'),
                Al = {
                    provide: Tl,
                    useFactory: function () {
                        return `${Rl()}${Rl()}${Rl()}`;
                    },
                    deps: [],
                };
            function Rl() {
                return String.fromCharCode(97 + Math.floor(25 * Math.random()));
            }
            const Ol = new $n('Platform Initializer'),
                Il = new $n('Platform ID'),
                Pl = new $n('appBootstrapListener');
            let Ll = (() => {
                class t {
                    log(t) {
                        console.log(t);
                    }
                    warn(t) {
                        console.warn(t);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const Dl = new $n('LocaleId'),
                Nl = new $n('DefaultCurrencyCode');
            class Fl {
                constructor(t, e) {
                    (this.ngModuleFactory = t), (this.componentFactories = e);
                }
            }
            const Ml = function (t) {
                    return new rl(t);
                },
                jl = Ml,
                Hl = function (t) {
                    return Promise.resolve(Ml(t));
                },
                Bl = function (t) {
                    const e = Ml(t),
                        n = er(Yt(t).declarations).reduce((t, e) => {
                            const n = Zt(e);
                            return n && t.push(new tl(n)), t;
                        }, []);
                    return new Fl(e, n);
                },
                Vl = Bl,
                Ul = function (t) {
                    return Promise.resolve(Bl(t));
                };
            let $l = (() => {
                class t {
                    constructor() {
                        (this.compileModuleSync = jl),
                            (this.compileModuleAsync = Hl),
                            (this.compileModuleAndAllComponentsSync = Vl),
                            (this.compileModuleAndAllComponentsAsync = Ul);
                    }
                    clearCache() {}
                    clearCacheFor(t) {}
                    getModuleId(t) {}
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const zl = (() => Promise.resolve(0))();
            function ql(t) {
                'undefined' == typeof Zone
                    ? zl.then(() => {
                          t && t.apply(null, null);
                      })
                    : Zone.current.scheduleMicroTask('scheduleMicrotask', t);
            }
            class Wl {
                constructor({
                    enableLongStackTrace: t = !1,
                    shouldCoalesceEventChangeDetection: e = !1,
                    shouldCoalesceRunChangeDetection: n = !1,
                }) {
                    if (
                        ((this.hasPendingMacrotasks = !1),
                        (this.hasPendingMicrotasks = !1),
                        (this.isStable = !0),
                        (this.onUnstable = new ol(!1)),
                        (this.onMicrotaskEmpty = new ol(!1)),
                        (this.onStable = new ol(!1)),
                        (this.onError = new ol(!1)),
                        'undefined' == typeof Zone)
                    )
                        throw new Error('In this configuration Angular requires Zone.js');
                    Zone.assertZonePatched();
                    const s = this;
                    (s._nesting = 0),
                        (s._outer = s._inner = Zone.current),
                        Zone.TaskTrackingZoneSpec && (s._inner = s._inner.fork(new Zone.TaskTrackingZoneSpec())),
                        t && Zone.longStackTraceZoneSpec && (s._inner = s._inner.fork(Zone.longStackTraceZoneSpec)),
                        (s.shouldCoalesceEventChangeDetection = !n && e),
                        (s.shouldCoalesceRunChangeDetection = n),
                        (s.lastRequestAnimationFrameId = -1),
                        (s.nativeRequestAnimationFrame = (function () {
                            let t = It.requestAnimationFrame,
                                e = It.cancelAnimationFrame;
                            if ('undefined' != typeof Zone && t && e) {
                                const n = t[Zone.__symbol__('OriginalDelegate')];
                                n && (t = n);
                                const s = e[Zone.__symbol__('OriginalDelegate')];
                                s && (e = s);
                            }
                            return { nativeRequestAnimationFrame: t, nativeCancelAnimationFrame: e };
                        })().nativeRequestAnimationFrame),
                        (function (t) {
                            const e = () => {
                                !(function (t) {
                                    t.isCheckStableRunning ||
                                        -1 !== t.lastRequestAnimationFrameId ||
                                        ((t.lastRequestAnimationFrameId = t.nativeRequestAnimationFrame.call(It, () => {
                                            t.fakeTopEventTask ||
                                                (t.fakeTopEventTask = Zone.root.scheduleEventTask(
                                                    'fakeTopEventTask',
                                                    () => {
                                                        (t.lastRequestAnimationFrameId = -1),
                                                            Zl(t),
                                                            (t.isCheckStableRunning = !0),
                                                            Kl(t),
                                                            (t.isCheckStableRunning = !1);
                                                    },
                                                    void 0,
                                                    () => {},
                                                    () => {}
                                                )),
                                                t.fakeTopEventTask.invoke();
                                        })),
                                        Zl(t));
                                })(t);
                            };
                            t._inner = t._inner.fork({
                                name: 'angular',
                                properties: { isAngularZone: !0 },
                                onInvokeTask: (n, s, r, i, o, a) => {
                                    try {
                                        return Yl(t), n.invokeTask(r, i, o, a);
                                    } finally {
                                        ((t.shouldCoalesceEventChangeDetection && 'eventTask' === i.type) ||
                                            t.shouldCoalesceRunChangeDetection) &&
                                            e(),
                                            Gl(t);
                                    }
                                },
                                onInvoke: (n, s, r, i, o, a, l) => {
                                    try {
                                        return Yl(t), n.invoke(r, i, o, a, l);
                                    } finally {
                                        t.shouldCoalesceRunChangeDetection && e(), Gl(t);
                                    }
                                },
                                onHasTask: (e, n, s, r) => {
                                    e.hasTask(s, r),
                                        n === s &&
                                            ('microTask' == r.change
                                                ? ((t._hasPendingMicrotasks = r.microTask), Zl(t), Kl(t))
                                                : 'macroTask' == r.change && (t.hasPendingMacrotasks = r.macroTask));
                                },
                                onHandleError: (e, n, s, r) => (e.handleError(s, r), t.runOutsideAngular(() => t.onError.emit(r)), !1),
                            });
                        })(s);
                }
                static isInAngularZone() {
                    return !0 === Zone.current.get('isAngularZone');
                }
                static assertInAngularZone() {
                    if (!Wl.isInAngularZone()) throw new Error('Expected to be in Angular Zone, but it is not!');
                }
                static assertNotInAngularZone() {
                    if (Wl.isInAngularZone()) throw new Error('Expected to not be in Angular Zone, but it is!');
                }
                run(t, e, n) {
                    return this._inner.run(t, e, n);
                }
                runTask(t, e, n, s) {
                    const r = this._inner,
                        i = r.scheduleEventTask('NgZoneEvent: ' + s, t, Ql, sa, sa);
                    try {
                        return r.runTask(i, e, n);
                    } finally {
                        r.cancelTask(i);
                    }
                }
                runGuarded(t, e, n) {
                    return this._inner.runGuarded(t, e, n);
                }
                runOutsideAngular(t) {
                    return this._outer.run(t);
                }
            }
            const Ql = {};
            function Kl(t) {
                if (0 == t._nesting && !t.hasPendingMicrotasks && !t.isStable)
                    try {
                        t._nesting++, t.onMicrotaskEmpty.emit(null);
                    } finally {
                        if ((t._nesting--, !t.hasPendingMicrotasks))
                            try {
                                t.runOutsideAngular(() => t.onStable.emit(null));
                            } finally {
                                t.isStable = !0;
                            }
                    }
            }
            function Zl(t) {
                t.hasPendingMicrotasks = !!(
                    t._hasPendingMicrotasks ||
                    ((t.shouldCoalesceEventChangeDetection || t.shouldCoalesceRunChangeDetection) && -1 !== t.lastRequestAnimationFrameId)
                );
            }
            function Yl(t) {
                t._nesting++, t.isStable && ((t.isStable = !1), t.onUnstable.emit(null));
            }
            function Gl(t) {
                t._nesting--, Kl(t);
            }
            class Xl {
                constructor() {
                    (this.hasPendingMicrotasks = !1),
                        (this.hasPendingMacrotasks = !1),
                        (this.isStable = !0),
                        (this.onUnstable = new ol()),
                        (this.onMicrotaskEmpty = new ol()),
                        (this.onStable = new ol()),
                        (this.onError = new ol());
                }
                run(t, e, n) {
                    return t.apply(e, n);
                }
                runGuarded(t, e, n) {
                    return t.apply(e, n);
                }
                runOutsideAngular(t) {
                    return t();
                }
                runTask(t, e, n, s) {
                    return t.apply(e, n);
                }
            }
            let Jl = (() => {
                    class t {
                        constructor(t) {
                            (this._ngZone = t),
                                (this._pendingCount = 0),
                                (this._isZoneStable = !0),
                                (this._didWork = !1),
                                (this._callbacks = []),
                                (this.taskTrackingZone = null),
                                this._watchAngularEvents(),
                                t.run(() => {
                                    this.taskTrackingZone = 'undefined' == typeof Zone ? null : Zone.current.get('TaskTrackingZone');
                                });
                        }
                        _watchAngularEvents() {
                            this._ngZone.onUnstable.subscribe({
                                next: () => {
                                    (this._didWork = !0), (this._isZoneStable = !1);
                                },
                            }),
                                this._ngZone.runOutsideAngular(() => {
                                    this._ngZone.onStable.subscribe({
                                        next: () => {
                                            Wl.assertNotInAngularZone(),
                                                ql(() => {
                                                    (this._isZoneStable = !0), this._runCallbacksIfReady();
                                                });
                                        },
                                    });
                                });
                        }
                        increasePendingRequestCount() {
                            return (this._pendingCount += 1), (this._didWork = !0), this._pendingCount;
                        }
                        decreasePendingRequestCount() {
                            if (((this._pendingCount -= 1), this._pendingCount < 0)) throw new Error('pending async requests below zero');
                            return this._runCallbacksIfReady(), this._pendingCount;
                        }
                        isStable() {
                            return this._isZoneStable && 0 === this._pendingCount && !this._ngZone.hasPendingMacrotasks;
                        }
                        _runCallbacksIfReady() {
                            if (this.isStable())
                                ql(() => {
                                    for (; 0 !== this._callbacks.length; ) {
                                        let t = this._callbacks.pop();
                                        clearTimeout(t.timeoutId), t.doneCb(this._didWork);
                                    }
                                    this._didWork = !1;
                                });
                            else {
                                let t = this.getPendingTasks();
                                (this._callbacks = this._callbacks.filter(
                                    (e) => !e.updateCb || !e.updateCb(t) || (clearTimeout(e.timeoutId), !1)
                                )),
                                    (this._didWork = !0);
                            }
                        }
                        getPendingTasks() {
                            return this.taskTrackingZone
                                ? this.taskTrackingZone.macroTasks.map((t) => ({
                                      source: t.source,
                                      creationLocation: t.creationLocation,
                                      data: t.data,
                                  }))
                                : [];
                        }
                        addCallback(t, e, n) {
                            let s = -1;
                            e &&
                                e > 0 &&
                                (s = setTimeout(() => {
                                    (this._callbacks = this._callbacks.filter((t) => t.timeoutId !== s)),
                                        t(this._didWork, this.getPendingTasks());
                                }, e)),
                                this._callbacks.push({ doneCb: t, timeoutId: s, updateCb: n });
                        }
                        whenStable(t, e, n) {
                            if (n && !this.taskTrackingZone)
                                throw new Error(
                                    'Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?'
                                );
                            this.addCallback(t, e, n), this._runCallbacksIfReady();
                        }
                        getPendingRequestCount() {
                            return this._pendingCount;
                        }
                        findProviders(t, e, n) {
                            return [];
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Wl));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                tc = (() => {
                    class t {
                        constructor() {
                            (this._applications = new Map()), sc.addToWindow(this);
                        }
                        registerApplication(t, e) {
                            this._applications.set(t, e);
                        }
                        unregisterApplication(t) {
                            this._applications.delete(t);
                        }
                        unregisterAllApplications() {
                            this._applications.clear();
                        }
                        getTestability(t) {
                            return this._applications.get(t) || null;
                        }
                        getAllTestabilities() {
                            return Array.from(this._applications.values());
                        }
                        getAllRootElements() {
                            return Array.from(this._applications.keys());
                        }
                        findTestabilityInTree(t, e = !0) {
                            return sc.findTestabilityInTree(this, t, e);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })();
            class ec {
                addToWindow(t) {}
                findTestabilityInTree(t, e, n) {
                    return null;
                }
            }
            let nc,
                sc = new ec(),
                rc = !0,
                ic = !1;
            function oc() {
                return (ic = !0), rc;
            }
            const ac = new $n('AllowMultipleToken');
            class lc {
                constructor(t, e) {
                    (this.name = t), (this.token = e);
                }
            }
            function cc(t, e, n = []) {
                const s = `Platform: ${e}`,
                    r = new $n(s);
                return (e = []) => {
                    let i = uc();
                    if (!i || i.injector.get(ac, !1))
                        if (t) t(n.concat(e).concat({ provide: r, useValue: !0 }));
                        else {
                            const t = n.concat(e).concat({ provide: r, useValue: !0 }, { provide: Vi, useValue: 'platform' });
                            !(function (t) {
                                if (nc && !nc.destroyed && !nc.injector.get(ac, !1))
                                    throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
                                nc = t.get(hc);
                                const e = t.get(Ol, null);
                                e && e.forEach((t) => t());
                            })(Ji.create({ providers: t, name: s }));
                        }
                    return (function (t) {
                        const e = uc();
                        if (!e) throw new Error('No platform exists!');
                        if (!e.injector.get(t, null))
                            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
                        return e;
                    })(r);
                };
            }
            function uc() {
                return nc && !nc.destroyed ? nc : null;
            }
            let hc = (() => {
                class t {
                    constructor(t) {
                        (this._injector = t), (this._modules = []), (this._destroyListeners = []), (this._destroyed = !1);
                    }
                    bootstrapModuleFactory(t, e) {
                        const n = (function (t, e) {
                                let n;
                                return (
                                    (n =
                                        'noop' === t
                                            ? new Xl()
                                            : ('zone.js' === t ? void 0 : t) ||
                                              new Wl({
                                                  enableLongStackTrace: oc(),
                                                  shouldCoalesceEventChangeDetection: !!(null == e ? void 0 : e.ngZoneEventCoalescing),
                                                  shouldCoalesceRunChangeDetection: !!(null == e ? void 0 : e.ngZoneRunCoalescing),
                                              })),
                                    n
                                );
                            })(e ? e.ngZone : void 0, {
                                ngZoneEventCoalescing: (e && e.ngZoneEventCoalescing) || !1,
                                ngZoneRunCoalescing: (e && e.ngZoneRunCoalescing) || !1,
                            }),
                            s = [{ provide: Wl, useValue: n }];
                        return n.run(() => {
                            const e = Ji.create({ providers: s, parent: this.injector, name: t.moduleType.name }),
                                r = t.create(e),
                                i = r.injector.get(Js, null);
                            if (!i) throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
                            return (
                                n.runOutsideAngular(() => {
                                    const t = n.onError.subscribe({
                                        next: (t) => {
                                            i.handleError(t);
                                        },
                                    });
                                    r.onDestroy(() => {
                                        fc(this._modules, r), t.unsubscribe();
                                    });
                                }),
                                (function (t, e, n) {
                                    try {
                                        const s = n();
                                        return bo(s)
                                            ? s.catch((n) => {
                                                  throw (e.runOutsideAngular(() => t.handleError(n)), n);
                                              })
                                            : s;
                                    } catch (s) {
                                        throw (e.runOutsideAngular(() => t.handleError(s)), s);
                                    }
                                })(i, n, () => {
                                    const t = r.injector.get(kl);
                                    return (
                                        t.runInitializers(),
                                        t.donePromise.then(() => (Jo(r.injector.get(Dl, Go) || Go), this._moduleDoBootstrap(r), r))
                                    );
                                })
                            );
                        });
                    }
                    bootstrapModule(t, e = []) {
                        const n = dc({}, e);
                        return (function (t, e, n) {
                            const s = new rl(n);
                            return Promise.resolve(s);
                        })(0, 0, t).then((t) => this.bootstrapModuleFactory(t, n));
                    }
                    _moduleDoBootstrap(t) {
                        const e = t.injector.get(pc);
                        if (t._bootstrapComponents.length > 0) t._bootstrapComponents.forEach((t) => e.bootstrap(t));
                        else {
                            if (!t.instance.ngDoBootstrap)
                                throw new Error(
                                    `The module ${et(
                                        t.instance.constructor
                                    )} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`
                                );
                            t.instance.ngDoBootstrap(e);
                        }
                        this._modules.push(t);
                    }
                    onDestroy(t) {
                        this._destroyListeners.push(t);
                    }
                    get injector() {
                        return this._injector;
                    }
                    destroy() {
                        if (this._destroyed) throw new Error('The platform has already been destroyed!');
                        this._modules.slice().forEach((t) => t.destroy()),
                            this._destroyListeners.forEach((t) => t()),
                            (this._destroyed = !0);
                    }
                    get destroyed() {
                        return this._destroyed;
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Ji));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            function dc(t, e) {
                return Array.isArray(e) ? e.reduce(dc, t) : Object.assign(Object.assign({}, t), e);
            }
            let pc = (() => {
                class t {
                    constructor(t, e, n, s, r) {
                        (this._zone = t),
                            (this._injector = e),
                            (this._exceptionHandler = n),
                            (this._componentFactoryResolver = s),
                            (this._initStatus = r),
                            (this._bootstrapListeners = []),
                            (this._views = []),
                            (this._runningTick = !1),
                            (this._stable = !0),
                            (this.componentTypes = []),
                            (this.components = []),
                            (this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({
                                next: () => {
                                    this._zone.run(() => {
                                        this.tick();
                                    });
                                },
                            }));
                        const i = new _((t) => {
                                (this._stable =
                                    this._zone.isStable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks),
                                    this._zone.runOutsideAngular(() => {
                                        t.next(this._stable), t.complete();
                                    });
                            }),
                            o = new _((t) => {
                                let e;
                                this._zone.runOutsideAngular(() => {
                                    e = this._zone.onStable.subscribe(() => {
                                        Wl.assertNotInAngularZone(),
                                            ql(() => {
                                                this._stable ||
                                                    this._zone.hasPendingMacrotasks ||
                                                    this._zone.hasPendingMicrotasks ||
                                                    ((this._stable = !0), t.next(!0));
                                            });
                                    });
                                });
                                const n = this._zone.onUnstable.subscribe(() => {
                                    Wl.assertInAngularZone(),
                                        this._stable &&
                                            ((this._stable = !1),
                                            this._zone.runOutsideAngular(() => {
                                                t.next(!1);
                                            }));
                                });
                                return () => {
                                    e.unsubscribe(), n.unsubscribe();
                                };
                            });
                        this.isStable = z(i, o.pipe(X()));
                    }
                    bootstrap(t, e) {
                        if (!this._initStatus.done)
                            throw new Error(
                                'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.'
                            );
                        let n;
                        (n = t instanceof ta ? t : this._componentFactoryResolver.resolveComponentFactory(t)),
                            this.componentTypes.push(n.componentType);
                        const s = n.isBoundToModule ? void 0 : this._injector.get(Va),
                            r = n.create(Ji.NULL, [], e || n.selector, s),
                            i = r.location.nativeElement,
                            o = r.injector.get(Jl, null),
                            a = o && r.injector.get(tc);
                        return (
                            o && a && a.registerApplication(i, o),
                            r.onDestroy(() => {
                                this.detachView(r.hostView), fc(this.components, r), a && a.unregisterApplication(i);
                            }),
                            this._loadComponent(r),
                            r
                        );
                    }
                    tick() {
                        if (this._runningTick) throw new Error('ApplicationRef.tick is called recursively');
                        try {
                            this._runningTick = !0;
                            for (let t of this._views) t.detectChanges();
                        } catch (t) {
                            this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(t));
                        } finally {
                            this._runningTick = !1;
                        }
                    }
                    attachView(t) {
                        const e = t;
                        this._views.push(e), e.attachToAppRef(this);
                    }
                    detachView(t) {
                        const e = t;
                        fc(this._views, e), e.detachFromAppRef();
                    }
                    _loadComponent(t) {
                        this.attachView(t.hostView),
                            this.tick(),
                            this.components.push(t),
                            this._injector
                                .get(Pl, [])
                                .concat(this._bootstrapListeners)
                                .forEach((e) => e(t));
                    }
                    ngOnDestroy() {
                        this._views.slice().forEach((t) => t.destroy()), this._onMicrotaskEmptySubscription.unsubscribe();
                    }
                    get viewCount() {
                        return this._views.length;
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Wl), as(Ji), as(Js), as(na), as(kl));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            function fc(t, e) {
                const n = t.indexOf(e);
                n > -1 && t.splice(n, 1);
            }
            class mc {}
            class gc {}
            const yc = { factoryPathPrefix: '', factoryPathSuffix: '.ngfactory' };
            let _c = (() => {
                class t {
                    constructor(t, e) {
                        (this._compiler = t), (this._config = e || yc);
                    }
                    load(t) {
                        return this.loadAndCompile(t);
                    }
                    loadAndCompile(t) {
                        let [e, s] = t.split('#');
                        return (
                            void 0 === s && (s = 'default'),
                            n(255)(e)
                                .then((t) => t[s])
                                .then((t) => vc(t, e, s))
                                .then((t) => this._compiler.compileModuleAsync(t))
                        );
                    }
                    loadFactory(t) {
                        let [e, s] = t.split('#'),
                            r = 'NgFactory';
                        return (
                            void 0 === s && ((s = 'default'), (r = '')),
                            n(255)(this._config.factoryPathPrefix + e + this._config.factoryPathSuffix)
                                .then((t) => t[s + r])
                                .then((t) => vc(t, e, s))
                        );
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as($l), as(gc, 8));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            function vc(t, e, n) {
                if (!t) throw new Error(`Cannot find '${n}' in '${e}'`);
                return t;
            }
            const bc = cc(null, 'core', [
                    { provide: Il, useValue: 'unknown' },
                    { provide: hc, deps: [Ji] },
                    { provide: tc, deps: [] },
                    { provide: Ll, deps: [] },
                ]),
                wc = [
                    { provide: pc, useClass: pc, deps: [Wl, Ji, Js, na, kl] },
                    {
                        provide: Ja,
                        deps: [Wl],
                        useFactory: function (t) {
                            let e = [];
                            return (
                                t.onStable.subscribe(() => {
                                    for (; e.length; ) e.pop()();
                                }),
                                function (t) {
                                    e.push(t);
                                }
                            );
                        },
                    },
                    { provide: kl, useClass: kl, deps: [[new ds(), Cl]] },
                    { provide: $l, useClass: $l, deps: [] },
                    Al,
                    {
                        provide: Ca,
                        useFactory: function () {
                            return Da;
                        },
                        deps: [],
                    },
                    {
                        provide: Ta,
                        useFactory: function () {
                            return Na;
                        },
                        deps: [],
                    },
                    {
                        provide: Dl,
                        useFactory: function (t) {
                            return Jo((t = t || ('undefined' != typeof $localize && $localize.locale) || Go)), t;
                        },
                        deps: [[new hs(Dl), new ds(), new ps()]],
                    },
                    { provide: Nl, useValue: 'USD' },
                ];
            let xc = (() => {
                    class t {
                        constructor(t) {}
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(pc));
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: wc })),
                        t
                    );
                })(),
                Sc = null;
            function Ec() {
                return Sc;
            }
            const Cc = new $n('DocumentToken');
            let kc = (() => {
                class t {
                    historyGo(t) {
                        throw new Error('Not implemented');
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({ factory: Tc, token: t, providedIn: 'platform' })),
                    t
                );
            })();
            function Tc() {
                return as(Rc);
            }
            const Ac = new $n('Location Initialized');
            let Rc = (() => {
                class t extends kc {
                    constructor(t) {
                        super(), (this._doc = t), this._init();
                    }
                    _init() {
                        (this.location = window.location), (this._history = window.history);
                    }
                    getBaseHrefFromDOM() {
                        return Ec().getBaseHref(this._doc);
                    }
                    onPopState(t) {
                        const e = Ec().getGlobalEventTarget(this._doc, 'window');
                        return e.addEventListener('popstate', t, !1), () => e.removeEventListener('popstate', t);
                    }
                    onHashChange(t) {
                        const e = Ec().getGlobalEventTarget(this._doc, 'window');
                        return e.addEventListener('hashchange', t, !1), () => e.removeEventListener('hashchange', t);
                    }
                    get href() {
                        return this.location.href;
                    }
                    get protocol() {
                        return this.location.protocol;
                    }
                    get hostname() {
                        return this.location.hostname;
                    }
                    get port() {
                        return this.location.port;
                    }
                    get pathname() {
                        return this.location.pathname;
                    }
                    get search() {
                        return this.location.search;
                    }
                    get hash() {
                        return this.location.hash;
                    }
                    set pathname(t) {
                        this.location.pathname = t;
                    }
                    pushState(t, e, n) {
                        Oc() ? this._history.pushState(t, e, n) : (this.location.hash = n);
                    }
                    replaceState(t, e, n) {
                        Oc() ? this._history.replaceState(t, e, n) : (this.location.hash = n);
                    }
                    forward() {
                        this._history.forward();
                    }
                    back() {
                        this._history.back();
                    }
                    historyGo(t = 0) {
                        this._history.go(t);
                    }
                    getState() {
                        return this._history.state;
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Cc));
                    }),
                    (t.ɵprov = ht({ factory: Ic, token: t, providedIn: 'platform' })),
                    t
                );
            })();
            function Oc() {
                return !!window.history.pushState;
            }
            function Ic() {
                return new Rc(as(Cc));
            }
            function Pc(t, e) {
                if (0 == t.length) return e;
                if (0 == e.length) return t;
                let n = 0;
                return t.endsWith('/') && n++, e.startsWith('/') && n++, 2 == n ? t + e.substring(1) : 1 == n ? t + e : t + '/' + e;
            }
            function Lc(t) {
                const e = t.match(/#|\?|$/),
                    n = (e && e.index) || t.length;
                return t.slice(0, n - ('/' === t[n - 1] ? 1 : 0)) + t.slice(n);
            }
            function Dc(t) {
                return t && '?' !== t[0] ? '?' + t : t;
            }
            let Nc = (() => {
                class t {
                    historyGo(t) {
                        throw new Error('Not implemented');
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({ factory: Fc, token: t, providedIn: 'root' })),
                    t
                );
            })();
            function Fc(t) {
                const e = as(Cc).location;
                return new jc(as(kc), (e && e.origin) || '');
            }
            const Mc = new $n('appBaseHref');
            let jc = (() => {
                    class t extends Nc {
                        constructor(t, e) {
                            if (
                                (super(),
                                (this._platformLocation = t),
                                (this._removeListenerFns = []),
                                null == e && (e = this._platformLocation.getBaseHrefFromDOM()),
                                null == e)
                            )
                                throw new Error(
                                    'No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.'
                                );
                            this._baseHref = e;
                        }
                        ngOnDestroy() {
                            for (; this._removeListenerFns.length; ) this._removeListenerFns.pop()();
                        }
                        onPopState(t) {
                            this._removeListenerFns.push(this._platformLocation.onPopState(t), this._platformLocation.onHashChange(t));
                        }
                        getBaseHref() {
                            return this._baseHref;
                        }
                        prepareExternalUrl(t) {
                            return Pc(this._baseHref, t);
                        }
                        path(t = !1) {
                            const e = this._platformLocation.pathname + Dc(this._platformLocation.search),
                                n = this._platformLocation.hash;
                            return n && t ? `${e}${n}` : e;
                        }
                        pushState(t, e, n, s) {
                            const r = this.prepareExternalUrl(n + Dc(s));
                            this._platformLocation.pushState(t, e, r);
                        }
                        replaceState(t, e, n, s) {
                            const r = this.prepareExternalUrl(n + Dc(s));
                            this._platformLocation.replaceState(t, e, r);
                        }
                        forward() {
                            this._platformLocation.forward();
                        }
                        back() {
                            this._platformLocation.back();
                        }
                        historyGo(t = 0) {
                            var e, n;
                            null === (n = (e = this._platformLocation).historyGo) || void 0 === n || n.call(e, t);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(kc), as(Mc, 8));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                Hc = (() => {
                    class t extends Nc {
                        constructor(t, e) {
                            super(),
                                (this._platformLocation = t),
                                (this._baseHref = ''),
                                (this._removeListenerFns = []),
                                null != e && (this._baseHref = e);
                        }
                        ngOnDestroy() {
                            for (; this._removeListenerFns.length; ) this._removeListenerFns.pop()();
                        }
                        onPopState(t) {
                            this._removeListenerFns.push(this._platformLocation.onPopState(t), this._platformLocation.onHashChange(t));
                        }
                        getBaseHref() {
                            return this._baseHref;
                        }
                        path(t = !1) {
                            let e = this._platformLocation.hash;
                            return null == e && (e = '#'), e.length > 0 ? e.substring(1) : e;
                        }
                        prepareExternalUrl(t) {
                            const e = Pc(this._baseHref, t);
                            return e.length > 0 ? '#' + e : e;
                        }
                        pushState(t, e, n, s) {
                            let r = this.prepareExternalUrl(n + Dc(s));
                            0 == r.length && (r = this._platformLocation.pathname), this._platformLocation.pushState(t, e, r);
                        }
                        replaceState(t, e, n, s) {
                            let r = this.prepareExternalUrl(n + Dc(s));
                            0 == r.length && (r = this._platformLocation.pathname), this._platformLocation.replaceState(t, e, r);
                        }
                        forward() {
                            this._platformLocation.forward();
                        }
                        back() {
                            this._platformLocation.back();
                        }
                        historyGo(t = 0) {
                            var e, n;
                            null === (n = (e = this._platformLocation).historyGo) || void 0 === n || n.call(e, t);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(kc), as(Mc, 8));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                Bc = (() => {
                    class t {
                        constructor(t, e) {
                            (this._subject = new ol()), (this._urlChangeListeners = []), (this._platformStrategy = t);
                            const n = this._platformStrategy.getBaseHref();
                            (this._platformLocation = e),
                                (this._baseHref = Lc(Uc(n))),
                                this._platformStrategy.onPopState((t) => {
                                    this._subject.emit({ url: this.path(!0), pop: !0, state: t.state, type: t.type });
                                });
                        }
                        path(t = !1) {
                            return this.normalize(this._platformStrategy.path(t));
                        }
                        getState() {
                            return this._platformLocation.getState();
                        }
                        isCurrentPathEqualTo(t, e = '') {
                            return this.path() == this.normalize(t + Dc(e));
                        }
                        normalize(e) {
                            return t.stripTrailingSlash(
                                (function (t, e) {
                                    return t && e.startsWith(t) ? e.substring(t.length) : e;
                                })(this._baseHref, Uc(e))
                            );
                        }
                        prepareExternalUrl(t) {
                            return t && '/' !== t[0] && (t = '/' + t), this._platformStrategy.prepareExternalUrl(t);
                        }
                        go(t, e = '', n = null) {
                            this._platformStrategy.pushState(n, '', t, e),
                                this._notifyUrlChangeListeners(this.prepareExternalUrl(t + Dc(e)), n);
                        }
                        replaceState(t, e = '', n = null) {
                            this._platformStrategy.replaceState(n, '', t, e),
                                this._notifyUrlChangeListeners(this.prepareExternalUrl(t + Dc(e)), n);
                        }
                        forward() {
                            this._platformStrategy.forward();
                        }
                        back() {
                            this._platformStrategy.back();
                        }
                        historyGo(t = 0) {
                            var e, n;
                            null === (n = (e = this._platformStrategy).historyGo) || void 0 === n || n.call(e, t);
                        }
                        onUrlChange(t) {
                            this._urlChangeListeners.push(t),
                                this._urlChangeSubscription ||
                                    (this._urlChangeSubscription = this.subscribe((t) => {
                                        this._notifyUrlChangeListeners(t.url, t.state);
                                    }));
                        }
                        _notifyUrlChangeListeners(t = '', e) {
                            this._urlChangeListeners.forEach((n) => n(t, e));
                        }
                        subscribe(t, e, n) {
                            return this._subject.subscribe({ next: t, error: e, complete: n });
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Nc), as(kc));
                        }),
                        (t.normalizeQueryParams = Dc),
                        (t.joinWithSlash = Pc),
                        (t.stripTrailingSlash = Lc),
                        (t.ɵprov = ht({ factory: Vc, token: t, providedIn: 'root' })),
                        t
                    );
                })();
            function Vc() {
                return new Bc(as(Nc), as(kc));
            }
            function Uc(t) {
                return t.replace(/\/index.html$/, '');
            }
            var $c = (() => (
                (($c = $c || {})[($c.Zero = 0)] = 'Zero'),
                ($c[($c.One = 1)] = 'One'),
                ($c[($c.Two = 2)] = 'Two'),
                ($c[($c.Few = 3)] = 'Few'),
                ($c[($c.Many = 4)] = 'Many'),
                ($c[($c.Other = 5)] = 'Other'),
                $c
            ))();
            class zc {}
            let qc = (() => {
                class t extends zc {
                    constructor(t) {
                        super(), (this.locale = t);
                    }
                    getPluralCategory(t, e) {
                        switch (
                            (function (t) {
                                return (function (t) {
                                    const e = (function (t) {
                                        return t.toLowerCase().replace(/_/g, '-');
                                    })(t);
                                    let n = Zo(e);
                                    if (n) return n;
                                    const s = e.split('-')[0];
                                    if (((n = Zo(s)), n)) return n;
                                    if ('en' === s) return Qo;
                                    throw new Error(`Missing locale data for the locale "${t}".`);
                                })(t)[Yo.PluralCase];
                            })(e || this.locale)(t)
                        ) {
                            case $c.Zero:
                                return 'zero';
                            case $c.One:
                                return 'one';
                            case $c.Two:
                                return 'two';
                            case $c.Few:
                                return 'few';
                            case $c.Many:
                                return 'many';
                            default:
                                return 'other';
                        }
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Dl));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            function Wc(t, e) {
                e = encodeURIComponent(e);
                for (const n of t.split(';')) {
                    const t = n.indexOf('='),
                        [s, r] = -1 == t ? [n, ''] : [n.slice(0, t), n.slice(t + 1)];
                    if (s.trim() === e) return decodeURIComponent(r);
                }
                return null;
            }
            class Qc {
                constructor(t, e) {
                    (this._viewContainerRef = t), (this._templateRef = e), (this._created = !1);
                }
                create() {
                    (this._created = !0), this._viewContainerRef.createEmbeddedView(this._templateRef);
                }
                destroy() {
                    (this._created = !1), this._viewContainerRef.clear();
                }
                enforceState(t) {
                    t && !this._created ? this.create() : !t && this._created && this.destroy();
                }
            }
            let Kc = (() => {
                    class t {
                        constructor() {
                            (this._defaultUsed = !1), (this._caseCount = 0), (this._lastCaseCheckIndex = 0), (this._lastCasesMatched = !1);
                        }
                        set ngSwitch(t) {
                            (this._ngSwitch = t), 0 === this._caseCount && this._updateDefaultCases(!0);
                        }
                        _addCase() {
                            return this._caseCount++;
                        }
                        _addDefault(t) {
                            this._defaultViews || (this._defaultViews = []), this._defaultViews.push(t);
                        }
                        _matchCase(t) {
                            const e = t == this._ngSwitch;
                            return (
                                (this._lastCasesMatched = this._lastCasesMatched || e),
                                this._lastCaseCheckIndex++,
                                this._lastCaseCheckIndex === this._caseCount &&
                                    (this._updateDefaultCases(!this._lastCasesMatched),
                                    (this._lastCaseCheckIndex = 0),
                                    (this._lastCasesMatched = !1)),
                                e
                            );
                        }
                        _updateDefaultCases(t) {
                            if (this._defaultViews && t !== this._defaultUsed) {
                                this._defaultUsed = t;
                                for (let e = 0; e < this._defaultViews.length; e++) this._defaultViews[e].enforceState(t);
                            }
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵdir = Kt({ type: t, selectors: [['', 'ngSwitch', '']], inputs: { ngSwitch: 'ngSwitch' } })),
                        t
                    );
                })(),
                Zc = (() => {
                    class t {
                        constructor(t, e, n) {
                            (this.ngSwitch = n), n._addCase(), (this._view = new Qc(t, e));
                        }
                        ngDoCheck() {
                            this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(za), fo(Ma), fo(Kc, 9));
                        }),
                        (t.ɵdir = Kt({ type: t, selectors: [['', 'ngSwitchCase', '']], inputs: { ngSwitchCase: 'ngSwitchCase' } })),
                        t
                    );
                })(),
                Yc = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [{ provide: zc, useClass: qc }] })),
                        t
                    );
                })();
            function Gc(t) {
                return 'browser' === t;
            }
            function Xc(t) {
                return 'server' === t;
            }
            let Jc = (() => {
                class t {}
                return (t.ɵprov = ht({ token: t, providedIn: 'root', factory: () => new tu(as(Cc), window) })), t;
            })();
            class tu {
                constructor(t, e) {
                    (this.document = t), (this.window = e), (this.offset = () => [0, 0]);
                }
                setOffset(t) {
                    this.offset = Array.isArray(t) ? () => t : t;
                }
                getScrollPosition() {
                    return this.supportsScrolling() ? [this.window.pageXOffset, this.window.pageYOffset] : [0, 0];
                }
                scrollToPosition(t) {
                    this.supportsScrolling() && this.window.scrollTo(t[0], t[1]);
                }
                scrollToAnchor(t) {
                    if (!this.supportsScrolling()) return;
                    const e = (function (t, e) {
                        const n = t.getElementById(e) || t.getElementsByName(e)[0];
                        if (n) return n;
                        if ('function' == typeof t.createTreeWalker && t.body && (t.body.createShadowRoot || t.body.attachShadow)) {
                            const n = t.createTreeWalker(t.body, NodeFilter.SHOW_ELEMENT);
                            let s = n.currentNode;
                            for (; s; ) {
                                const t = s.shadowRoot;
                                if (t) {
                                    const n = t.getElementById(e) || t.querySelector(`[name="${e}"]`);
                                    if (n) return n;
                                }
                                s = n.nextNode();
                            }
                        }
                        return null;
                    })(this.document, t);
                    e && (this.scrollToElement(e), this.attemptFocus(e));
                }
                setHistoryScrollRestoration(t) {
                    if (this.supportScrollRestoration()) {
                        const e = this.window.history;
                        e && e.scrollRestoration && (e.scrollRestoration = t);
                    }
                }
                scrollToElement(t) {
                    const e = t.getBoundingClientRect(),
                        n = e.left + this.window.pageXOffset,
                        s = e.top + this.window.pageYOffset,
                        r = this.offset();
                    this.window.scrollTo(n - r[0], s - r[1]);
                }
                attemptFocus(t) {
                    return t.focus(), this.document.activeElement === t;
                }
                supportScrollRestoration() {
                    try {
                        if (!this.supportsScrolling()) return !1;
                        const t = eu(this.window.history) || eu(Object.getPrototypeOf(this.window.history));
                        return !(!t || (!t.writable && !t.set));
                    } catch (t) {
                        return !1;
                    }
                }
                supportsScrolling() {
                    try {
                        return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;
                    } catch (t) {
                        return !1;
                    }
                }
            }
            function eu(t) {
                return Object.getOwnPropertyDescriptor(t, 'scrollRestoration');
            }
            class nu {}
            class su extends class extends class {} {
                constructor() {
                    super(...arguments), (this.supportsDOMEvents = !0);
                }
            } {
                static makeCurrent() {
                    var t;
                    (t = new su()), Sc || (Sc = t);
                }
                onAndCancel(t, e, n) {
                    return (
                        t.addEventListener(e, n, !1),
                        () => {
                            t.removeEventListener(e, n, !1);
                        }
                    );
                }
                dispatchEvent(t, e) {
                    t.dispatchEvent(e);
                }
                remove(t) {
                    t.parentNode && t.parentNode.removeChild(t);
                }
                createElement(t, e) {
                    return (e = e || this.getDefaultDocument()).createElement(t);
                }
                createHtmlDocument() {
                    return document.implementation.createHTMLDocument('fakeTitle');
                }
                getDefaultDocument() {
                    return document;
                }
                isElementNode(t) {
                    return t.nodeType === Node.ELEMENT_NODE;
                }
                isShadowRoot(t) {
                    return t instanceof DocumentFragment;
                }
                getGlobalEventTarget(t, e) {
                    return 'window' === e ? window : 'document' === e ? t : 'body' === e ? t.body : null;
                }
                getBaseHref(t) {
                    const e = ((iu = iu || document.querySelector('base')), iu ? iu.getAttribute('href') : null);
                    return null == e
                        ? null
                        : (function (t) {
                              (ru = ru || document.createElement('a')), ru.setAttribute('href', t);
                              const e = ru.pathname;
                              return '/' === e.charAt(0) ? e : `/${e}`;
                          })(e);
                }
                resetBaseElement() {
                    iu = null;
                }
                getUserAgent() {
                    return window.navigator.userAgent;
                }
                getCookie(t) {
                    return Wc(document.cookie, t);
                }
            }
            let ru,
                iu = null;
            const ou = new $n('TRANSITION_ID'),
                au = [
                    {
                        provide: Cl,
                        useFactory: function (t, e, n) {
                            return () => {
                                n.get(kl).donePromise.then(() => {
                                    const n = Ec(),
                                        s = e.querySelectorAll(`style[ng-transition="${t}"]`);
                                    for (let t = 0; t < s.length; t++) n.remove(s[t]);
                                });
                            };
                        },
                        deps: [ou, Cc, Ji],
                        multi: !0,
                    },
                ];
            class lu {
                static init() {
                    var t;
                    (t = new lu()), (sc = t);
                }
                addToWindow(t) {
                    (It.getAngularTestability = (e, n = !0) => {
                        const s = t.findTestabilityInTree(e, n);
                        if (null == s) throw new Error('Could not find testability for element.');
                        return s;
                    }),
                        (It.getAllAngularTestabilities = () => t.getAllTestabilities()),
                        (It.getAllAngularRootElements = () => t.getAllRootElements()),
                        It.frameworkStabilizers || (It.frameworkStabilizers = []),
                        It.frameworkStabilizers.push((t) => {
                            const e = It.getAllAngularTestabilities();
                            let n = e.length,
                                s = !1;
                            const r = function (e) {
                                (s = s || e), n--, 0 == n && t(s);
                            };
                            e.forEach(function (t) {
                                t.whenStable(r);
                            });
                        });
                }
                findTestabilityInTree(t, e, n) {
                    if (null == e) return null;
                    const s = t.getTestability(e);
                    return null != s
                        ? s
                        : n
                        ? Ec().isShadowRoot(e)
                            ? this.findTestabilityInTree(t, e.host, !0)
                            : this.findTestabilityInTree(t, e.parentElement, !0)
                        : null;
                }
            }
            let cu = (() => {
                class t {
                    build() {
                        return new XMLHttpRequest();
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const uu = new $n('EventManagerPlugins');
            let hu = (() => {
                class t {
                    constructor(t, e) {
                        (this._zone = e),
                            (this._eventNameToPlugin = new Map()),
                            t.forEach((t) => (t.manager = this)),
                            (this._plugins = t.slice().reverse());
                    }
                    addEventListener(t, e, n) {
                        return this._findPluginFor(e).addEventListener(t, e, n);
                    }
                    addGlobalEventListener(t, e, n) {
                        return this._findPluginFor(e).addGlobalEventListener(t, e, n);
                    }
                    getZone() {
                        return this._zone;
                    }
                    _findPluginFor(t) {
                        const e = this._eventNameToPlugin.get(t);
                        if (e) return e;
                        const n = this._plugins;
                        for (let s = 0; s < n.length; s++) {
                            const e = n[s];
                            if (e.supports(t)) return this._eventNameToPlugin.set(t, e), e;
                        }
                        throw new Error(`No event manager plugin found for event ${t}`);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(uu), as(Wl));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            class du {
                constructor(t) {
                    this._doc = t;
                }
                addGlobalEventListener(t, e, n) {
                    const s = Ec().getGlobalEventTarget(this._doc, t);
                    if (!s) throw new Error(`Unsupported event target ${s} for event ${e}`);
                    return this.addEventListener(s, e, n);
                }
            }
            let pu = (() => {
                    class t {
                        constructor() {
                            this._stylesSet = new Set();
                        }
                        addStyles(t) {
                            const e = new Set();
                            t.forEach((t) => {
                                this._stylesSet.has(t) || (this._stylesSet.add(t), e.add(t));
                            }),
                                this.onStylesAdded(e);
                        }
                        onStylesAdded(t) {}
                        getAllStyles() {
                            return Array.from(this._stylesSet);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                fu = (() => {
                    class t extends pu {
                        constructor(t) {
                            super(), (this._doc = t), (this._hostNodes = new Map()), this._hostNodes.set(t.head, []);
                        }
                        _addStylesToHost(t, e, n) {
                            t.forEach((t) => {
                                const s = this._doc.createElement('style');
                                (s.textContent = t), n.push(e.appendChild(s));
                            });
                        }
                        addHost(t) {
                            const e = [];
                            this._addStylesToHost(this._stylesSet, t, e), this._hostNodes.set(t, e);
                        }
                        removeHost(t) {
                            const e = this._hostNodes.get(t);
                            e && e.forEach(mu), this._hostNodes.delete(t);
                        }
                        onStylesAdded(t) {
                            this._hostNodes.forEach((e, n) => {
                                this._addStylesToHost(t, n, e);
                            });
                        }
                        ngOnDestroy() {
                            this._hostNodes.forEach((t) => t.forEach(mu));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Cc));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })();
            function mu(t) {
                Ec().remove(t);
            }
            const gu = {
                    svg: 'http://www.w3.org/2000/svg',
                    xhtml: 'http://www.w3.org/1999/xhtml',
                    xlink: 'http://www.w3.org/1999/xlink',
                    xml: 'http://www.w3.org/XML/1998/namespace',
                    xmlns: 'http://www.w3.org/2000/xmlns/',
                },
                yu = /%COMP%/g;
            function _u(t, e, n) {
                for (let s = 0; s < e.length; s++) {
                    let r = e[s];
                    Array.isArray(r) ? _u(t, r, n) : ((r = r.replace(yu, t)), n.push(r));
                }
                return n;
            }
            function vu(t) {
                return (e) => {
                    if ('__ngUnwrap__' === e) return t;
                    !1 === t(e) && (e.preventDefault(), (e.returnValue = !1));
                };
            }
            let bu = (() => {
                class t {
                    constructor(t, e, n) {
                        (this.eventManager = t),
                            (this.sharedStylesHost = e),
                            (this.appId = n),
                            (this.rendererByCompId = new Map()),
                            (this.defaultRenderer = new wu(t));
                    }
                    createRenderer(t, e) {
                        if (!t || !e) return this.defaultRenderer;
                        switch (e.encapsulation) {
                            case kt.Emulated: {
                                let n = this.rendererByCompId.get(e.id);
                                return (
                                    n ||
                                        ((n = new xu(this.eventManager, this.sharedStylesHost, e, this.appId)),
                                        this.rendererByCompId.set(e.id, n)),
                                    n.applyToHost(t),
                                    n
                                );
                            }
                            case 1:
                            case kt.ShadowDom:
                                return new Su(this.eventManager, this.sharedStylesHost, t, e);
                            default:
                                if (!this.rendererByCompId.has(e.id)) {
                                    const t = _u(e.id, e.styles, []);
                                    this.sharedStylesHost.addStyles(t), this.rendererByCompId.set(e.id, this.defaultRenderer);
                                }
                                return this.defaultRenderer;
                        }
                    }
                    begin() {}
                    end() {}
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(hu), as(fu), as(Tl));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            class wu {
                constructor(t) {
                    (this.eventManager = t), (this.data = Object.create(null));
                }
                destroy() {}
                createElement(t, e) {
                    return e ? document.createElementNS(gu[e] || e, t) : document.createElement(t);
                }
                createComment(t) {
                    return document.createComment(t);
                }
                createText(t) {
                    return document.createTextNode(t);
                }
                appendChild(t, e) {
                    t.appendChild(e);
                }
                insertBefore(t, e, n) {
                    t && t.insertBefore(e, n);
                }
                removeChild(t, e) {
                    t && t.removeChild(e);
                }
                selectRootElement(t, e) {
                    let n = 'string' == typeof t ? document.querySelector(t) : t;
                    if (!n) throw new Error(`The selector "${t}" did not match any elements`);
                    return e || (n.textContent = ''), n;
                }
                parentNode(t) {
                    return t.parentNode;
                }
                nextSibling(t) {
                    return t.nextSibling;
                }
                setAttribute(t, e, n, s) {
                    if (s) {
                        e = s + ':' + e;
                        const r = gu[s];
                        r ? t.setAttributeNS(r, e, n) : t.setAttribute(e, n);
                    } else t.setAttribute(e, n);
                }
                removeAttribute(t, e, n) {
                    if (n) {
                        const s = gu[n];
                        s ? t.removeAttributeNS(s, e) : t.removeAttribute(`${n}:${e}`);
                    } else t.removeAttribute(e);
                }
                addClass(t, e) {
                    t.classList.add(e);
                }
                removeClass(t, e) {
                    t.classList.remove(e);
                }
                setStyle(t, e, n, s) {
                    s & (nr.DashCase | nr.Important) ? t.style.setProperty(e, n, s & nr.Important ? 'important' : '') : (t.style[e] = n);
                }
                removeStyle(t, e, n) {
                    n & nr.DashCase ? t.style.removeProperty(e) : (t.style[e] = '');
                }
                setProperty(t, e, n) {
                    t[e] = n;
                }
                setValue(t, e) {
                    t.nodeValue = e;
                }
                listen(t, e, n) {
                    return 'string' == typeof t
                        ? this.eventManager.addGlobalEventListener(t, e, vu(n))
                        : this.eventManager.addEventListener(t, e, vu(n));
                }
            }
            class xu extends wu {
                constructor(t, e, n, s) {
                    super(t), (this.component = n);
                    const r = _u(s + '-' + n.id, n.styles, []);
                    e.addStyles(r),
                        (this.contentAttr = '_ngcontent-%COMP%'.replace(yu, s + '-' + n.id)),
                        (this.hostAttr = '_nghost-%COMP%'.replace(yu, s + '-' + n.id));
                }
                applyToHost(t) {
                    super.setAttribute(t, this.hostAttr, '');
                }
                createElement(t, e) {
                    const n = super.createElement(t, e);
                    return super.setAttribute(n, this.contentAttr, ''), n;
                }
            }
            class Su extends wu {
                constructor(t, e, n, s) {
                    super(t),
                        (this.sharedStylesHost = e),
                        (this.hostEl = n),
                        (this.shadowRoot = n.attachShadow({ mode: 'open' })),
                        this.sharedStylesHost.addHost(this.shadowRoot);
                    const r = _u(s.id, s.styles, []);
                    for (let i = 0; i < r.length; i++) {
                        const t = document.createElement('style');
                        (t.textContent = r[i]), this.shadowRoot.appendChild(t);
                    }
                }
                nodeOrShadowRoot(t) {
                    return t === this.hostEl ? this.shadowRoot : t;
                }
                destroy() {
                    this.sharedStylesHost.removeHost(this.shadowRoot);
                }
                appendChild(t, e) {
                    return super.appendChild(this.nodeOrShadowRoot(t), e);
                }
                insertBefore(t, e, n) {
                    return super.insertBefore(this.nodeOrShadowRoot(t), e, n);
                }
                removeChild(t, e) {
                    return super.removeChild(this.nodeOrShadowRoot(t), e);
                }
                parentNode(t) {
                    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(t)));
                }
            }
            let Eu = (() => {
                class t extends du {
                    constructor(t) {
                        super(t);
                    }
                    supports(t) {
                        return !0;
                    }
                    addEventListener(t, e, n) {
                        return t.addEventListener(e, n, !1), () => this.removeEventListener(t, e, n);
                    }
                    removeEventListener(t, e, n) {
                        return t.removeEventListener(e, n);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Cc));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const Cu = ['alt', 'control', 'meta', 'shift'],
                ku = {
                    '\b': 'Backspace',
                    '\t': 'Tab',
                    '\x7f': 'Delete',
                    '\x1b': 'Escape',
                    Del: 'Delete',
                    Esc: 'Escape',
                    Left: 'ArrowLeft',
                    Right: 'ArrowRight',
                    Up: 'ArrowUp',
                    Down: 'ArrowDown',
                    Menu: 'ContextMenu',
                    Scroll: 'ScrollLock',
                    Win: 'OS',
                },
                Tu = {
                    A: '1',
                    B: '2',
                    C: '3',
                    D: '4',
                    E: '5',
                    F: '6',
                    G: '7',
                    H: '8',
                    I: '9',
                    J: '*',
                    K: '+',
                    M: '-',
                    N: '.',
                    O: '/',
                    '`': '0',
                    '\x90': 'NumLock',
                },
                Au = { alt: (t) => t.altKey, control: (t) => t.ctrlKey, meta: (t) => t.metaKey, shift: (t) => t.shiftKey };
            let Ru = (() => {
                    class t extends du {
                        constructor(t) {
                            super(t);
                        }
                        supports(e) {
                            return null != t.parseEventName(e);
                        }
                        addEventListener(e, n, s) {
                            const r = t.parseEventName(n),
                                i = t.eventCallback(r.fullKey, s, this.manager.getZone());
                            return this.manager.getZone().runOutsideAngular(() => Ec().onAndCancel(e, r.domEventName, i));
                        }
                        static parseEventName(e) {
                            const n = e.toLowerCase().split('.'),
                                s = n.shift();
                            if (0 === n.length || ('keydown' !== s && 'keyup' !== s)) return null;
                            const r = t._normalizeKey(n.pop());
                            let i = '';
                            if (
                                (Cu.forEach((t) => {
                                    const e = n.indexOf(t);
                                    e > -1 && (n.splice(e, 1), (i += t + '.'));
                                }),
                                (i += r),
                                0 != n.length || 0 === r.length)
                            )
                                return null;
                            const o = {};
                            return (o.domEventName = s), (o.fullKey = i), o;
                        }
                        static getEventFullKey(t) {
                            let e = '',
                                n = (function (t) {
                                    let e = t.key;
                                    if (null == e) {
                                        if (((e = t.keyIdentifier), null == e)) return 'Unidentified';
                                        e.startsWith('U+') &&
                                            ((e = String.fromCharCode(parseInt(e.substring(2), 16))),
                                            3 === t.location && Tu.hasOwnProperty(e) && (e = Tu[e]));
                                    }
                                    return ku[e] || e;
                                })(t);
                            return (
                                (n = n.toLowerCase()),
                                ' ' === n ? (n = 'space') : '.' === n && (n = 'dot'),
                                Cu.forEach((s) => {
                                    s != n && (0, Au[s])(t) && (e += s + '.');
                                }),
                                (e += n),
                                e
                            );
                        }
                        static eventCallback(e, n, s) {
                            return (r) => {
                                t.getEventFullKey(r) === e && s.runGuarded(() => n(r));
                            };
                        }
                        static _normalizeKey(t) {
                            switch (t) {
                                case 'esc':
                                    return 'escape';
                                default:
                                    return t;
                            }
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Cc));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                Ou = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return as(Pu);
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            function Iu(t) {
                return new Pu(t.get(Cc));
            }
            let Pu = (() => {
                class t extends Ou {
                    constructor(t) {
                        super(), (this._doc = t);
                    }
                    sanitize(t, e) {
                        if (null == e) return null;
                        switch (t) {
                            case Qs.NONE:
                                return e;
                            case Qs.HTML:
                                return Ss(e, 'HTML')
                                    ? xs(e)
                                    : (function (t, e) {
                                          let n = null;
                                          try {
                                              qs =
                                                  qs ||
                                                  (function (t) {
                                                      const e = new ks(t);
                                                      return (function () {
                                                          try {
                                                              return !!new window.DOMParser().parseFromString(ms(''), 'text/html');
                                                          } catch (t) {
                                                              return !1;
                                                          }
                                                      })()
                                                          ? new Cs(e)
                                                          : e;
                                                  })(t);
                                              let s = e ? String(e) : '';
                                              n = qs.getInertBodyElement(s);
                                              let r = 5,
                                                  i = s;
                                              do {
                                                  if (0 === r) throw new Error('Failed to sanitize html because the input is unstable');
                                                  r--, (s = i), (i = n.innerHTML), (n = qs.getInertBodyElement(s));
                                              } while (s !== i);
                                              return ms(new Vs().sanitizeChildren(Ws(n) || n));
                                          } finally {
                                              if (n) {
                                                  const t = Ws(n) || n;
                                                  for (; t.firstChild; ) t.removeChild(t.firstChild);
                                              }
                                          }
                                      })(this._doc, String(e)).toString();
                            case Qs.STYLE:
                                return Ss(e, 'Style') ? xs(e) : e;
                            case Qs.SCRIPT:
                                if (Ss(e, 'Script')) return xs(e);
                                throw new Error('unsafe value used in a script context');
                            case Qs.URL:
                                return Es(e), Ss(e, 'URL') ? xs(e) : Rs(String(e));
                            case Qs.RESOURCE_URL:
                                if (Ss(e, 'ResourceURL')) return xs(e);
                                throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');
                            default:
                                throw new Error(`Unexpected SecurityContext ${t} (see https://g.co/ng/security#xss)`);
                        }
                    }
                    bypassSecurityTrustHtml(t) {
                        return new ys(t);
                    }
                    bypassSecurityTrustStyle(t) {
                        return new _s(t);
                    }
                    bypassSecurityTrustScript(t) {
                        return new vs(t);
                    }
                    bypassSecurityTrustUrl(t) {
                        return new bs(t);
                    }
                    bypassSecurityTrustResourceUrl(t) {
                        return new ws(t);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Cc));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return Iu(as(Hi));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            const Lu = cc(bc, 'browser', [
                    { provide: Il, useValue: 'browser' },
                    {
                        provide: Ol,
                        useValue: function () {
                            su.makeCurrent(), lu.init();
                        },
                        multi: !0,
                    },
                    {
                        provide: Cc,
                        useFactory: function () {
                            return (
                                (function (t) {
                                    pe = t;
                                })(document),
                                document
                            );
                        },
                        deps: [],
                    },
                ]),
                Du = [
                    [],
                    { provide: Vi, useValue: 'root' },
                    {
                        provide: Js,
                        useFactory: function () {
                            return new Js();
                        },
                        deps: [],
                    },
                    { provide: uu, useClass: Eu, multi: !0, deps: [Cc, Wl, Il] },
                    { provide: uu, useClass: Ru, multi: !0, deps: [Cc] },
                    [],
                    { provide: bu, useClass: bu, deps: [hu, fu, Tl] },
                    { provide: la, useExisting: bu },
                    { provide: pu, useExisting: fu },
                    { provide: fu, useClass: fu, deps: [Cc] },
                    { provide: Jl, useClass: Jl, deps: [Wl] },
                    { provide: hu, useClass: hu, deps: [uu, Wl] },
                    { provide: nu, useClass: cu, deps: [] },
                    [],
                ];
            let Nu = (() => {
                class t {
                    constructor(t) {
                        if (t)
                            throw new Error(
                                'BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.'
                            );
                    }
                    static withServerTransition(e) {
                        return { ngModule: t, providers: [{ provide: Tl, useValue: e.appId }, { provide: ou, useExisting: Tl }, au] };
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(t, 12));
                    }),
                    (t.ɵmod = Wt({ type: t })),
                    (t.ɵinj = dt({ providers: Du, imports: [Yc, xc] })),
                    t
                );
            })();
            function Fu() {
                return new Mu(as(Cc));
            }
            let Mu = (() => {
                class t {
                    constructor(t) {
                        this._doc = t;
                    }
                    getTitle() {
                        return this._doc.title;
                    }
                    setTitle(t) {
                        this._doc.title = t || '';
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Cc));
                    }),
                    (t.ɵprov = ht({ factory: Fu, token: t, providedIn: 'root' })),
                    t
                );
            })();
            function ju(t, e) {
                return new _((n) => {
                    const s = t.length;
                    if (0 === s) return void n.complete();
                    const r = new Array(s);
                    let i = 0,
                        o = 0;
                    for (let a = 0; a < s; a++) {
                        const l = N(t[a]);
                        let c = !1;
                        n.add(
                            l.subscribe({
                                next: (t) => {
                                    c || ((c = !0), o++), (r[a] = t);
                                },
                                error: (t) => n.error(t),
                                complete: () => {
                                    i++,
                                        (i !== s && c) ||
                                            (o === s && n.next(e ? e.reduce((t, e, n) => ((t[e] = r[n]), t), {}) : r), n.complete());
                                },
                            })
                        );
                    }
                });
            }
            'undefined' != typeof window && window;
            let Hu = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })(),
                Bu = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Hu]] })),
                        t
                    );
                })(),
                Vu = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [Bu] })),
                        t
                    );
                })();
            function Uu(...t) {
                let e = t[t.length - 1];
                return C(e) ? (t.pop(), D(t, e)) : $(t);
            }
            class $u extends S {
                constructor(t) {
                    super(), (this._value = t);
                }
                get value() {
                    return this.getValue();
                }
                _subscribe(t) {
                    const e = super._subscribe(t);
                    return e && !e.closed && t.next(this._value), e;
                }
                getValue() {
                    if (this.hasError) throw this.thrownError;
                    if (this.closed) throw new b();
                    return this._value;
                }
                next(t) {
                    super.next((this._value = t));
                }
            }
            class zu extends f {
                notifyNext(t, e, n, s, r) {
                    this.destination.next(e);
                }
                notifyError(t, e) {
                    this.destination.error(t);
                }
                notifyComplete(t) {
                    this.destination.complete();
                }
            }
            class qu extends f {
                constructor(t, e, n) {
                    super(), (this.parent = t), (this.outerValue = e), (this.outerIndex = n), (this.index = 0);
                }
                _next(t) {
                    this.parent.notifyNext(this.outerValue, t, this.outerIndex, this.index++, this);
                }
                _error(t) {
                    this.parent.notifyError(t, this), this.unsubscribe();
                }
                _complete() {
                    this.parent.notifyComplete(this), this.unsubscribe();
                }
            }
            function Wu(t, e, n, s, r = new qu(t, n, s)) {
                if (!r.closed) return e instanceof _ ? e.subscribe(r) : L(e)(r);
            }
            const Qu = {};
            class Ku {
                constructor(t) {
                    this.resultSelector = t;
                }
                call(t, e) {
                    return e.subscribe(new Zu(t, this.resultSelector));
                }
            }
            class Zu extends zu {
                constructor(t, e) {
                    super(t), (this.resultSelector = e), (this.active = 0), (this.values = []), (this.observables = []);
                }
                _next(t) {
                    this.values.push(Qu), this.observables.push(t);
                }
                _complete() {
                    const t = this.observables,
                        e = t.length;
                    if (0 === e) this.destination.complete();
                    else {
                        (this.active = e), (this.toRespond = e);
                        for (let n = 0; n < e; n++) this.add(Wu(this, t[n], void 0, n));
                    }
                }
                notifyComplete(t) {
                    0 == (this.active -= 1) && this.destination.complete();
                }
                notifyNext(t, e, n) {
                    const s = this.values,
                        r = this.toRespond ? (s[n] === Qu ? --this.toRespond : this.toRespond) : 0;
                    (s[n] = e), 0 === r && (this.resultSelector ? this._tryResultSelector(s) : this.destination.next(s.slice()));
                }
                _tryResultSelector(t) {
                    let e;
                    try {
                        e = this.resultSelector.apply(this, t);
                    } catch (n) {
                        return void this.destination.error(n);
                    }
                    this.destination.next(e);
                }
            }
            const Yu = (() => {
                function t() {
                    return Error.call(this), (this.message = 'no elements in sequence'), (this.name = 'EmptyError'), this;
                }
                return (t.prototype = Object.create(Error.prototype)), t;
            })();
            function Gu(...t) {
                return U(1)(Uu(...t));
            }
            const Xu = new _((t) => t.complete());
            function Ju(t) {
                return t
                    ? (function (t) {
                          return new _((e) => t.schedule(() => e.complete()));
                      })(t)
                    : Xu;
            }
            function th(t) {
                return new _((e) => {
                    let n;
                    try {
                        n = t();
                    } catch (s) {
                        return void e.error(s);
                    }
                    return (n ? N(n) : Ju()).subscribe(e);
                });
            }
            function eh(t, e) {
                return 'function' == typeof e
                    ? (n) => n.pipe(eh((n, s) => N(t(n, s)).pipe(k((t, r) => e(n, t, s, r)))))
                    : (e) => e.lift(new nh(t));
            }
            class nh {
                constructor(t) {
                    this.project = t;
                }
                call(t, e) {
                    return e.subscribe(new sh(t, this.project));
                }
            }
            class sh extends M {
                constructor(t, e) {
                    super(t), (this.project = e), (this.index = 0);
                }
                _next(t) {
                    let e;
                    const n = this.index++;
                    try {
                        e = this.project(t, n);
                    } catch (s) {
                        return void this.destination.error(s);
                    }
                    this._innerSub(e);
                }
                _innerSub(t) {
                    const e = this.innerSubscription;
                    e && e.unsubscribe();
                    const n = new F(this),
                        s = this.destination;
                    s.add(n), (this.innerSubscription = j(t, n)), this.innerSubscription !== n && s.add(this.innerSubscription);
                }
                _complete() {
                    const { innerSubscription: t } = this;
                    (t && !t.closed) || super._complete(), this.unsubscribe();
                }
                _unsubscribe() {
                    this.innerSubscription = void 0;
                }
                notifyComplete() {
                    (this.innerSubscription = void 0), this.isStopped && super._complete();
                }
                notifyNext(t) {
                    this.destination.next(t);
                }
            }
            const rh = (() => {
                function t() {
                    return Error.call(this), (this.message = 'argument out of range'), (this.name = 'ArgumentOutOfRangeError'), this;
                }
                return (t.prototype = Object.create(Error.prototype)), t;
            })();
            function ih(t) {
                return (e) => (0 === t ? Ju() : e.lift(new oh(t)));
            }
            class oh {
                constructor(t) {
                    if (((this.total = t), this.total < 0)) throw new rh();
                }
                call(t, e) {
                    return e.subscribe(new ah(t, this.total));
                }
            }
            class ah extends f {
                constructor(t, e) {
                    super(t), (this.total = e), (this.count = 0);
                }
                _next(t) {
                    const e = this.total,
                        n = ++this.count;
                    n <= e && (this.destination.next(t), n === e && (this.destination.complete(), this.unsubscribe()));
                }
            }
            function lh(...t) {
                const e = t[t.length - 1];
                return C(e) ? (t.pop(), (n) => Gu(t, n, e)) : (e) => Gu(t, e);
            }
            function ch(t, e) {
                let n = !1;
                return (
                    arguments.length >= 2 && (n = !0),
                    function (s) {
                        return s.lift(new uh(t, e, n));
                    }
                );
            }
            class uh {
                constructor(t, e, n = !1) {
                    (this.accumulator = t), (this.seed = e), (this.hasSeed = n);
                }
                call(t, e) {
                    return e.subscribe(new hh(t, this.accumulator, this.seed, this.hasSeed));
                }
            }
            class hh extends f {
                constructor(t, e, n, s) {
                    super(t), (this.accumulator = e), (this._seed = n), (this.hasSeed = s), (this.index = 0);
                }
                get seed() {
                    return this._seed;
                }
                set seed(t) {
                    (this.hasSeed = !0), (this._seed = t);
                }
                _next(t) {
                    if (this.hasSeed) return this._tryNext(t);
                    (this.seed = t), this.destination.next(t);
                }
                _tryNext(t) {
                    const e = this.index++;
                    let n;
                    try {
                        n = this.accumulator(this.seed, t, e);
                    } catch (s) {
                        this.destination.error(s);
                    }
                    (this.seed = n), this.destination.next(n);
                }
            }
            function dh(t, e) {
                return function (n) {
                    return n.lift(new ph(t, e));
                };
            }
            class ph {
                constructor(t, e) {
                    (this.predicate = t), (this.thisArg = e);
                }
                call(t, e) {
                    return e.subscribe(new fh(t, this.predicate, this.thisArg));
                }
            }
            class fh extends f {
                constructor(t, e, n) {
                    super(t), (this.predicate = e), (this.thisArg = n), (this.count = 0);
                }
                _next(t) {
                    let e;
                    try {
                        e = this.predicate.call(this.thisArg, t, this.count++);
                    } catch (n) {
                        return void this.destination.error(n);
                    }
                    e && this.destination.next(t);
                }
            }
            function mh(t) {
                return function (e) {
                    const n = new gh(t),
                        s = e.lift(n);
                    return (n.caught = s);
                };
            }
            class gh {
                constructor(t) {
                    this.selector = t;
                }
                call(t, e) {
                    return e.subscribe(new yh(t, this.selector, this.caught));
                }
            }
            class yh extends M {
                constructor(t, e, n) {
                    super(t), (this.selector = e), (this.caught = n);
                }
                error(t) {
                    if (!this.isStopped) {
                        let n;
                        try {
                            n = this.selector(t, this.caught);
                        } catch (e) {
                            return void super.error(e);
                        }
                        this._unsubscribeAndRecycle();
                        const s = new F(this);
                        this.add(s);
                        const r = j(n, s);
                        r !== s && this.add(r);
                    }
                }
            }
            function _h(t, e) {
                return H(t, e, 1);
            }
            function vh(t) {
                return function (e) {
                    return 0 === t ? Ju() : e.lift(new bh(t));
                };
            }
            class bh {
                constructor(t) {
                    if (((this.total = t), this.total < 0)) throw new rh();
                }
                call(t, e) {
                    return e.subscribe(new wh(t, this.total));
                }
            }
            class wh extends f {
                constructor(t, e) {
                    super(t), (this.total = e), (this.ring = new Array()), (this.count = 0);
                }
                _next(t) {
                    const e = this.ring,
                        n = this.total,
                        s = this.count++;
                    e.length < n ? e.push(t) : (e[s % n] = t);
                }
                _complete() {
                    const t = this.destination;
                    let e = this.count;
                    if (e > 0) {
                        const n = this.count >= this.total ? this.total : this.count,
                            s = this.ring;
                        for (let r = 0; r < n; r++) {
                            const r = e++ % n;
                            t.next(s[r]);
                        }
                    }
                    t.complete();
                }
            }
            function xh(t = Ch) {
                return (e) => e.lift(new Sh(t));
            }
            class Sh {
                constructor(t) {
                    this.errorFactory = t;
                }
                call(t, e) {
                    return e.subscribe(new Eh(t, this.errorFactory));
                }
            }
            class Eh extends f {
                constructor(t, e) {
                    super(t), (this.errorFactory = e), (this.hasValue = !1);
                }
                _next(t) {
                    (this.hasValue = !0), this.destination.next(t);
                }
                _complete() {
                    if (this.hasValue) return this.destination.complete();
                    {
                        let e;
                        try {
                            e = this.errorFactory();
                        } catch (t) {
                            e = t;
                        }
                        this.destination.error(e);
                    }
                }
            }
            function Ch() {
                return new Yu();
            }
            function kh(t = null) {
                return (e) => e.lift(new Th(t));
            }
            class Th {
                constructor(t) {
                    this.defaultValue = t;
                }
                call(t, e) {
                    return e.subscribe(new Ah(t, this.defaultValue));
                }
            }
            class Ah extends f {
                constructor(t, e) {
                    super(t), (this.defaultValue = e), (this.isEmpty = !0);
                }
                _next(t) {
                    (this.isEmpty = !1), this.destination.next(t);
                }
                _complete() {
                    this.isEmpty && this.destination.next(this.defaultValue), this.destination.complete();
                }
            }
            function Rh(t, e) {
                const n = arguments.length >= 2;
                return (s) => s.pipe(t ? dh((e, n) => t(e, n, s)) : y, ih(1), n ? kh(e) : xh(() => new Yu()));
            }
            function Oh() {}
            function Ih(t, e, n) {
                return function (s) {
                    return s.lift(new Ph(t, e, n));
                };
            }
            class Ph {
                constructor(t, e, n) {
                    (this.nextOrObserver = t), (this.error = e), (this.complete = n);
                }
                call(t, e) {
                    return e.subscribe(new Lh(t, this.nextOrObserver, this.error, this.complete));
                }
            }
            class Lh extends f {
                constructor(t, e, n, r) {
                    super(t),
                        (this._tapNext = Oh),
                        (this._tapError = Oh),
                        (this._tapComplete = Oh),
                        (this._tapError = n || Oh),
                        (this._tapComplete = r || Oh),
                        s(e)
                            ? ((this._context = this), (this._tapNext = e))
                            : e &&
                              ((this._context = e),
                              (this._tapNext = e.next || Oh),
                              (this._tapError = e.error || Oh),
                              (this._tapComplete = e.complete || Oh));
                }
                _next(t) {
                    try {
                        this._tapNext.call(this._context, t);
                    } catch (e) {
                        return void this.destination.error(e);
                    }
                    this.destination.next(t);
                }
                _error(t) {
                    try {
                        this._tapError.call(this._context, t);
                    } catch (t) {
                        return void this.destination.error(t);
                    }
                    this.destination.error(t);
                }
                _complete() {
                    try {
                        this._tapComplete.call(this._context);
                    } catch (t) {
                        return void this.destination.error(t);
                    }
                    return this.destination.complete();
                }
            }
            function Dh(t) {
                return (e) => e.lift(new Nh(t));
            }
            class Nh {
                constructor(t) {
                    this.callback = t;
                }
                call(t, e) {
                    return e.subscribe(new Fh(t, this.callback));
                }
            }
            class Fh extends f {
                constructor(t, e) {
                    super(t), this.add(new h(e));
                }
            }
            class Mh {
                constructor(t, e) {
                    (this.id = t), (this.url = e);
                }
            }
            class jh extends Mh {
                constructor(t, e, n = 'imperative', s = null) {
                    super(t, e), (this.navigationTrigger = n), (this.restoredState = s);
                }
                toString() {
                    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
                }
            }
            class Hh extends Mh {
                constructor(t, e, n) {
                    super(t, e), (this.urlAfterRedirects = n);
                }
                toString() {
                    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
                }
            }
            class Bh extends Mh {
                constructor(t, e, n) {
                    super(t, e), (this.reason = n);
                }
                toString() {
                    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
                }
            }
            class Vh extends Mh {
                constructor(t, e, n) {
                    super(t, e), (this.error = n);
                }
                toString() {
                    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
                }
            }
            class Uh extends Mh {
                constructor(t, e, n, s) {
                    super(t, e), (this.urlAfterRedirects = n), (this.state = s);
                }
                toString() {
                    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
                }
            }
            class $h extends Mh {
                constructor(t, e, n, s) {
                    super(t, e), (this.urlAfterRedirects = n), (this.state = s);
                }
                toString() {
                    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
                }
            }
            class zh extends Mh {
                constructor(t, e, n, s, r) {
                    super(t, e), (this.urlAfterRedirects = n), (this.state = s), (this.shouldActivate = r);
                }
                toString() {
                    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
                }
            }
            class qh extends Mh {
                constructor(t, e, n, s) {
                    super(t, e), (this.urlAfterRedirects = n), (this.state = s);
                }
                toString() {
                    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
                }
            }
            class Wh extends Mh {
                constructor(t, e, n, s) {
                    super(t, e), (this.urlAfterRedirects = n), (this.state = s);
                }
                toString() {
                    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
                }
            }
            class Qh {
                constructor(t) {
                    this.route = t;
                }
                toString() {
                    return `RouteConfigLoadStart(path: ${this.route.path})`;
                }
            }
            class Kh {
                constructor(t) {
                    this.route = t;
                }
                toString() {
                    return `RouteConfigLoadEnd(path: ${this.route.path})`;
                }
            }
            class Zh {
                constructor(t) {
                    this.snapshot = t;
                }
                toString() {
                    return `ChildActivationStart(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
                }
            }
            class Yh {
                constructor(t) {
                    this.snapshot = t;
                }
                toString() {
                    return `ChildActivationEnd(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
                }
            }
            class Gh {
                constructor(t) {
                    this.snapshot = t;
                }
                toString() {
                    return `ActivationStart(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
                }
            }
            class Xh {
                constructor(t) {
                    this.snapshot = t;
                }
                toString() {
                    return `ActivationEnd(path: '${(this.snapshot.routeConfig && this.snapshot.routeConfig.path) || ''}')`;
                }
            }
            class Jh {
                constructor(t, e, n) {
                    (this.routerEvent = t), (this.position = e), (this.anchor = n);
                }
                toString() {
                    return `Scroll(anchor: '${this.anchor}', position: '${
                        this.position ? `${this.position[0]}, ${this.position[1]}` : null
                    }')`;
                }
            }
            const td = 'primary';
            class ed {
                constructor(t) {
                    this.params = t || {};
                }
                has(t) {
                    return Object.prototype.hasOwnProperty.call(this.params, t);
                }
                get(t) {
                    if (this.has(t)) {
                        const e = this.params[t];
                        return Array.isArray(e) ? e[0] : e;
                    }
                    return null;
                }
                getAll(t) {
                    if (this.has(t)) {
                        const e = this.params[t];
                        return Array.isArray(e) ? e : [e];
                    }
                    return [];
                }
                get keys() {
                    return Object.keys(this.params);
                }
            }
            function nd(t) {
                return new ed(t);
            }
            function sd(t) {
                const e = Error('NavigationCancelingError: ' + t);
                return (e.ngNavigationCancelingError = !0), e;
            }
            function rd(t, e, n) {
                const s = n.path.split('/');
                if (s.length > t.length) return null;
                if ('full' === n.pathMatch && (e.hasChildren() || s.length < t.length)) return null;
                const r = {};
                for (let i = 0; i < s.length; i++) {
                    const e = s[i],
                        n = t[i];
                    if (e.startsWith(':')) r[e.substring(1)] = n;
                    else if (e !== n.path) return null;
                }
                return { consumed: t.slice(0, s.length), posParams: r };
            }
            function id(t, e) {
                const n = t ? Object.keys(t) : void 0,
                    s = e ? Object.keys(e) : void 0;
                if (!n || !s || n.length != s.length) return !1;
                let r;
                for (let i = 0; i < n.length; i++) if (((r = n[i]), !od(t[r], e[r]))) return !1;
                return !0;
            }
            function od(t, e) {
                if (Array.isArray(t) && Array.isArray(e)) {
                    if (t.length !== e.length) return !1;
                    const n = [...t].sort(),
                        s = [...e].sort();
                    return n.every((t, e) => s[e] === t);
                }
                return t === e;
            }
            function ad(t) {
                return Array.prototype.concat.apply([], t);
            }
            function ld(t) {
                return t.length > 0 ? t[t.length - 1] : null;
            }
            function cd(t, e) {
                for (const n in t) t.hasOwnProperty(n) && e(t[n], n);
            }
            function ud(t) {
                return wo(t) ? t : bo(t) ? N(Promise.resolve(t)) : Uu(t);
            }
            const hd = {
                    exact: function t(e, n, s) {
                        if (!bd(e.segments, n.segments)) return !1;
                        if (!gd(e.segments, n.segments, s)) return !1;
                        if (e.numberOfChildren !== n.numberOfChildren) return !1;
                        for (const r in n.children) {
                            if (!e.children[r]) return !1;
                            if (!t(e.children[r], n.children[r], s)) return !1;
                        }
                        return !0;
                    },
                    subset: fd,
                },
                dd = {
                    exact: function (t, e) {
                        return id(t, e);
                    },
                    subset: function (t, e) {
                        return Object.keys(e).length <= Object.keys(t).length && Object.keys(e).every((n) => od(t[n], e[n]));
                    },
                    ignored: () => !0,
                };
            function pd(t, e, n) {
                return (
                    hd[n.paths](t.root, e.root, n.matrixParams) &&
                    dd[n.queryParams](t.queryParams, e.queryParams) &&
                    !('exact' === n.fragment && t.fragment !== e.fragment)
                );
            }
            function fd(t, e, n) {
                return md(t, e, e.segments, n);
            }
            function md(t, e, n, s) {
                if (t.segments.length > n.length) {
                    const r = t.segments.slice(0, n.length);
                    return !!bd(r, n) && !e.hasChildren() && !!gd(r, n, s);
                }
                if (t.segments.length === n.length) {
                    if (!bd(t.segments, n)) return !1;
                    if (!gd(t.segments, n, s)) return !1;
                    for (const n in e.children) {
                        if (!t.children[n]) return !1;
                        if (!fd(t.children[n], e.children[n], s)) return !1;
                    }
                    return !0;
                }
                {
                    const r = n.slice(0, t.segments.length),
                        i = n.slice(t.segments.length);
                    return !!bd(t.segments, r) && !!gd(t.segments, r, s) && !!t.children.primary && md(t.children.primary, e, i, s);
                }
            }
            function gd(t, e, n) {
                return e.every((e, s) => dd[n](t[s].parameters, e.parameters));
            }
            class yd {
                constructor(t, e, n) {
                    (this.root = t), (this.queryParams = e), (this.fragment = n);
                }
                get queryParamMap() {
                    return this._queryParamMap || (this._queryParamMap = nd(this.queryParams)), this._queryParamMap;
                }
                toString() {
                    return Sd.serialize(this);
                }
            }
            class _d {
                constructor(t, e) {
                    (this.segments = t), (this.children = e), (this.parent = null), cd(e, (t, e) => (t.parent = this));
                }
                hasChildren() {
                    return this.numberOfChildren > 0;
                }
                get numberOfChildren() {
                    return Object.keys(this.children).length;
                }
                toString() {
                    return Ed(this);
                }
            }
            class vd {
                constructor(t, e) {
                    (this.path = t), (this.parameters = e);
                }
                get parameterMap() {
                    return this._parameterMap || (this._parameterMap = nd(this.parameters)), this._parameterMap;
                }
                toString() {
                    return Id(this);
                }
            }
            function bd(t, e) {
                return t.length === e.length && t.every((t, n) => t.path === e[n].path);
            }
            class wd {}
            class xd {
                parse(t) {
                    const e = new Fd(t);
                    return new yd(e.parseRootSegment(), e.parseQueryParams(), e.parseFragment());
                }
                serialize(t) {
                    var e;
                    return `/${Cd(t.root, !0)}${(function (t) {
                        const e = Object.keys(t)
                            .map((e) => {
                                const n = t[e];
                                return Array.isArray(n) ? n.map((t) => `${Td(e)}=${Td(t)}`).join('&') : `${Td(e)}=${Td(n)}`;
                            })
                            .filter((t) => !!t);
                        return e.length ? `?${e.join('&')}` : '';
                    })(t.queryParams)}${'string' == typeof t.fragment ? `#${((e = t.fragment), encodeURI(e))}` : ''}`;
                }
            }
            const Sd = new xd();
            function Ed(t) {
                return t.segments.map((t) => Id(t)).join('/');
            }
            function Cd(t, e) {
                if (!t.hasChildren()) return Ed(t);
                if (e) {
                    const e = t.children.primary ? Cd(t.children.primary, !1) : '',
                        n = [];
                    return (
                        cd(t.children, (t, e) => {
                            e !== td && n.push(`${e}:${Cd(t, !1)}`);
                        }),
                        n.length > 0 ? `${e}(${n.join('//')})` : e
                    );
                }
                {
                    const e = (function (t, e) {
                        let n = [];
                        return (
                            cd(t.children, (t, s) => {
                                s === td && (n = n.concat(e(t, s)));
                            }),
                            cd(t.children, (t, s) => {
                                s !== td && (n = n.concat(e(t, s)));
                            }),
                            n
                        );
                    })(t, (e, n) => (n === td ? [Cd(t.children.primary, !1)] : [`${n}:${Cd(e, !1)}`]));
                    return 1 === Object.keys(t.children).length && null != t.children.primary
                        ? `${Ed(t)}/${e[0]}`
                        : `${Ed(t)}/(${e.join('//')})`;
                }
            }
            function kd(t) {
                return encodeURIComponent(t).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');
            }
            function Td(t) {
                return kd(t).replace(/%3B/gi, ';');
            }
            function Ad(t) {
                return kd(t).replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/%26/gi, '&');
            }
            function Rd(t) {
                return decodeURIComponent(t);
            }
            function Od(t) {
                return Rd(t.replace(/\+/g, '%20'));
            }
            function Id(t) {
                return `${Ad(t.path)}${
                    ((e = t.parameters),
                    Object.keys(e)
                        .map((t) => `;${Ad(t)}=${Ad(e[t])}`)
                        .join(''))
                }`;
                var e;
            }
            const Pd = /^[^\/()?;=#]+/;
            function Ld(t) {
                const e = t.match(Pd);
                return e ? e[0] : '';
            }
            const Dd = /^[^=?&#]+/,
                Nd = /^[^?&#]+/;
            class Fd {
                constructor(t) {
                    (this.url = t), (this.remaining = t);
                }
                parseRootSegment() {
                    return (
                        this.consumeOptional('/'),
                        '' === this.remaining || this.peekStartsWith('?') || this.peekStartsWith('#')
                            ? new _d([], {})
                            : new _d([], this.parseChildren())
                    );
                }
                parseQueryParams() {
                    const t = {};
                    if (this.consumeOptional('?'))
                        do {
                            this.parseQueryParam(t);
                        } while (this.consumeOptional('&'));
                    return t;
                }
                parseFragment() {
                    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;
                }
                parseChildren() {
                    if ('' === this.remaining) return {};
                    this.consumeOptional('/');
                    const t = [];
                    for (
                        this.peekStartsWith('(') || t.push(this.parseSegment());
                        this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(');

                    )
                        this.capture('/'), t.push(this.parseSegment());
                    let e = {};
                    this.peekStartsWith('/(') && (this.capture('/'), (e = this.parseParens(!0)));
                    let n = {};
                    return (
                        this.peekStartsWith('(') && (n = this.parseParens(!1)),
                        (t.length > 0 || Object.keys(e).length > 0) && (n.primary = new _d(t, e)),
                        n
                    );
                }
                parseSegment() {
                    const t = Ld(this.remaining);
                    if ('' === t && this.peekStartsWith(';'))
                        throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);
                    return this.capture(t), new vd(Rd(t), this.parseMatrixParams());
                }
                parseMatrixParams() {
                    const t = {};
                    for (; this.consumeOptional(';'); ) this.parseParam(t);
                    return t;
                }
                parseParam(t) {
                    const e = Ld(this.remaining);
                    if (!e) return;
                    this.capture(e);
                    let n = '';
                    if (this.consumeOptional('=')) {
                        const t = Ld(this.remaining);
                        t && ((n = t), this.capture(n));
                    }
                    t[Rd(e)] = Rd(n);
                }
                parseQueryParam(t) {
                    const e = (function (t) {
                        const e = t.match(Dd);
                        return e ? e[0] : '';
                    })(this.remaining);
                    if (!e) return;
                    this.capture(e);
                    let n = '';
                    if (this.consumeOptional('=')) {
                        const t = (function (t) {
                            const e = t.match(Nd);
                            return e ? e[0] : '';
                        })(this.remaining);
                        t && ((n = t), this.capture(n));
                    }
                    const s = Od(e),
                        r = Od(n);
                    if (t.hasOwnProperty(s)) {
                        let e = t[s];
                        Array.isArray(e) || ((e = [e]), (t[s] = e)), e.push(r);
                    } else t[s] = r;
                }
                parseParens(t) {
                    const e = {};
                    for (this.capture('('); !this.consumeOptional(')') && this.remaining.length > 0; ) {
                        const n = Ld(this.remaining),
                            s = this.remaining[n.length];
                        if ('/' !== s && ')' !== s && ';' !== s) throw new Error(`Cannot parse url '${this.url}'`);
                        let r;
                        n.indexOf(':') > -1 ? ((r = n.substr(0, n.indexOf(':'))), this.capture(r), this.capture(':')) : t && (r = td);
                        const i = this.parseChildren();
                        (e[r] = 1 === Object.keys(i).length ? i.primary : new _d([], i)), this.consumeOptional('//');
                    }
                    return e;
                }
                peekStartsWith(t) {
                    return this.remaining.startsWith(t);
                }
                consumeOptional(t) {
                    return !!this.peekStartsWith(t) && ((this.remaining = this.remaining.substring(t.length)), !0);
                }
                capture(t) {
                    if (!this.consumeOptional(t)) throw new Error(`Expected "${t}".`);
                }
            }
            class Md {
                constructor(t) {
                    this._root = t;
                }
                get root() {
                    return this._root.value;
                }
                parent(t) {
                    const e = this.pathFromRoot(t);
                    return e.length > 1 ? e[e.length - 2] : null;
                }
                children(t) {
                    const e = jd(t, this._root);
                    return e ? e.children.map((t) => t.value) : [];
                }
                firstChild(t) {
                    const e = jd(t, this._root);
                    return e && e.children.length > 0 ? e.children[0].value : null;
                }
                siblings(t) {
                    const e = Hd(t, this._root);
                    return e.length < 2 ? [] : e[e.length - 2].children.map((t) => t.value).filter((e) => e !== t);
                }
                pathFromRoot(t) {
                    return Hd(t, this._root).map((t) => t.value);
                }
            }
            function jd(t, e) {
                if (t === e.value) return e;
                for (const n of e.children) {
                    const e = jd(t, n);
                    if (e) return e;
                }
                return null;
            }
            function Hd(t, e) {
                if (t === e.value) return [e];
                for (const n of e.children) {
                    const s = Hd(t, n);
                    if (s.length) return s.unshift(e), s;
                }
                return [];
            }
            class Bd {
                constructor(t, e) {
                    (this.value = t), (this.children = e);
                }
                toString() {
                    return `TreeNode(${this.value})`;
                }
            }
            function Vd(t) {
                const e = {};
                return t && t.children.forEach((t) => (e[t.value.outlet] = t)), e;
            }
            class Ud extends Md {
                constructor(t, e) {
                    super(t), (this.snapshot = e), Kd(this, t);
                }
                toString() {
                    return this.snapshot.toString();
                }
            }
            function $d(t, e) {
                const n = (function (t, e) {
                        const n = new Wd([], {}, {}, '', {}, td, e, null, t.root, -1, {});
                        return new Qd('', new Bd(n, []));
                    })(t, e),
                    s = new $u([new vd('', {})]),
                    r = new $u({}),
                    i = new $u({}),
                    o = new $u({}),
                    a = new $u(''),
                    l = new zd(s, r, o, a, i, td, e, n.root);
                return (l.snapshot = n.root), new Ud(new Bd(l, []), n);
            }
            class zd {
                constructor(t, e, n, s, r, i, o, a) {
                    (this.url = t),
                        (this.params = e),
                        (this.queryParams = n),
                        (this.fragment = s),
                        (this.data = r),
                        (this.outlet = i),
                        (this.component = o),
                        (this._futureSnapshot = a);
                }
                get routeConfig() {
                    return this._futureSnapshot.routeConfig;
                }
                get root() {
                    return this._routerState.root;
                }
                get parent() {
                    return this._routerState.parent(this);
                }
                get firstChild() {
                    return this._routerState.firstChild(this);
                }
                get children() {
                    return this._routerState.children(this);
                }
                get pathFromRoot() {
                    return this._routerState.pathFromRoot(this);
                }
                get paramMap() {
                    return this._paramMap || (this._paramMap = this.params.pipe(k((t) => nd(t)))), this._paramMap;
                }
                get queryParamMap() {
                    return this._queryParamMap || (this._queryParamMap = this.queryParams.pipe(k((t) => nd(t)))), this._queryParamMap;
                }
                toString() {
                    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
                }
            }
            function qd(t, e = 'emptyOnly') {
                const n = t.pathFromRoot;
                let s = 0;
                if ('always' !== e)
                    for (s = n.length - 1; s >= 1; ) {
                        const t = n[s],
                            e = n[s - 1];
                        if (t.routeConfig && '' === t.routeConfig.path) s--;
                        else {
                            if (e.component) break;
                            s--;
                        }
                    }
                return (function (t) {
                    return t.reduce(
                        (t, e) => ({
                            params: Object.assign(Object.assign({}, t.params), e.params),
                            data: Object.assign(Object.assign({}, t.data), e.data),
                            resolve: Object.assign(Object.assign({}, t.resolve), e._resolvedData),
                        }),
                        { params: {}, data: {}, resolve: {} }
                    );
                })(n.slice(s));
            }
            class Wd {
                constructor(t, e, n, s, r, i, o, a, l, c, u) {
                    (this.url = t),
                        (this.params = e),
                        (this.queryParams = n),
                        (this.fragment = s),
                        (this.data = r),
                        (this.outlet = i),
                        (this.component = o),
                        (this.routeConfig = a),
                        (this._urlSegment = l),
                        (this._lastPathIndex = c),
                        (this._resolve = u);
                }
                get root() {
                    return this._routerState.root;
                }
                get parent() {
                    return this._routerState.parent(this);
                }
                get firstChild() {
                    return this._routerState.firstChild(this);
                }
                get children() {
                    return this._routerState.children(this);
                }
                get pathFromRoot() {
                    return this._routerState.pathFromRoot(this);
                }
                get paramMap() {
                    return this._paramMap || (this._paramMap = nd(this.params)), this._paramMap;
                }
                get queryParamMap() {
                    return this._queryParamMap || (this._queryParamMap = nd(this.queryParams)), this._queryParamMap;
                }
                toString() {
                    return `Route(url:'${this.url.map((t) => t.toString()).join('/')}', path:'${
                        this.routeConfig ? this.routeConfig.path : ''
                    }')`;
                }
            }
            class Qd extends Md {
                constructor(t, e) {
                    super(e), (this.url = t), Kd(this, e);
                }
                toString() {
                    return Zd(this._root);
                }
            }
            function Kd(t, e) {
                (e.value._routerState = t), e.children.forEach((e) => Kd(t, e));
            }
            function Zd(t) {
                const e = t.children.length > 0 ? ` { ${t.children.map(Zd).join(', ')} } ` : '';
                return `${t.value}${e}`;
            }
            function Yd(t) {
                if (t.snapshot) {
                    const e = t.snapshot,
                        n = t._futureSnapshot;
                    (t.snapshot = n),
                        id(e.queryParams, n.queryParams) || t.queryParams.next(n.queryParams),
                        e.fragment !== n.fragment && t.fragment.next(n.fragment),
                        id(e.params, n.params) || t.params.next(n.params),
                        (function (t, e) {
                            if (t.length !== e.length) return !1;
                            for (let n = 0; n < t.length; ++n) if (!id(t[n], e[n])) return !1;
                            return !0;
                        })(e.url, n.url) || t.url.next(n.url),
                        id(e.data, n.data) || t.data.next(n.data);
                } else (t.snapshot = t._futureSnapshot), t.data.next(t._futureSnapshot.data);
            }
            function Gd(t, e) {
                var n, s;
                return (
                    id(t.params, e.params) &&
                    bd((n = t.url), (s = e.url)) &&
                    n.every((t, e) => id(t.parameters, s[e].parameters)) &&
                    !(!t.parent != !e.parent) &&
                    (!t.parent || Gd(t.parent, e.parent))
                );
            }
            function Xd(t, e, n) {
                if (n && t.shouldReuseRoute(e.value, n.value.snapshot)) {
                    const s = n.value;
                    s._futureSnapshot = e.value;
                    const r = (function (t, e, n) {
                        return e.children.map((e) => {
                            for (const s of n.children) if (t.shouldReuseRoute(e.value, s.value.snapshot)) return Xd(t, e, s);
                            return Xd(t, e);
                        });
                    })(t, e, n);
                    return new Bd(s, r);
                }
                {
                    if (t.shouldAttach(e.value)) {
                        const n = t.retrieve(e.value);
                        if (null !== n) {
                            const t = n.route;
                            return Jd(e, t), t;
                        }
                    }
                    const n = new zd(
                            new $u((s = e.value).url),
                            new $u(s.params),
                            new $u(s.queryParams),
                            new $u(s.fragment),
                            new $u(s.data),
                            s.outlet,
                            s.component,
                            s
                        ),
                        r = e.children.map((e) => Xd(t, e));
                    return new Bd(n, r);
                }
                var s;
            }
            function Jd(t, e) {
                if (t.value.routeConfig !== e.value.routeConfig)
                    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
                if (t.children.length !== e.children.length)
                    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
                e.value._futureSnapshot = t.value;
                for (let n = 0; n < t.children.length; ++n) Jd(t.children[n], e.children[n]);
            }
            function tp(t) {
                return 'object' == typeof t && null != t && !t.outlets && !t.segmentPath;
            }
            function ep(t) {
                return 'object' == typeof t && null != t && t.outlets;
            }
            function np(t, e, n, s, r) {
                let i = {};
                return (
                    s &&
                        cd(s, (t, e) => {
                            i[e] = Array.isArray(t) ? t.map((t) => `${t}`) : `${t}`;
                        }),
                    new yd(n.root === t ? e : sp(n.root, t, e), i, r)
                );
            }
            function sp(t, e, n) {
                const s = {};
                return (
                    cd(t.children, (t, r) => {
                        s[r] = t === e ? n : sp(t, e, n);
                    }),
                    new _d(t.segments, s)
                );
            }
            class rp {
                constructor(t, e, n) {
                    if (((this.isAbsolute = t), (this.numberOfDoubleDots = e), (this.commands = n), t && n.length > 0 && tp(n[0])))
                        throw new Error('Root segment cannot have matrix parameters');
                    const s = n.find(ep);
                    if (s && s !== ld(n)) throw new Error('{outlets:{}} has to be the last command');
                }
                toRoot() {
                    return this.isAbsolute && 1 === this.commands.length && '/' == this.commands[0];
                }
            }
            class ip {
                constructor(t, e, n) {
                    (this.segmentGroup = t), (this.processChildren = e), (this.index = n);
                }
            }
            function op(t, e, n) {
                if ((t || (t = new _d([], {})), 0 === t.segments.length && t.hasChildren())) return ap(t, e, n);
                const s = (function (t, e, n) {
                        let s = 0,
                            r = e;
                        const i = { match: !1, pathIndex: 0, commandIndex: 0 };
                        for (; r < t.segments.length; ) {
                            if (s >= n.length) return i;
                            const e = t.segments[r],
                                o = n[s];
                            if (ep(o)) break;
                            const a = `${o}`,
                                l = s < n.length - 1 ? n[s + 1] : null;
                            if (r > 0 && void 0 === a) break;
                            if (a && l && 'object' == typeof l && void 0 === l.outlets) {
                                if (!hp(a, l, e)) return i;
                                s += 2;
                            } else {
                                if (!hp(a, {}, e)) return i;
                                s++;
                            }
                            r++;
                        }
                        return { match: !0, pathIndex: r, commandIndex: s };
                    })(t, e, n),
                    r = n.slice(s.commandIndex);
                if (s.match && s.pathIndex < t.segments.length) {
                    const e = new _d(t.segments.slice(0, s.pathIndex), {});
                    return (e.children.primary = new _d(t.segments.slice(s.pathIndex), t.children)), ap(e, 0, r);
                }
                return s.match && 0 === r.length
                    ? new _d(t.segments, {})
                    : s.match && !t.hasChildren()
                    ? lp(t, e, n)
                    : s.match
                    ? ap(t, 0, r)
                    : lp(t, e, n);
            }
            function ap(t, e, n) {
                if (0 === n.length) return new _d(t.segments, {});
                {
                    const s = (function (t) {
                            return ep(t[0]) ? t[0].outlets : { [td]: t };
                        })(n),
                        r = {};
                    return (
                        cd(s, (n, s) => {
                            'string' == typeof n && (n = [n]), null !== n && (r[s] = op(t.children[s], e, n));
                        }),
                        cd(t.children, (t, e) => {
                            void 0 === s[e] && (r[e] = t);
                        }),
                        new _d(t.segments, r)
                    );
                }
            }
            function lp(t, e, n) {
                const s = t.segments.slice(0, e);
                let r = 0;
                for (; r < n.length; ) {
                    const i = n[r];
                    if (ep(i)) {
                        const t = cp(i.outlets);
                        return new _d(s, t);
                    }
                    if (0 === r && tp(n[0])) {
                        s.push(new vd(t.segments[e].path, up(n[0]))), r++;
                        continue;
                    }
                    const o = ep(i) ? i.outlets.primary : `${i}`,
                        a = r < n.length - 1 ? n[r + 1] : null;
                    o && a && tp(a) ? (s.push(new vd(o, up(a))), (r += 2)) : (s.push(new vd(o, {})), r++);
                }
                return new _d(s, {});
            }
            function cp(t) {
                const e = {};
                return (
                    cd(t, (t, n) => {
                        'string' == typeof t && (t = [t]), null !== t && (e[n] = lp(new _d([], {}), 0, t));
                    }),
                    e
                );
            }
            function up(t) {
                const e = {};
                return cd(t, (t, n) => (e[n] = `${t}`)), e;
            }
            function hp(t, e, n) {
                return t == n.path && id(e, n.parameters);
            }
            class dp {
                constructor(t, e, n, s) {
                    (this.routeReuseStrategy = t), (this.futureState = e), (this.currState = n), (this.forwardEvent = s);
                }
                activate(t) {
                    const e = this.futureState._root,
                        n = this.currState ? this.currState._root : null;
                    this.deactivateChildRoutes(e, n, t), Yd(this.futureState.root), this.activateChildRoutes(e, n, t);
                }
                deactivateChildRoutes(t, e, n) {
                    const s = Vd(e);
                    t.children.forEach((t) => {
                        const e = t.value.outlet;
                        this.deactivateRoutes(t, s[e], n), delete s[e];
                    }),
                        cd(s, (t, e) => {
                            this.deactivateRouteAndItsChildren(t, n);
                        });
                }
                deactivateRoutes(t, e, n) {
                    const s = t.value,
                        r = e ? e.value : null;
                    if (s === r)
                        if (s.component) {
                            const r = n.getContext(s.outlet);
                            r && this.deactivateChildRoutes(t, e, r.children);
                        } else this.deactivateChildRoutes(t, e, n);
                    else r && this.deactivateRouteAndItsChildren(e, n);
                }
                deactivateRouteAndItsChildren(t, e) {
                    this.routeReuseStrategy.shouldDetach(t.value.snapshot)
                        ? this.detachAndStoreRouteSubtree(t, e)
                        : this.deactivateRouteAndOutlet(t, e);
                }
                detachAndStoreRouteSubtree(t, e) {
                    const n = e.getContext(t.value.outlet);
                    if (n && n.outlet) {
                        const e = n.outlet.detach(),
                            s = n.children.onOutletDeactivated();
                        this.routeReuseStrategy.store(t.value.snapshot, { componentRef: e, route: t, contexts: s });
                    }
                }
                deactivateRouteAndOutlet(t, e) {
                    const n = e.getContext(t.value.outlet),
                        s = n && t.value.component ? n.children : e,
                        r = Vd(t);
                    for (const i of Object.keys(r)) this.deactivateRouteAndItsChildren(r[i], s);
                    n &&
                        n.outlet &&
                        (n.outlet.deactivate(),
                        n.children.onOutletDeactivated(),
                        (n.attachRef = null),
                        (n.resolver = null),
                        (n.route = null));
                }
                activateChildRoutes(t, e, n) {
                    const s = Vd(e);
                    t.children.forEach((t) => {
                        this.activateRoutes(t, s[t.value.outlet], n), this.forwardEvent(new Xh(t.value.snapshot));
                    }),
                        t.children.length && this.forwardEvent(new Yh(t.value.snapshot));
                }
                activateRoutes(t, e, n) {
                    const s = t.value,
                        r = e ? e.value : null;
                    if ((Yd(s), s === r))
                        if (s.component) {
                            const r = n.getOrCreateContext(s.outlet);
                            this.activateChildRoutes(t, e, r.children);
                        } else this.activateChildRoutes(t, e, n);
                    else if (s.component) {
                        const e = n.getOrCreateContext(s.outlet);
                        if (this.routeReuseStrategy.shouldAttach(s.snapshot)) {
                            const t = this.routeReuseStrategy.retrieve(s.snapshot);
                            this.routeReuseStrategy.store(s.snapshot, null),
                                e.children.onOutletReAttached(t.contexts),
                                (e.attachRef = t.componentRef),
                                (e.route = t.route.value),
                                e.outlet && e.outlet.attach(t.componentRef, t.route.value),
                                pp(t.route);
                        } else {
                            const n = (function (t) {
                                    for (let e = t.parent; e; e = e.parent) {
                                        const t = e.routeConfig;
                                        if (t && t._loadedConfig) return t._loadedConfig;
                                        if (t && t.component) return null;
                                    }
                                    return null;
                                })(s.snapshot),
                                r = n ? n.module.componentFactoryResolver : null;
                            (e.attachRef = null),
                                (e.route = s),
                                (e.resolver = r),
                                e.outlet && e.outlet.activateWith(s, r),
                                this.activateChildRoutes(t, null, e.children);
                        }
                    } else this.activateChildRoutes(t, null, n);
                }
            }
            function pp(t) {
                Yd(t.value), t.children.forEach(pp);
            }
            class fp {
                constructor(t, e) {
                    (this.routes = t), (this.module = e);
                }
            }
            function mp(t) {
                return 'function' == typeof t;
            }
            function gp(t) {
                return t instanceof yd;
            }
            const yp = Symbol('INITIAL_VALUE');
            function _p() {
                return eh((t) =>
                    (function (...t) {
                        let e, n;
                        return (
                            C(t[t.length - 1]) && (n = t.pop()),
                            'function' == typeof t[t.length - 1] && (e = t.pop()),
                            1 === t.length && l(t[0]) && (t = t[0]),
                            $(t, n).lift(new Ku(e))
                        );
                    })(t.map((t) => t.pipe(ih(1), lh(yp)))).pipe(
                        ch((t, e) => {
                            let n = !1;
                            return e.reduce((t, s, r) => {
                                if (t !== yp) return t;
                                if ((s === yp && (n = !0), !n)) {
                                    if (!1 === s) return s;
                                    if (r === e.length - 1 || gp(s)) return s;
                                }
                                return t;
                            }, t);
                        }, yp),
                        dh((t) => t !== yp),
                        k((t) => (gp(t) ? t : !0 === t)),
                        ih(1)
                    )
                );
            }
            let vp = (() => {
                class t {}
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵcmp = Ut({
                        type: t,
                        selectors: [['ng-component']],
                        decls: 1,
                        vars: 0,
                        template: function (t, e) {
                            1 & t && vo(0, 'router-outlet');
                        },
                        directives: function () {
                            return [bf];
                        },
                        encapsulation: 2,
                    })),
                    t
                );
            })();
            function bp(t, e = '') {
                for (let n = 0; n < t.length; n++) {
                    const s = t[n];
                    wp(s, xp(e, s));
                }
            }
            function wp(t, e) {
                t.children && bp(t.children, e);
            }
            function xp(t, e) {
                return e ? (t || e.path ? (t && !e.path ? `${t}/` : !t && e.path ? e.path : `${t}/${e.path}`) : '') : t;
            }
            function Sp(t) {
                const e = t.children && t.children.map(Sp),
                    n = e ? Object.assign(Object.assign({}, t), { children: e }) : Object.assign({}, t);
                return !n.component && (e || n.loadChildren) && n.outlet && n.outlet !== td && (n.component = vp), n;
            }
            function Ep(t) {
                return t.outlet || td;
            }
            function Cp(t, e) {
                const n = t.filter((t) => Ep(t) === e);
                return n.push(...t.filter((t) => Ep(t) !== e)), n;
            }
            const kp = { matched: !1, consumedSegments: [], lastChild: 0, parameters: {}, positionalParamSegments: {} };
            function Tp(t, e, n) {
                var s;
                if ('' === e.path)
                    return 'full' === e.pathMatch && (t.hasChildren() || n.length > 0)
                        ? Object.assign({}, kp)
                        : { matched: !0, consumedSegments: [], lastChild: 0, parameters: {}, positionalParamSegments: {} };
                const r = (e.matcher || rd)(n, t, e);
                if (!r) return Object.assign({}, kp);
                const i = {};
                cd(r.posParams, (t, e) => {
                    i[e] = t.path;
                });
                const o = r.consumed.length > 0 ? Object.assign(Object.assign({}, i), r.consumed[r.consumed.length - 1].parameters) : i;
                return {
                    matched: !0,
                    consumedSegments: r.consumed,
                    lastChild: r.consumed.length,
                    parameters: o,
                    positionalParamSegments: null !== (s = r.posParams) && void 0 !== s ? s : {},
                };
            }
            function Ap(t, e, n, s, r = 'corrected') {
                if (
                    n.length > 0 &&
                    (function (t, e, n) {
                        return n.some((n) => Rp(t, e, n) && Ep(n) !== td);
                    })(t, n, s)
                ) {
                    const r = new _d(
                        e,
                        (function (t, e, n, s) {
                            const r = {};
                            (r.primary = s), (s._sourceSegment = t), (s._segmentIndexShift = e.length);
                            for (const i of n)
                                if ('' === i.path && Ep(i) !== td) {
                                    const n = new _d([], {});
                                    (n._sourceSegment = t), (n._segmentIndexShift = e.length), (r[Ep(i)] = n);
                                }
                            return r;
                        })(t, e, s, new _d(n, t.children))
                    );
                    return (r._sourceSegment = t), (r._segmentIndexShift = e.length), { segmentGroup: r, slicedSegments: [] };
                }
                if (
                    0 === n.length &&
                    (function (t, e, n) {
                        return n.some((n) => Rp(t, e, n));
                    })(t, n, s)
                ) {
                    const i = new _d(
                        t.segments,
                        (function (t, e, n, s, r, i) {
                            const o = {};
                            for (const a of s)
                                if (Rp(t, n, a) && !r[Ep(a)]) {
                                    const n = new _d([], {});
                                    (n._sourceSegment = t),
                                        (n._segmentIndexShift = 'legacy' === i ? t.segments.length : e.length),
                                        (o[Ep(a)] = n);
                                }
                            return Object.assign(Object.assign({}, r), o);
                        })(t, e, n, s, t.children, r)
                    );
                    return (i._sourceSegment = t), (i._segmentIndexShift = e.length), { segmentGroup: i, slicedSegments: n };
                }
                const i = new _d(t.segments, t.children);
                return (i._sourceSegment = t), (i._segmentIndexShift = e.length), { segmentGroup: i, slicedSegments: n };
            }
            function Rp(t, e, n) {
                return (!(t.hasChildren() || e.length > 0) || 'full' !== n.pathMatch) && '' === n.path;
            }
            function Op(t, e, n, s) {
                return !!(Ep(t) === s || (s !== td && Rp(e, n, t))) && ('**' === t.path || Tp(e, t, n).matched);
            }
            function Ip(t, e, n) {
                return 0 === e.length && !t.children[n];
            }
            class Pp {
                constructor(t) {
                    this.segmentGroup = t || null;
                }
            }
            class Lp {
                constructor(t) {
                    this.urlTree = t;
                }
            }
            function Dp(t) {
                return new _((e) => e.error(new Pp(t)));
            }
            function Np(t) {
                return new _((e) => e.error(new Lp(t)));
            }
            function Fp(t) {
                return new _((e) => e.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${t}'`)));
            }
            class Mp {
                constructor(t, e, n, s, r) {
                    (this.configLoader = e),
                        (this.urlSerializer = n),
                        (this.urlTree = s),
                        (this.config = r),
                        (this.allowRedirects = !0),
                        (this.ngModule = t.get(Va));
                }
                apply() {
                    const t = Ap(this.urlTree.root, [], [], this.config).segmentGroup,
                        e = new _d(t.segments, t.children);
                    return this.expandSegmentGroup(this.ngModule, this.config, e, td)
                        .pipe(k((t) => this.createUrlTree(jp(t), this.urlTree.queryParams, this.urlTree.fragment)))
                        .pipe(
                            mh((t) => {
                                if (t instanceof Lp) return (this.allowRedirects = !1), this.match(t.urlTree);
                                if (t instanceof Pp) throw this.noMatchError(t);
                                throw t;
                            })
                        );
                }
                match(t) {
                    return this.expandSegmentGroup(this.ngModule, this.config, t.root, td)
                        .pipe(k((e) => this.createUrlTree(jp(e), t.queryParams, t.fragment)))
                        .pipe(
                            mh((t) => {
                                if (t instanceof Pp) throw this.noMatchError(t);
                                throw t;
                            })
                        );
                }
                noMatchError(t) {
                    return new Error(`Cannot match any routes. URL Segment: '${t.segmentGroup}'`);
                }
                createUrlTree(t, e, n) {
                    const s = t.segments.length > 0 ? new _d([], { [td]: t }) : t;
                    return new yd(s, e, n);
                }
                expandSegmentGroup(t, e, n, s) {
                    return 0 === n.segments.length && n.hasChildren()
                        ? this.expandChildren(t, e, n).pipe(k((t) => new _d([], t)))
                        : this.expandSegment(t, n, e, n.segments, s, !0);
                }
                expandChildren(t, e, n) {
                    const s = [];
                    for (const r of Object.keys(n.children)) 'primary' === r ? s.unshift(r) : s.push(r);
                    return N(s).pipe(
                        _h((s) => {
                            const r = n.children[s],
                                i = Cp(e, s);
                            return this.expandSegmentGroup(t, i, r, s).pipe(k((t) => ({ segment: t, outlet: s })));
                        }),
                        ch((t, e) => ((t[e.outlet] = e.segment), t), {}),
                        (function (t, e) {
                            const n = arguments.length >= 2;
                            return (s) => s.pipe(t ? dh((e, n) => t(e, n, s)) : y, vh(1), n ? kh(e) : xh(() => new Yu()));
                        })()
                    );
                }
                expandSegment(t, e, n, s, r, i) {
                    return N(n).pipe(
                        _h((o) =>
                            this.expandSegmentAgainstRoute(t, e, n, o, s, r, i).pipe(
                                mh((t) => {
                                    if (t instanceof Pp) return Uu(null);
                                    throw t;
                                })
                            )
                        ),
                        Rh((t) => !!t),
                        mh((t, n) => {
                            if (t instanceof Yu || 'EmptyError' === t.name) {
                                if (Ip(e, s, r)) return Uu(new _d([], {}));
                                throw new Pp(e);
                            }
                            throw t;
                        })
                    );
                }
                expandSegmentAgainstRoute(t, e, n, s, r, i, o) {
                    return Op(s, e, r, i)
                        ? void 0 === s.redirectTo
                            ? this.matchSegmentAgainstRoute(t, e, s, r, i)
                            : o && this.allowRedirects
                            ? this.expandSegmentAgainstRouteUsingRedirect(t, e, n, s, r, i)
                            : Dp(e)
                        : Dp(e);
                }
                expandSegmentAgainstRouteUsingRedirect(t, e, n, s, r, i) {
                    return '**' === s.path
                        ? this.expandWildCardWithParamsAgainstRouteUsingRedirect(t, n, s, i)
                        : this.expandRegularSegmentAgainstRouteUsingRedirect(t, e, n, s, r, i);
                }
                expandWildCardWithParamsAgainstRouteUsingRedirect(t, e, n, s) {
                    const r = this.applyRedirectCommands([], n.redirectTo, {});
                    return n.redirectTo.startsWith('/')
                        ? Np(r)
                        : this.lineralizeSegments(n, r).pipe(
                              H((n) => {
                                  const r = new _d(n, {});
                                  return this.expandSegment(t, r, e, n, s, !1);
                              })
                          );
                }
                expandRegularSegmentAgainstRouteUsingRedirect(t, e, n, s, r, i) {
                    const { matched: o, consumedSegments: a, lastChild: l, positionalParamSegments: c } = Tp(e, s, r);
                    if (!o) return Dp(e);
                    const u = this.applyRedirectCommands(a, s.redirectTo, c);
                    return s.redirectTo.startsWith('/')
                        ? Np(u)
                        : this.lineralizeSegments(s, u).pipe(H((s) => this.expandSegment(t, e, n, s.concat(r.slice(l)), i, !1)));
                }
                matchSegmentAgainstRoute(t, e, n, s, r) {
                    if ('**' === n.path)
                        return n.loadChildren
                            ? (n._loadedConfig ? Uu(n._loadedConfig) : this.configLoader.load(t.injector, n)).pipe(
                                  k((t) => ((n._loadedConfig = t), new _d(s, {})))
                              )
                            : Uu(new _d(s, {}));
                    const { matched: i, consumedSegments: o, lastChild: a } = Tp(e, n, s);
                    if (!i) return Dp(e);
                    const l = s.slice(a);
                    return this.getChildConfig(t, n, s).pipe(
                        H((t) => {
                            const s = t.module,
                                i = t.routes,
                                { segmentGroup: a, slicedSegments: c } = Ap(e, o, l, i),
                                u = new _d(a.segments, a.children);
                            if (0 === c.length && u.hasChildren()) return this.expandChildren(s, i, u).pipe(k((t) => new _d(o, t)));
                            if (0 === i.length && 0 === c.length) return Uu(new _d(o, {}));
                            const h = Ep(n) === r;
                            return this.expandSegment(s, u, i, c, h ? td : r, !0).pipe(k((t) => new _d(o.concat(t.segments), t.children)));
                        })
                    );
                }
                getChildConfig(t, e, n) {
                    return e.children
                        ? Uu(new fp(e.children, t))
                        : e.loadChildren
                        ? void 0 !== e._loadedConfig
                            ? Uu(e._loadedConfig)
                            : this.runCanLoadGuards(t.injector, e, n).pipe(
                                  H((n) =>
                                      n
                                          ? this.configLoader.load(t.injector, e).pipe(k((t) => ((e._loadedConfig = t), t)))
                                          : (function (t) {
                                                return new _((e) =>
                                                    e.error(
                                                        sd(
                                                            `Cannot load children because the guard of the route "path: '${t.path}'" returned false`
                                                        )
                                                    )
                                                );
                                            })(e)
                                  )
                              )
                        : Uu(new fp([], t));
                }
                runCanLoadGuards(t, e, n) {
                    const s = e.canLoad;
                    return s && 0 !== s.length
                        ? Uu(
                              s.map((s) => {
                                  const r = t.get(s);
                                  let i;
                                  if (
                                      (function (t) {
                                          return t && mp(t.canLoad);
                                      })(r)
                                  )
                                      i = r.canLoad(e, n);
                                  else {
                                      if (!mp(r)) throw new Error('Invalid CanLoad guard');
                                      i = r(e, n);
                                  }
                                  return ud(i);
                              })
                          ).pipe(
                              _p(),
                              Ih((t) => {
                                  if (!gp(t)) return;
                                  const e = sd(`Redirecting to "${this.urlSerializer.serialize(t)}"`);
                                  throw ((e.url = t), e);
                              }),
                              k((t) => !0 === t)
                          )
                        : Uu(!0);
                }
                lineralizeSegments(t, e) {
                    let n = [],
                        s = e.root;
                    for (;;) {
                        if (((n = n.concat(s.segments)), 0 === s.numberOfChildren)) return Uu(n);
                        if (s.numberOfChildren > 1 || !s.children.primary) return Fp(t.redirectTo);
                        s = s.children.primary;
                    }
                }
                applyRedirectCommands(t, e, n) {
                    return this.applyRedirectCreatreUrlTree(e, this.urlSerializer.parse(e), t, n);
                }
                applyRedirectCreatreUrlTree(t, e, n, s) {
                    const r = this.createSegmentGroup(t, e.root, n, s);
                    return new yd(r, this.createQueryParams(e.queryParams, this.urlTree.queryParams), e.fragment);
                }
                createQueryParams(t, e) {
                    const n = {};
                    return (
                        cd(t, (t, s) => {
                            if ('string' == typeof t && t.startsWith(':')) {
                                const r = t.substring(1);
                                n[s] = e[r];
                            } else n[s] = t;
                        }),
                        n
                    );
                }
                createSegmentGroup(t, e, n, s) {
                    const r = this.createSegments(t, e.segments, n, s);
                    let i = {};
                    return (
                        cd(e.children, (e, r) => {
                            i[r] = this.createSegmentGroup(t, e, n, s);
                        }),
                        new _d(r, i)
                    );
                }
                createSegments(t, e, n, s) {
                    return e.map((e) => (e.path.startsWith(':') ? this.findPosParam(t, e, s) : this.findOrReturn(e, n)));
                }
                findPosParam(t, e, n) {
                    const s = n[e.path.substring(1)];
                    if (!s) throw new Error(`Cannot redirect to '${t}'. Cannot find '${e.path}'.`);
                    return s;
                }
                findOrReturn(t, e) {
                    let n = 0;
                    for (const s of e) {
                        if (s.path === t.path) return e.splice(n), s;
                        n++;
                    }
                    return t;
                }
            }
            function jp(t) {
                const e = {};
                for (const n of Object.keys(t.children)) {
                    const s = jp(t.children[n]);
                    (s.segments.length > 0 || s.hasChildren()) && (e[n] = s);
                }
                return (function (t) {
                    if (1 === t.numberOfChildren && t.children.primary) {
                        const e = t.children.primary;
                        return new _d(t.segments.concat(e.segments), e.children);
                    }
                    return t;
                })(new _d(t.segments, e));
            }
            class Hp {
                constructor(t) {
                    (this.path = t), (this.route = this.path[this.path.length - 1]);
                }
            }
            class Bp {
                constructor(t, e) {
                    (this.component = t), (this.route = e);
                }
            }
            function Vp(t, e, n) {
                const s = t._root;
                return $p(s, e ? e._root : null, n, [s.value]);
            }
            function Up(t, e, n) {
                const s = (function (t) {
                    if (!t) return null;
                    for (let e = t.parent; e; e = e.parent) {
                        const t = e.routeConfig;
                        if (t && t._loadedConfig) return t._loadedConfig;
                    }
                    return null;
                })(e);
                return (s ? s.module.injector : n).get(t);
            }
            function $p(t, e, n, s, r = { canDeactivateChecks: [], canActivateChecks: [] }) {
                const i = Vd(e);
                return (
                    t.children.forEach((t) => {
                        !(function (t, e, n, s, r = { canDeactivateChecks: [], canActivateChecks: [] }) {
                            const i = t.value,
                                o = e ? e.value : null,
                                a = n ? n.getContext(t.value.outlet) : null;
                            if (o && i.routeConfig === o.routeConfig) {
                                const l = (function (t, e, n) {
                                    if ('function' == typeof n) return n(t, e);
                                    switch (n) {
                                        case 'pathParamsChange':
                                            return !bd(t.url, e.url);
                                        case 'pathParamsOrQueryParamsChange':
                                            return !bd(t.url, e.url) || !id(t.queryParams, e.queryParams);
                                        case 'always':
                                            return !0;
                                        case 'paramsOrQueryParamsChange':
                                            return !Gd(t, e) || !id(t.queryParams, e.queryParams);
                                        case 'paramsChange':
                                        default:
                                            return !Gd(t, e);
                                    }
                                })(o, i, i.routeConfig.runGuardsAndResolvers);
                                l ? r.canActivateChecks.push(new Hp(s)) : ((i.data = o.data), (i._resolvedData = o._resolvedData)),
                                    $p(t, e, i.component ? (a ? a.children : null) : n, s, r),
                                    l && a && a.outlet && a.outlet.isActivated && r.canDeactivateChecks.push(new Bp(a.outlet.component, o));
                            } else
                                o && zp(e, a, r),
                                    r.canActivateChecks.push(new Hp(s)),
                                    $p(t, null, i.component ? (a ? a.children : null) : n, s, r);
                        })(t, i[t.value.outlet], n, s.concat([t.value]), r),
                            delete i[t.value.outlet];
                    }),
                    cd(i, (t, e) => zp(t, n.getContext(e), r)),
                    r
                );
            }
            function zp(t, e, n) {
                const s = Vd(t),
                    r = t.value;
                cd(s, (t, s) => {
                    zp(t, r.component ? (e ? e.children.getContext(s) : null) : e, n);
                }),
                    n.canDeactivateChecks.push(new Bp(r.component && e && e.outlet && e.outlet.isActivated ? e.outlet.component : null, r));
            }
            class qp {}
            function Wp(t) {
                return new _((e) => e.error(t));
            }
            class Qp {
                constructor(t, e, n, s, r, i) {
                    (this.rootComponentType = t),
                        (this.config = e),
                        (this.urlTree = n),
                        (this.url = s),
                        (this.paramsInheritanceStrategy = r),
                        (this.relativeLinkResolution = i);
                }
                recognize() {
                    const t = Ap(
                            this.urlTree.root,
                            [],
                            [],
                            this.config.filter((t) => void 0 === t.redirectTo),
                            this.relativeLinkResolution
                        ).segmentGroup,
                        e = this.processSegmentGroup(this.config, t, td);
                    if (null === e) return null;
                    const n = new Wd(
                            [],
                            Object.freeze({}),
                            Object.freeze(Object.assign({}, this.urlTree.queryParams)),
                            this.urlTree.fragment,
                            {},
                            td,
                            this.rootComponentType,
                            null,
                            this.urlTree.root,
                            -1,
                            {}
                        ),
                        s = new Bd(n, e),
                        r = new Qd(this.url, s);
                    return this.inheritParamsAndData(r._root), r;
                }
                inheritParamsAndData(t) {
                    const e = t.value,
                        n = qd(e, this.paramsInheritanceStrategy);
                    (e.params = Object.freeze(n.params)),
                        (e.data = Object.freeze(n.data)),
                        t.children.forEach((t) => this.inheritParamsAndData(t));
                }
                processSegmentGroup(t, e, n) {
                    return 0 === e.segments.length && e.hasChildren()
                        ? this.processChildren(t, e)
                        : this.processSegment(t, e, e.segments, n);
                }
                processChildren(t, e) {
                    const n = [];
                    for (const r of Object.keys(e.children)) {
                        const s = e.children[r],
                            i = Cp(t, r),
                            o = this.processSegmentGroup(i, s, r);
                        if (null === o) return null;
                        n.push(...o);
                    }
                    const s = Zp(n);
                    return (
                        s.sort((t, e) =>
                            t.value.outlet === td ? -1 : e.value.outlet === td ? 1 : t.value.outlet.localeCompare(e.value.outlet)
                        ),
                        s
                    );
                }
                processSegment(t, e, n, s) {
                    for (const r of t) {
                        const t = this.processSegmentAgainstRoute(r, e, n, s);
                        if (null !== t) return t;
                    }
                    return Ip(e, n, s) ? [] : null;
                }
                processSegmentAgainstRoute(t, e, n, s) {
                    if (t.redirectTo || !Op(t, e, n, s)) return null;
                    let r,
                        i = [],
                        o = [];
                    if ('**' === t.path) {
                        const s = n.length > 0 ? ld(n).parameters : {};
                        r = new Wd(
                            n,
                            s,
                            Object.freeze(Object.assign({}, this.urlTree.queryParams)),
                            this.urlTree.fragment,
                            Xp(t),
                            Ep(t),
                            t.component,
                            t,
                            Yp(e),
                            Gp(e) + n.length,
                            Jp(t)
                        );
                    } else {
                        const s = Tp(e, t, n);
                        if (!s.matched) return null;
                        (i = s.consumedSegments),
                            (o = n.slice(s.lastChild)),
                            (r = new Wd(
                                i,
                                s.parameters,
                                Object.freeze(Object.assign({}, this.urlTree.queryParams)),
                                this.urlTree.fragment,
                                Xp(t),
                                Ep(t),
                                t.component,
                                t,
                                Yp(e),
                                Gp(e) + i.length,
                                Jp(t)
                            ));
                    }
                    const a = (function (t) {
                            return t.children ? t.children : t.loadChildren ? t._loadedConfig.routes : [];
                        })(t),
                        { segmentGroup: l, slicedSegments: c } = Ap(
                            e,
                            i,
                            o,
                            a.filter((t) => void 0 === t.redirectTo),
                            this.relativeLinkResolution
                        );
                    if (0 === c.length && l.hasChildren()) {
                        const t = this.processChildren(a, l);
                        return null === t ? null : [new Bd(r, t)];
                    }
                    if (0 === a.length && 0 === c.length) return [new Bd(r, [])];
                    const u = Ep(t) === s,
                        h = this.processSegment(a, l, c, u ? td : s);
                    return null === h ? null : [new Bd(r, h)];
                }
            }
            function Kp(t) {
                const e = t.value.routeConfig;
                return e && '' === e.path && void 0 === e.redirectTo;
            }
            function Zp(t) {
                const e = [],
                    n = new Set();
                for (const s of t) {
                    if (!Kp(s)) {
                        e.push(s);
                        continue;
                    }
                    const t = e.find((t) => s.value.routeConfig === t.value.routeConfig);
                    void 0 !== t ? (t.children.push(...s.children), n.add(t)) : e.push(s);
                }
                for (const s of n) {
                    const t = Zp(s.children);
                    e.push(new Bd(s.value, t));
                }
                return e.filter((t) => !n.has(t));
            }
            function Yp(t) {
                let e = t;
                for (; e._sourceSegment; ) e = e._sourceSegment;
                return e;
            }
            function Gp(t) {
                let e = t,
                    n = e._segmentIndexShift ? e._segmentIndexShift : 0;
                for (; e._sourceSegment; ) (e = e._sourceSegment), (n += e._segmentIndexShift ? e._segmentIndexShift : 0);
                return n - 1;
            }
            function Xp(t) {
                return t.data || {};
            }
            function Jp(t) {
                return t.resolve || {};
            }
            function tf(t) {
                return eh((e) => {
                    const n = t(e);
                    return n ? N(n).pipe(k(() => e)) : Uu(e);
                });
            }
            class ef {}
            class nf extends class {
                shouldDetach(t) {
                    return !1;
                }
                store(t, e) {}
                shouldAttach(t) {
                    return !1;
                }
                retrieve(t) {
                    return null;
                }
                shouldReuseRoute(t, e) {
                    return t.routeConfig === e.routeConfig;
                }
            } {}
            const sf = new $n('ROUTES');
            class rf {
                constructor(t, e, n, s) {
                    (this.loader = t), (this.compiler = e), (this.onLoadStartListener = n), (this.onLoadEndListener = s);
                }
                load(t, e) {
                    if (e._loader$) return e._loader$;
                    this.onLoadStartListener && this.onLoadStartListener(e);
                    const n = this.loadModuleFactory(e.loadChildren).pipe(
                        k((n) => {
                            this.onLoadEndListener && this.onLoadEndListener(e);
                            const s = n.create(t);
                            return new fp(ad(s.injector.get(sf, void 0, bt.Self | bt.Optional)).map(Sp), s);
                        }),
                        mh((t) => {
                            throw ((e._loader$ = void 0), t);
                        })
                    );
                    return (e._loader$ = new K(n, () => new S()).pipe(q())), e._loader$;
                }
                loadModuleFactory(t) {
                    return 'string' == typeof t
                        ? N(this.loader.load(t))
                        : ud(t()).pipe(H((t) => (t instanceof Ua ? Uu(t) : N(this.compiler.compileModuleAsync(t)))));
                }
            }
            class of {
                constructor() {
                    (this.outlet = null), (this.route = null), (this.resolver = null), (this.children = new af()), (this.attachRef = null);
                }
            }
            class af {
                constructor() {
                    this.contexts = new Map();
                }
                onChildOutletCreated(t, e) {
                    const n = this.getOrCreateContext(t);
                    (n.outlet = e), this.contexts.set(t, n);
                }
                onChildOutletDestroyed(t) {
                    const e = this.getContext(t);
                    e && (e.outlet = null);
                }
                onOutletDeactivated() {
                    const t = this.contexts;
                    return (this.contexts = new Map()), t;
                }
                onOutletReAttached(t) {
                    this.contexts = t;
                }
                getOrCreateContext(t) {
                    let e = this.getContext(t);
                    return e || ((e = new of()), this.contexts.set(t, e)), e;
                }
                getContext(t) {
                    return this.contexts.get(t) || null;
                }
            }
            class lf {
                shouldProcessUrl(t) {
                    return !0;
                }
                extract(t) {
                    return t;
                }
                merge(t, e) {
                    return t;
                }
            }
            function cf(t) {
                throw t;
            }
            function uf(t, e, n) {
                return e.parse('/');
            }
            function hf(t, e) {
                return Uu(null);
            }
            const df = { paths: 'exact', fragment: 'ignored', matrixParams: 'ignored', queryParams: 'exact' },
                pf = { paths: 'subset', fragment: 'ignored', matrixParams: 'ignored', queryParams: 'subset' };
            let ff = (() => {
                class t {
                    constructor(t, e, n, s, r, i, o, a) {
                        (this.rootComponentType = t),
                            (this.urlSerializer = e),
                            (this.rootContexts = n),
                            (this.location = s),
                            (this.config = a),
                            (this.lastSuccessfulNavigation = null),
                            (this.currentNavigation = null),
                            (this.disposed = !1),
                            (this.lastLocationChangeInfo = null),
                            (this.navigationId = 0),
                            (this.currentPageId = 0),
                            (this.isNgZoneEnabled = !1),
                            (this.events = new S()),
                            (this.errorHandler = cf),
                            (this.malformedUriErrorHandler = uf),
                            (this.navigated = !1),
                            (this.lastSuccessfulId = -1),
                            (this.hooks = { beforePreactivation: hf, afterPreactivation: hf }),
                            (this.urlHandlingStrategy = new lf()),
                            (this.routeReuseStrategy = new nf()),
                            (this.onSameUrlNavigation = 'ignore'),
                            (this.paramsInheritanceStrategy = 'emptyOnly'),
                            (this.urlUpdateStrategy = 'deferred'),
                            (this.relativeLinkResolution = 'corrected'),
                            (this.canceledNavigationResolution = 'replace'),
                            (this.ngModule = r.get(Va)),
                            (this.console = r.get(Ll));
                        const l = r.get(Wl);
                        (this.isNgZoneEnabled = l instanceof Wl && Wl.isInAngularZone()),
                            this.resetConfig(a),
                            (this.currentUrlTree = new yd(new _d([], {}), {}, null)),
                            (this.rawUrlTree = this.currentUrlTree),
                            (this.browserUrlTree = this.currentUrlTree),
                            (this.configLoader = new rf(
                                i,
                                o,
                                (t) => this.triggerEvent(new Qh(t)),
                                (t) => this.triggerEvent(new Kh(t))
                            )),
                            (this.routerState = $d(this.currentUrlTree, this.rootComponentType)),
                            (this.transitions = new $u({
                                id: 0,
                                targetPageId: 0,
                                currentUrlTree: this.currentUrlTree,
                                currentRawUrl: this.currentUrlTree,
                                extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),
                                urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),
                                rawUrl: this.currentUrlTree,
                                extras: {},
                                resolve: null,
                                reject: null,
                                promise: Promise.resolve(!0),
                                source: 'imperative',
                                restoredState: null,
                                currentSnapshot: this.routerState.snapshot,
                                targetSnapshot: null,
                                currentRouterState: this.routerState,
                                targetRouterState: null,
                                guards: { canActivateChecks: [], canDeactivateChecks: [] },
                                guardsResult: null,
                            })),
                            (this.navigations = this.setupNavigations(this.transitions)),
                            this.processNavigations();
                    }
                    get browserPageId() {
                        var t;
                        return null === (t = this.location.getState()) || void 0 === t ? void 0 : t.ɵrouterPageId;
                    }
                    setupNavigations(t) {
                        const e = this.events;
                        return t.pipe(
                            dh((t) => 0 !== t.id),
                            k((t) => Object.assign(Object.assign({}, t), { extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl) })),
                            eh((t) => {
                                let n = !1,
                                    s = !1;
                                return Uu(t).pipe(
                                    Ih((t) => {
                                        this.currentNavigation = {
                                            id: t.id,
                                            initialUrl: t.currentRawUrl,
                                            extractedUrl: t.extractedUrl,
                                            trigger: t.source,
                                            extras: t.extras,
                                            previousNavigation: this.lastSuccessfulNavigation
                                                ? Object.assign(Object.assign({}, this.lastSuccessfulNavigation), {
                                                      previousNavigation: null,
                                                  })
                                                : null,
                                        };
                                    }),
                                    eh((t) => {
                                        const n = !this.navigated || t.extractedUrl.toString() !== this.browserUrlTree.toString(),
                                            s =
                                                ('reload' === this.onSameUrlNavigation || n) &&
                                                this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);
                                        if ((mf(t.source) && (this.browserUrlTree = t.rawUrl), s))
                                            return Uu(t).pipe(
                                                eh((t) => {
                                                    const n = this.transitions.getValue();
                                                    return (
                                                        e.next(new jh(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState)),
                                                        n !== this.transitions.getValue() ? Xu : Promise.resolve(t)
                                                    );
                                                }),
                                                (function (t, e, n, s) {
                                                    return eh((r) =>
                                                        (function (t, e, n, s, r) {
                                                            return new Mp(t, e, n, s, r).apply();
                                                        })(t, e, n, r.extractedUrl, s).pipe(
                                                            k((t) => Object.assign(Object.assign({}, r), { urlAfterRedirects: t }))
                                                        )
                                                    );
                                                })(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config),
                                                Ih((t) => {
                                                    this.currentNavigation = Object.assign(Object.assign({}, this.currentNavigation), {
                                                        finalUrl: t.urlAfterRedirects,
                                                    });
                                                }),
                                                (function (t, e, n, s, r) {
                                                    return H((i) =>
                                                        (function (t, e, n, s, r = 'emptyOnly', i = 'legacy') {
                                                            try {
                                                                const o = new Qp(t, e, n, s, r, i).recognize();
                                                                return null === o ? Wp(new qp()) : Uu(o);
                                                            } catch (o) {
                                                                return Wp(o);
                                                            }
                                                        })(t, e, i.urlAfterRedirects, n(i.urlAfterRedirects), s, r).pipe(
                                                            k((t) => Object.assign(Object.assign({}, i), { targetSnapshot: t }))
                                                        )
                                                    );
                                                })(
                                                    this.rootComponentType,
                                                    this.config,
                                                    (t) => this.serializeUrl(t),
                                                    this.paramsInheritanceStrategy,
                                                    this.relativeLinkResolution
                                                ),
                                                Ih((t) => {
                                                    'eager' === this.urlUpdateStrategy &&
                                                        (t.extras.skipLocationChange || this.setBrowserUrl(t.urlAfterRedirects, t),
                                                        (this.browserUrlTree = t.urlAfterRedirects));
                                                    const n = new Uh(
                                                        t.id,
                                                        this.serializeUrl(t.extractedUrl),
                                                        this.serializeUrl(t.urlAfterRedirects),
                                                        t.targetSnapshot
                                                    );
                                                    e.next(n);
                                                })
                                            );
                                        if (n && this.rawUrlTree && this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
                                            const { id: n, extractedUrl: s, source: r, restoredState: i, extras: o } = t,
                                                a = new jh(n, this.serializeUrl(s), r, i);
                                            e.next(a);
                                            const l = $d(s, this.rootComponentType).snapshot;
                                            return Uu(
                                                Object.assign(Object.assign({}, t), {
                                                    targetSnapshot: l,
                                                    urlAfterRedirects: s,
                                                    extras: Object.assign(Object.assign({}, o), { skipLocationChange: !1, replaceUrl: !1 }),
                                                })
                                            );
                                        }
                                        return (
                                            (this.rawUrlTree = t.rawUrl), (this.browserUrlTree = t.urlAfterRedirects), t.resolve(null), Xu
                                        );
                                    }),
                                    tf((t) => {
                                        const {
                                            targetSnapshot: e,
                                            id: n,
                                            extractedUrl: s,
                                            rawUrl: r,
                                            extras: { skipLocationChange: i, replaceUrl: o },
                                        } = t;
                                        return this.hooks.beforePreactivation(e, {
                                            navigationId: n,
                                            appliedUrlTree: s,
                                            rawUrlTree: r,
                                            skipLocationChange: !!i,
                                            replaceUrl: !!o,
                                        });
                                    }),
                                    Ih((t) => {
                                        const e = new $h(
                                            t.id,
                                            this.serializeUrl(t.extractedUrl),
                                            this.serializeUrl(t.urlAfterRedirects),
                                            t.targetSnapshot
                                        );
                                        this.triggerEvent(e);
                                    }),
                                    k((t) =>
                                        Object.assign(Object.assign({}, t), {
                                            guards: Vp(t.targetSnapshot, t.currentSnapshot, this.rootContexts),
                                        })
                                    ),
                                    (function (t, e) {
                                        return H((n) => {
                                            const {
                                                targetSnapshot: s,
                                                currentSnapshot: r,
                                                guards: { canActivateChecks: i, canDeactivateChecks: o },
                                            } = n;
                                            return 0 === o.length && 0 === i.length
                                                ? Uu(Object.assign(Object.assign({}, n), { guardsResult: !0 }))
                                                : (function (t, e, n, s) {
                                                      return N(t).pipe(
                                                          H((t) =>
                                                              (function (t, e, n, s, r) {
                                                                  const i = e && e.routeConfig ? e.routeConfig.canDeactivate : null;
                                                                  return i && 0 !== i.length
                                                                      ? Uu(
                                                                            i.map((i) => {
                                                                                const o = Up(i, e, r);
                                                                                let a;
                                                                                if (
                                                                                    (function (t) {
                                                                                        return t && mp(t.canDeactivate);
                                                                                    })(o)
                                                                                )
                                                                                    a = ud(o.canDeactivate(t, e, n, s));
                                                                                else {
                                                                                    if (!mp(o))
                                                                                        throw new Error('Invalid CanDeactivate guard');
                                                                                    a = ud(o(t, e, n, s));
                                                                                }
                                                                                return a.pipe(Rh());
                                                                            })
                                                                        ).pipe(_p())
                                                                      : Uu(!0);
                                                              })(t.component, t.route, n, e, s)
                                                          ),
                                                          Rh((t) => !0 !== t, !0)
                                                      );
                                                  })(o, s, r, t).pipe(
                                                      H((n) =>
                                                          n && 'boolean' == typeof n
                                                              ? (function (t, e, n, s) {
                                                                    return N(e).pipe(
                                                                        _h((e) =>
                                                                            Gu(
                                                                                (function (t, e) {
                                                                                    return null !== t && e && e(new Zh(t)), Uu(!0);
                                                                                })(e.route.parent, s),
                                                                                (function (t, e) {
                                                                                    return null !== t && e && e(new Gh(t)), Uu(!0);
                                                                                })(e.route, s),
                                                                                (function (t, e, n) {
                                                                                    const s = e[e.length - 1],
                                                                                        r = e
                                                                                            .slice(0, e.length - 1)
                                                                                            .reverse()
                                                                                            .map((t) =>
                                                                                                (function (t) {
                                                                                                    const e = t.routeConfig
                                                                                                        ? t.routeConfig.canActivateChild
                                                                                                        : null;
                                                                                                    return e && 0 !== e.length
                                                                                                        ? { node: t, guards: e }
                                                                                                        : null;
                                                                                                })(t)
                                                                                            )
                                                                                            .filter((t) => null !== t)
                                                                                            .map((e) =>
                                                                                                th(() =>
                                                                                                    Uu(
                                                                                                        e.guards.map((r) => {
                                                                                                            const i = Up(r, e.node, n);
                                                                                                            let o;
                                                                                                            if (
                                                                                                                (function (t) {
                                                                                                                    return (
                                                                                                                        t &&
                                                                                                                        mp(
                                                                                                                            t.canActivateChild
                                                                                                                        )
                                                                                                                    );
                                                                                                                })(i)
                                                                                                            )
                                                                                                                o = ud(
                                                                                                                    i.canActivateChild(s, t)
                                                                                                                );
                                                                                                            else {
                                                                                                                if (!mp(i))
                                                                                                                    throw new Error(
                                                                                                                        'Invalid CanActivateChild guard'
                                                                                                                    );
                                                                                                                o = ud(i(s, t));
                                                                                                            }
                                                                                                            return o.pipe(Rh());
                                                                                                        })
                                                                                                    ).pipe(_p())
                                                                                                )
                                                                                            );
                                                                                    return Uu(r).pipe(_p());
                                                                                })(t, e.path, n),
                                                                                (function (t, e, n) {
                                                                                    const s = e.routeConfig
                                                                                        ? e.routeConfig.canActivate
                                                                                        : null;
                                                                                    return s && 0 !== s.length
                                                                                        ? Uu(
                                                                                              s.map((s) =>
                                                                                                  th(() => {
                                                                                                      const r = Up(s, e, n);
                                                                                                      let i;
                                                                                                      if (
                                                                                                          (function (t) {
                                                                                                              return t && mp(t.canActivate);
                                                                                                          })(r)
                                                                                                      )
                                                                                                          i = ud(r.canActivate(e, t));
                                                                                                      else {
                                                                                                          if (!mp(r))
                                                                                                              throw new Error(
                                                                                                                  'Invalid CanActivate guard'
                                                                                                              );
                                                                                                          i = ud(r(e, t));
                                                                                                      }
                                                                                                      return i.pipe(Rh());
                                                                                                  })
                                                                                              )
                                                                                          ).pipe(_p())
                                                                                        : Uu(!0);
                                                                                })(t, e.route, n)
                                                                            )
                                                                        ),
                                                                        Rh((t) => !0 !== t, !0)
                                                                    );
                                                                })(s, i, t, e)
                                                              : Uu(n)
                                                      ),
                                                      k((t) => Object.assign(Object.assign({}, n), { guardsResult: t }))
                                                  );
                                        });
                                    })(this.ngModule.injector, (t) => this.triggerEvent(t)),
                                    Ih((t) => {
                                        if (gp(t.guardsResult)) {
                                            const e = sd(`Redirecting to "${this.serializeUrl(t.guardsResult)}"`);
                                            throw ((e.url = t.guardsResult), e);
                                        }
                                        const e = new zh(
                                            t.id,
                                            this.serializeUrl(t.extractedUrl),
                                            this.serializeUrl(t.urlAfterRedirects),
                                            t.targetSnapshot,
                                            !!t.guardsResult
                                        );
                                        this.triggerEvent(e);
                                    }),
                                    dh((t) => !!t.guardsResult || (this.restoreHistory(t), this.cancelNavigationTransition(t, ''), !1)),
                                    tf((t) => {
                                        if (t.guards.canActivateChecks.length)
                                            return Uu(t).pipe(
                                                Ih((t) => {
                                                    const e = new qh(
                                                        t.id,
                                                        this.serializeUrl(t.extractedUrl),
                                                        this.serializeUrl(t.urlAfterRedirects),
                                                        t.targetSnapshot
                                                    );
                                                    this.triggerEvent(e);
                                                }),
                                                eh((t) => {
                                                    let e = !1;
                                                    return Uu(t).pipe(
                                                        ((n = this.paramsInheritanceStrategy),
                                                        (s = this.ngModule.injector),
                                                        H((t) => {
                                                            const {
                                                                targetSnapshot: e,
                                                                guards: { canActivateChecks: r },
                                                            } = t;
                                                            if (!r.length) return Uu(t);
                                                            let i = 0;
                                                            return N(r).pipe(
                                                                _h((t) =>
                                                                    (function (t, e, n, s) {
                                                                        return (function (t, e, n, s) {
                                                                            const r = Object.keys(t);
                                                                            if (0 === r.length) return Uu({});
                                                                            const i = {};
                                                                            return N(r).pipe(
                                                                                H((r) =>
                                                                                    (function (t, e, n, s) {
                                                                                        const r = Up(t, e, s);
                                                                                        return ud(r.resolve ? r.resolve(e, n) : r(e, n));
                                                                                    })(t[r], e, n, s).pipe(
                                                                                        Ih((t) => {
                                                                                            i[r] = t;
                                                                                        })
                                                                                    )
                                                                                ),
                                                                                vh(1),
                                                                                H(() => (Object.keys(i).length === r.length ? Uu(i) : Xu))
                                                                            );
                                                                        })(t._resolve, t, e, s).pipe(
                                                                            k(
                                                                                (e) => (
                                                                                    (t._resolvedData = e),
                                                                                    (t.data = Object.assign(
                                                                                        Object.assign({}, t.data),
                                                                                        qd(t, n).resolve
                                                                                    )),
                                                                                    null
                                                                                )
                                                                            )
                                                                        );
                                                                    })(t.route, e, n, s)
                                                                ),
                                                                Ih(() => i++),
                                                                vh(1),
                                                                H((e) => (i === r.length ? Uu(t) : Xu))
                                                            );
                                                        })),
                                                        Ih({
                                                            next: () => (e = !0),
                                                            complete: () => {
                                                                e ||
                                                                    (this.restoreHistory(t),
                                                                    this.cancelNavigationTransition(
                                                                        t,
                                                                        "At least one route resolver didn't emit any value."
                                                                    ));
                                                            },
                                                        })
                                                    );
                                                    var n, s;
                                                }),
                                                Ih((t) => {
                                                    const e = new Wh(
                                                        t.id,
                                                        this.serializeUrl(t.extractedUrl),
                                                        this.serializeUrl(t.urlAfterRedirects),
                                                        t.targetSnapshot
                                                    );
                                                    this.triggerEvent(e);
                                                })
                                            );
                                    }),
                                    tf((t) => {
                                        const {
                                            targetSnapshot: e,
                                            id: n,
                                            extractedUrl: s,
                                            rawUrl: r,
                                            extras: { skipLocationChange: i, replaceUrl: o },
                                        } = t;
                                        return this.hooks.afterPreactivation(e, {
                                            navigationId: n,
                                            appliedUrlTree: s,
                                            rawUrlTree: r,
                                            skipLocationChange: !!i,
                                            replaceUrl: !!o,
                                        });
                                    }),
                                    k((t) => {
                                        const e = (function (t, e, n) {
                                            const s = Xd(t, e._root, n ? n._root : void 0);
                                            return new Ud(s, e);
                                        })(this.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
                                        return Object.assign(Object.assign({}, t), { targetRouterState: e });
                                    }),
                                    Ih((t) => {
                                        (this.currentUrlTree = t.urlAfterRedirects),
                                            (this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl)),
                                            (this.routerState = t.targetRouterState),
                                            'deferred' === this.urlUpdateStrategy &&
                                                (t.extras.skipLocationChange || this.setBrowserUrl(this.rawUrlTree, t),
                                                (this.browserUrlTree = t.urlAfterRedirects));
                                    }),
                                    ((r = this.rootContexts),
                                    (i = this.routeReuseStrategy),
                                    (o = (t) => this.triggerEvent(t)),
                                    k((t) => (new dp(i, t.targetRouterState, t.currentRouterState, o).activate(r), t))),
                                    Ih({
                                        next() {
                                            n = !0;
                                        },
                                        complete() {
                                            n = !0;
                                        },
                                    }),
                                    Dh(() => {
                                        if (!n && !s) {
                                            const e = `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`;
                                            'replace' === this.canceledNavigationResolution
                                                ? (this.restoreHistory(t), this.cancelNavigationTransition(t, e))
                                                : this.cancelNavigationTransition(t, e);
                                        }
                                        this.currentNavigation = null;
                                    }),
                                    mh((n) => {
                                        if (((s = !0), (r = n) && r.ngNavigationCancelingError)) {
                                            const s = gp(n.url);
                                            s || ((this.navigated = !0), this.restoreHistory(t, !0));
                                            const r = new Bh(t.id, this.serializeUrl(t.extractedUrl), n.message);
                                            e.next(r),
                                                s
                                                    ? setTimeout(() => {
                                                          const e = this.urlHandlingStrategy.merge(n.url, this.rawUrlTree),
                                                              s = {
                                                                  skipLocationChange: t.extras.skipLocationChange,
                                                                  replaceUrl: 'eager' === this.urlUpdateStrategy || mf(t.source),
                                                              };
                                                          this.scheduleNavigation(e, 'imperative', null, s, {
                                                              resolve: t.resolve,
                                                              reject: t.reject,
                                                              promise: t.promise,
                                                          });
                                                      }, 0)
                                                    : t.resolve(!1);
                                        } else {
                                            this.restoreHistory(t, !0);
                                            const s = new Vh(t.id, this.serializeUrl(t.extractedUrl), n);
                                            e.next(s);
                                            try {
                                                t.resolve(this.errorHandler(n));
                                            } catch (i) {
                                                t.reject(i);
                                            }
                                        }
                                        var r;
                                        return Xu;
                                    })
                                );
                                var r, i, o;
                            })
                        );
                    }
                    resetRootComponentType(t) {
                        (this.rootComponentType = t), (this.routerState.root.component = this.rootComponentType);
                    }
                    getTransition() {
                        const t = this.transitions.value;
                        return (t.urlAfterRedirects = this.browserUrlTree), t;
                    }
                    setTransition(t) {
                        this.transitions.next(Object.assign(Object.assign({}, this.getTransition()), t));
                    }
                    initialNavigation() {
                        this.setUpLocationChangeListener(),
                            0 === this.navigationId && this.navigateByUrl(this.location.path(!0), { replaceUrl: !0 });
                    }
                    setUpLocationChangeListener() {
                        this.locationSubscription ||
                            (this.locationSubscription = this.location.subscribe((t) => {
                                const e = this.extractLocationChangeInfoFromEvent(t);
                                this.shouldScheduleNavigation(this.lastLocationChangeInfo, e) &&
                                    setTimeout(() => {
                                        const { source: t, state: n, urlTree: s } = e,
                                            r = { replaceUrl: !0 };
                                        if (n) {
                                            const t = Object.assign({}, n);
                                            delete t.navigationId, delete t.ɵrouterPageId, 0 !== Object.keys(t).length && (r.state = t);
                                        }
                                        this.scheduleNavigation(s, t, n, r);
                                    }, 0),
                                    (this.lastLocationChangeInfo = e);
                            }));
                    }
                    extractLocationChangeInfoFromEvent(t) {
                        var e;
                        return {
                            source: 'popstate' === t.type ? 'popstate' : 'hashchange',
                            urlTree: this.parseUrl(t.url),
                            state: (null === (e = t.state) || void 0 === e ? void 0 : e.navigationId) ? t.state : null,
                            transitionId: this.getTransition().id,
                        };
                    }
                    shouldScheduleNavigation(t, e) {
                        if (!t) return !0;
                        const n = e.urlTree.toString() === t.urlTree.toString();
                        return !(
                            e.transitionId === t.transitionId &&
                            n &&
                            (('hashchange' === e.source && 'popstate' === t.source) ||
                                ('popstate' === e.source && 'hashchange' === t.source))
                        );
                    }
                    get url() {
                        return this.serializeUrl(this.currentUrlTree);
                    }
                    getCurrentNavigation() {
                        return this.currentNavigation;
                    }
                    triggerEvent(t) {
                        this.events.next(t);
                    }
                    resetConfig(t) {
                        bp(t), (this.config = t.map(Sp)), (this.navigated = !1), (this.lastSuccessfulId = -1);
                    }
                    ngOnDestroy() {
                        this.dispose();
                    }
                    dispose() {
                        this.transitions.complete(),
                            this.locationSubscription && (this.locationSubscription.unsubscribe(), (this.locationSubscription = void 0)),
                            (this.disposed = !0);
                    }
                    createUrlTree(t, e = {}) {
                        const { relativeTo: n, queryParams: s, fragment: r, queryParamsHandling: i, preserveFragment: o } = e,
                            a = n || this.routerState.root,
                            l = o ? this.currentUrlTree.fragment : r;
                        let c = null;
                        switch (i) {
                            case 'merge':
                                c = Object.assign(Object.assign({}, this.currentUrlTree.queryParams), s);
                                break;
                            case 'preserve':
                                c = this.currentUrlTree.queryParams;
                                break;
                            default:
                                c = s || null;
                        }
                        return (
                            null !== c && (c = this.removeEmptyProps(c)),
                            (function (t, e, n, s, r) {
                                if (0 === n.length) return np(e.root, e.root, e, s, r);
                                const i = (function (t) {
                                    if ('string' == typeof t[0] && 1 === t.length && '/' === t[0]) return new rp(!0, 0, t);
                                    let e = 0,
                                        n = !1;
                                    const s = t.reduce((t, s, r) => {
                                        if ('object' == typeof s && null != s) {
                                            if (s.outlets) {
                                                const e = {};
                                                return (
                                                    cd(s.outlets, (t, n) => {
                                                        e[n] = 'string' == typeof t ? t.split('/') : t;
                                                    }),
                                                    [...t, { outlets: e }]
                                                );
                                            }
                                            if (s.segmentPath) return [...t, s.segmentPath];
                                        }
                                        return 'string' != typeof s
                                            ? [...t, s]
                                            : 0 === r
                                            ? (s.split('/').forEach((s, r) => {
                                                  (0 == r && '.' === s) ||
                                                      (0 == r && '' === s ? (n = !0) : '..' === s ? e++ : '' != s && t.push(s));
                                              }),
                                              t)
                                            : [...t, s];
                                    }, []);
                                    return new rp(n, e, s);
                                })(n);
                                if (i.toRoot()) return np(e.root, new _d([], {}), e, s, r);
                                const o = (function (t, e, n) {
                                        if (t.isAbsolute) return new ip(e.root, !0, 0);
                                        if (-1 === n.snapshot._lastPathIndex) {
                                            const t = n.snapshot._urlSegment;
                                            return new ip(t, t === e.root, 0);
                                        }
                                        const s = tp(t.commands[0]) ? 0 : 1;
                                        return (function (t, e, n) {
                                            let s = t,
                                                r = e,
                                                i = n;
                                            for (; i > r; ) {
                                                if (((i -= r), (s = s.parent), !s)) throw new Error("Invalid number of '../'");
                                                r = s.segments.length;
                                            }
                                            return new ip(s, !1, r - i);
                                        })(n.snapshot._urlSegment, n.snapshot._lastPathIndex + s, t.numberOfDoubleDots);
                                    })(i, e, t),
                                    a = o.processChildren
                                        ? ap(o.segmentGroup, o.index, i.commands)
                                        : op(o.segmentGroup, o.index, i.commands);
                                return np(o.segmentGroup, a, e, s, r);
                            })(a, this.currentUrlTree, t, c, null != l ? l : null)
                        );
                    }
                    navigateByUrl(t, e = { skipLocationChange: !1 }) {
                        const n = gp(t) ? t : this.parseUrl(t),
                            s = this.urlHandlingStrategy.merge(n, this.rawUrlTree);
                        return this.scheduleNavigation(s, 'imperative', null, e);
                    }
                    navigate(t, e = { skipLocationChange: !1 }) {
                        return (
                            (function (t) {
                                for (let e = 0; e < t.length; e++) {
                                    const n = t[e];
                                    if (null == n) throw new Error(`The requested path contains ${n} segment at index ${e}`);
                                }
                            })(t),
                            this.navigateByUrl(this.createUrlTree(t, e), e)
                        );
                    }
                    serializeUrl(t) {
                        return this.urlSerializer.serialize(t);
                    }
                    parseUrl(t) {
                        let e;
                        try {
                            e = this.urlSerializer.parse(t);
                        } catch (n) {
                            e = this.malformedUriErrorHandler(n, this.urlSerializer, t);
                        }
                        return e;
                    }
                    isActive(t, e) {
                        let n;
                        if (((n = !0 === e ? Object.assign({}, df) : !1 === e ? Object.assign({}, pf) : e), gp(t)))
                            return pd(this.currentUrlTree, t, n);
                        const s = this.parseUrl(t);
                        return pd(this.currentUrlTree, s, n);
                    }
                    removeEmptyProps(t) {
                        return Object.keys(t).reduce((e, n) => {
                            const s = t[n];
                            return null != s && (e[n] = s), e;
                        }, {});
                    }
                    processNavigations() {
                        this.navigations.subscribe(
                            (t) => {
                                (this.navigated = !0),
                                    (this.lastSuccessfulId = t.id),
                                    (this.currentPageId = t.targetPageId),
                                    this.events.next(
                                        new Hh(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree))
                                    ),
                                    (this.lastSuccessfulNavigation = this.currentNavigation),
                                    t.resolve(!0);
                            },
                            (t) => {
                                this.console.warn('Unhandled Navigation Error: ');
                            }
                        );
                    }
                    scheduleNavigation(t, e, n, s, r) {
                        var i, o;
                        if (this.disposed) return Promise.resolve(!1);
                        const a = this.getTransition(),
                            l = mf(e) && a && !mf(a.source),
                            c =
                                (this.lastSuccessfulId === a.id || this.currentNavigation ? a.rawUrl : a.urlAfterRedirects).toString() ===
                                t.toString();
                        if (l && c) return Promise.resolve(!0);
                        let u, h, d;
                        r
                            ? ((u = r.resolve), (h = r.reject), (d = r.promise))
                            : (d = new Promise((t, e) => {
                                  (u = t), (h = e);
                              }));
                        const p = ++this.navigationId;
                        let f;
                        return (
                            'computed' === this.canceledNavigationResolution
                                ? (0 === this.currentPageId && (n = this.location.getState()),
                                  (f =
                                      n && n.ɵrouterPageId
                                          ? n.ɵrouterPageId
                                          : s.replaceUrl || s.skipLocationChange
                                          ? null !== (i = this.browserPageId) && void 0 !== i
                                              ? i
                                              : 0
                                          : (null !== (o = this.browserPageId) && void 0 !== o ? o : 0) + 1))
                                : (f = 0),
                            this.setTransition({
                                id: p,
                                targetPageId: f,
                                source: e,
                                restoredState: n,
                                currentUrlTree: this.currentUrlTree,
                                currentRawUrl: this.rawUrlTree,
                                rawUrl: t,
                                extras: s,
                                resolve: u,
                                reject: h,
                                promise: d,
                                currentSnapshot: this.routerState.snapshot,
                                currentRouterState: this.routerState,
                            }),
                            d.catch((t) => Promise.reject(t))
                        );
                    }
                    setBrowserUrl(t, e) {
                        const n = this.urlSerializer.serialize(t),
                            s = Object.assign(Object.assign({}, e.extras.state), this.generateNgRouterState(e.id, e.targetPageId));
                        this.location.isCurrentPathEqualTo(n) || e.extras.replaceUrl
                            ? this.location.replaceState(n, '', s)
                            : this.location.go(n, '', s);
                    }
                    restoreHistory(t, e = !1) {
                        var n, s;
                        if ('computed' === this.canceledNavigationResolution) {
                            const e = this.currentPageId - t.targetPageId;
                            ('popstate' !== t.source &&
                                'eager' !== this.urlUpdateStrategy &&
                                this.currentUrlTree !== (null === (n = this.currentNavigation) || void 0 === n ? void 0 : n.finalUrl)) ||
                            0 === e
                                ? this.currentUrlTree === (null === (s = this.currentNavigation) || void 0 === s ? void 0 : s.finalUrl) &&
                                  0 === e &&
                                  (this.resetState(t), (this.browserUrlTree = t.currentUrlTree), this.resetUrlToCurrentUrlTree())
                                : this.location.historyGo(e);
                        } else
                            'replace' === this.canceledNavigationResolution && (e && this.resetState(t), this.resetUrlToCurrentUrlTree());
                    }
                    resetState(t) {
                        (this.routerState = t.currentRouterState),
                            (this.currentUrlTree = t.currentUrlTree),
                            (this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl));
                    }
                    resetUrlToCurrentUrlTree() {
                        this.location.replaceState(
                            this.urlSerializer.serialize(this.rawUrlTree),
                            '',
                            this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId)
                        );
                    }
                    cancelNavigationTransition(t, e) {
                        const n = new Bh(t.id, this.serializeUrl(t.extractedUrl), e);
                        this.triggerEvent(n), t.resolve(!1);
                    }
                    generateNgRouterState(t, e) {
                        return 'computed' === this.canceledNavigationResolution
                            ? { navigationId: t, '\u0275routerPageId': e }
                            : { navigationId: t };
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(qn), as(wd), as(af), as(Bc), as(Ji), as(mc), as($l), as(void 0));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            function mf(t) {
                return 'imperative' !== t;
            }
            let gf = (() => {
                    class t {
                        constructor(t, e, n, s, r) {
                            (this.router = t),
                                (this.route = e),
                                (this.commands = []),
                                (this.onChanges = new S()),
                                null == n && s.setAttribute(r.nativeElement, 'tabindex', '0');
                        }
                        ngOnChanges(t) {
                            this.onChanges.next(this);
                        }
                        set routerLink(t) {
                            this.commands = null != t ? (Array.isArray(t) ? t : [t]) : [];
                        }
                        onClick() {
                            const t = {
                                skipLocationChange: _f(this.skipLocationChange),
                                replaceUrl: _f(this.replaceUrl),
                                state: this.state,
                            };
                            return this.router.navigateByUrl(this.urlTree, t), !0;
                        }
                        get urlTree() {
                            return this.router.createUrlTree(this.commands, {
                                relativeTo: void 0 !== this.relativeTo ? this.relativeTo : this.route,
                                queryParams: this.queryParams,
                                fragment: this.fragment,
                                queryParamsHandling: this.queryParamsHandling,
                                preserveFragment: _f(this.preserveFragment),
                            });
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(ff), fo(zd), Bn('tabindex'), fo(ca), fo(oa));
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [['', 'routerLink', '', 5, 'a', 5, 'area']],
                            hostBindings: function (t, e) {
                                1 & t &&
                                    xo('click', function () {
                                        return e.onClick();
                                    });
                            },
                            inputs: {
                                routerLink: 'routerLink',
                                queryParams: 'queryParams',
                                fragment: 'fragment',
                                queryParamsHandling: 'queryParamsHandling',
                                preserveFragment: 'preserveFragment',
                                skipLocationChange: 'skipLocationChange',
                                replaceUrl: 'replaceUrl',
                                state: 'state',
                                relativeTo: 'relativeTo',
                            },
                            features: [ae],
                        })),
                        t
                    );
                })(),
                yf = (() => {
                    class t {
                        constructor(t, e, n) {
                            (this.router = t),
                                (this.route = e),
                                (this.locationStrategy = n),
                                (this.commands = []),
                                (this.onChanges = new S()),
                                (this.subscription = t.events.subscribe((t) => {
                                    t instanceof Hh && this.updateTargetUrlAndHref();
                                }));
                        }
                        set routerLink(t) {
                            this.commands = null != t ? (Array.isArray(t) ? t : [t]) : [];
                        }
                        ngOnChanges(t) {
                            this.updateTargetUrlAndHref(), this.onChanges.next(this);
                        }
                        ngOnDestroy() {
                            this.subscription.unsubscribe();
                        }
                        onClick(t, e, n, s, r) {
                            if (0 !== t || e || n || s || r) return !0;
                            if ('string' == typeof this.target && '_self' != this.target) return !0;
                            const i = {
                                skipLocationChange: _f(this.skipLocationChange),
                                replaceUrl: _f(this.replaceUrl),
                                state: this.state,
                            };
                            return this.router.navigateByUrl(this.urlTree, i), !1;
                        }
                        updateTargetUrlAndHref() {
                            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
                        }
                        get urlTree() {
                            return this.router.createUrlTree(this.commands, {
                                relativeTo: void 0 !== this.relativeTo ? this.relativeTo : this.route,
                                queryParams: this.queryParams,
                                fragment: this.fragment,
                                queryParamsHandling: this.queryParamsHandling,
                                preserveFragment: _f(this.preserveFragment),
                            });
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(ff), fo(zd), fo(Nc));
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [
                                ['a', 'routerLink', ''],
                                ['area', 'routerLink', ''],
                            ],
                            hostVars: 2,
                            hostBindings: function (t, e) {
                                1 & t &&
                                    xo('click', function (t) {
                                        return e.onClick(t.button, t.ctrlKey, t.shiftKey, t.altKey, t.metaKey);
                                    }),
                                    2 & t && (zo('href', e.href, Ks), ho('target', e.target));
                            },
                            inputs: {
                                routerLink: 'routerLink',
                                target: 'target',
                                queryParams: 'queryParams',
                                fragment: 'fragment',
                                queryParamsHandling: 'queryParamsHandling',
                                preserveFragment: 'preserveFragment',
                                skipLocationChange: 'skipLocationChange',
                                replaceUrl: 'replaceUrl',
                                state: 'state',
                                relativeTo: 'relativeTo',
                            },
                            features: [ae],
                        })),
                        t
                    );
                })();
            function _f(t) {
                return '' === t || !!t;
            }
            let vf = (() => {
                    class t {
                        constructor(t, e, n, s, r, i) {
                            (this.router = t),
                                (this.element = e),
                                (this.renderer = n),
                                (this.cdr = s),
                                (this.link = r),
                                (this.linkWithHref = i),
                                (this.classes = []),
                                (this.isActive = !1),
                                (this.routerLinkActiveOptions = { exact: !1 }),
                                (this.routerEventsSubscription = t.events.subscribe((t) => {
                                    t instanceof Hh && this.update();
                                }));
                        }
                        ngAfterContentInit() {
                            Uu(this.links.changes, this.linksWithHrefs.changes, Uu(null))
                                .pipe(U())
                                .subscribe((t) => {
                                    this.update(), this.subscribeToEachLinkOnChanges();
                                });
                        }
                        subscribeToEachLinkOnChanges() {
                            var t;
                            null === (t = this.linkInputChangesSubscription) || void 0 === t || t.unsubscribe();
                            const e = [...this.links.toArray(), ...this.linksWithHrefs.toArray(), this.link, this.linkWithHref]
                                .filter((t) => !!t)
                                .map((t) => t.onChanges);
                            this.linkInputChangesSubscription = N(e)
                                .pipe(U())
                                .subscribe((t) => {
                                    this.isActive !== this.isLinkActive(this.router)(t) && this.update();
                                });
                        }
                        set routerLinkActive(t) {
                            const e = Array.isArray(t) ? t : t.split(' ');
                            this.classes = e.filter((t) => !!t);
                        }
                        ngOnChanges(t) {
                            this.update();
                        }
                        ngOnDestroy() {
                            var t;
                            this.routerEventsSubscription.unsubscribe(),
                                null === (t = this.linkInputChangesSubscription) || void 0 === t || t.unsubscribe();
                        }
                        update() {
                            this.links &&
                                this.linksWithHrefs &&
                                this.router.navigated &&
                                Promise.resolve().then(() => {
                                    const t = this.hasActiveLinks();
                                    this.isActive !== t &&
                                        ((this.isActive = t),
                                        this.cdr.markForCheck(),
                                        this.classes.forEach((e) => {
                                            t
                                                ? this.renderer.addClass(this.element.nativeElement, e)
                                                : this.renderer.removeClass(this.element.nativeElement, e);
                                        }));
                                });
                        }
                        isLinkActive(t) {
                            const e = (function (t) {
                                return !!t.paths;
                            })(this.routerLinkActiveOptions)
                                ? this.routerLinkActiveOptions
                                : this.routerLinkActiveOptions.exact || !1;
                            return (n) => t.isActive(n.urlTree, e);
                        }
                        hasActiveLinks() {
                            const t = this.isLinkActive(this.router);
                            return (
                                (this.link && t(this.link)) ||
                                (this.linkWithHref && t(this.linkWithHref)) ||
                                this.links.some(t) ||
                                this.linksWithHrefs.some(t)
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(ff), fo(oa), fo(ca), fo(Pa), fo(gf, 8), fo(yf, 8));
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [['', 'routerLinkActive', '']],
                            contentQueries: function (t, e, n) {
                                if ((1 & t && (bl(n, gf, 5), bl(n, yf, 5)), 2 & t)) {
                                    let t;
                                    _l((t = wl())) && (e.links = t), _l((t = wl())) && (e.linksWithHrefs = t);
                                }
                            },
                            inputs: { routerLinkActiveOptions: 'routerLinkActiveOptions', routerLinkActive: 'routerLinkActive' },
                            exportAs: ['routerLinkActive'],
                            features: [ae],
                        })),
                        t
                    );
                })(),
                bf = (() => {
                    class t {
                        constructor(t, e, n, s, r) {
                            (this.parentContexts = t),
                                (this.location = e),
                                (this.resolver = n),
                                (this.changeDetector = r),
                                (this.activated = null),
                                (this._activatedRoute = null),
                                (this.activateEvents = new ol()),
                                (this.deactivateEvents = new ol()),
                                (this.name = s || td),
                                t.onChildOutletCreated(this.name, this);
                        }
                        ngOnDestroy() {
                            this.parentContexts.onChildOutletDestroyed(this.name);
                        }
                        ngOnInit() {
                            if (!this.activated) {
                                const t = this.parentContexts.getContext(this.name);
                                t &&
                                    t.route &&
                                    (t.attachRef ? this.attach(t.attachRef, t.route) : this.activateWith(t.route, t.resolver || null));
                            }
                        }
                        get isActivated() {
                            return !!this.activated;
                        }
                        get component() {
                            if (!this.activated) throw new Error('Outlet is not activated');
                            return this.activated.instance;
                        }
                        get activatedRoute() {
                            if (!this.activated) throw new Error('Outlet is not activated');
                            return this._activatedRoute;
                        }
                        get activatedRouteData() {
                            return this._activatedRoute ? this._activatedRoute.snapshot.data : {};
                        }
                        detach() {
                            if (!this.activated) throw new Error('Outlet is not activated');
                            this.location.detach();
                            const t = this.activated;
                            return (this.activated = null), (this._activatedRoute = null), t;
                        }
                        attach(t, e) {
                            (this.activated = t), (this._activatedRoute = e), this.location.insert(t.hostView);
                        }
                        deactivate() {
                            if (this.activated) {
                                const t = this.component;
                                this.activated.destroy(),
                                    (this.activated = null),
                                    (this._activatedRoute = null),
                                    this.deactivateEvents.emit(t);
                            }
                        }
                        activateWith(t, e) {
                            if (this.isActivated) throw new Error('Cannot activate an already activated outlet');
                            this._activatedRoute = t;
                            const n = (e = e || this.resolver).resolveComponentFactory(t._futureSnapshot.routeConfig.component),
                                s = this.parentContexts.getOrCreateContext(this.name).children,
                                r = new wf(t, s, this.location.injector);
                            (this.activated = this.location.createComponent(n, this.location.length, r)),
                                this.changeDetector.markForCheck(),
                                this.activateEvents.emit(this.activated.instance);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(af), fo(za), fo(na), Bn('name'), fo(Pa));
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [['router-outlet']],
                            outputs: { activateEvents: 'activate', deactivateEvents: 'deactivate' },
                            exportAs: ['outlet'],
                        })),
                        t
                    );
                })();
            class wf {
                constructor(t, e, n) {
                    (this.route = t), (this.childContexts = e), (this.parent = n);
                }
                get(t, e) {
                    return t === zd ? this.route : t === af ? this.childContexts : this.parent.get(t, e);
                }
            }
            class xf {}
            class Sf {
                preload(t, e) {
                    return Uu(null);
                }
            }
            let Ef = (() => {
                    class t {
                        constructor(t, e, n, s, r) {
                            (this.router = t),
                                (this.injector = s),
                                (this.preloadingStrategy = r),
                                (this.loader = new rf(
                                    e,
                                    n,
                                    (e) => t.triggerEvent(new Qh(e)),
                                    (e) => t.triggerEvent(new Kh(e))
                                ));
                        }
                        setUpPreloading() {
                            this.subscription = this.router.events
                                .pipe(
                                    dh((t) => t instanceof Hh),
                                    _h(() => this.preload())
                                )
                                .subscribe(() => {});
                        }
                        preload() {
                            const t = this.injector.get(Va);
                            return this.processRoutes(t, this.router.config);
                        }
                        ngOnDestroy() {
                            this.subscription && this.subscription.unsubscribe();
                        }
                        processRoutes(t, e) {
                            const n = [];
                            for (const s of e)
                                if (s.loadChildren && !s.canLoad && s._loadedConfig) {
                                    const t = s._loadedConfig;
                                    n.push(this.processRoutes(t.module, t.routes));
                                } else
                                    s.loadChildren && !s.canLoad
                                        ? n.push(this.preloadConfig(t, s))
                                        : s.children && n.push(this.processRoutes(t, s.children));
                            return N(n).pipe(
                                U(),
                                k((t) => {})
                            );
                        }
                        preloadConfig(t, e) {
                            return this.preloadingStrategy.preload(e, () =>
                                (e._loadedConfig ? Uu(e._loadedConfig) : this.loader.load(t.injector, e)).pipe(
                                    H((t) => ((e._loadedConfig = t), this.processRoutes(t.module, t.routes)))
                                )
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(ff), as(mc), as($l), as(Ji), as(xf));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                Cf = (() => {
                    class t {
                        constructor(t, e, n = {}) {
                            (this.router = t),
                                (this.viewportScroller = e),
                                (this.options = n),
                                (this.lastId = 0),
                                (this.lastSource = 'imperative'),
                                (this.restoredId = 0),
                                (this.store = {}),
                                (n.scrollPositionRestoration = n.scrollPositionRestoration || 'disabled'),
                                (n.anchorScrolling = n.anchorScrolling || 'disabled');
                        }
                        init() {
                            'disabled' !== this.options.scrollPositionRestoration &&
                                this.viewportScroller.setHistoryScrollRestoration('manual'),
                                (this.routerEventsSubscription = this.createScrollEvents()),
                                (this.scrollEventsSubscription = this.consumeScrollEvents());
                        }
                        createScrollEvents() {
                            return this.router.events.subscribe((t) => {
                                t instanceof jh
                                    ? ((this.store[this.lastId] = this.viewportScroller.getScrollPosition()),
                                      (this.lastSource = t.navigationTrigger),
                                      (this.restoredId = t.restoredState ? t.restoredState.navigationId : 0))
                                    : t instanceof Hh &&
                                      ((this.lastId = t.id),
                                      this.scheduleScrollEvent(t, this.router.parseUrl(t.urlAfterRedirects).fragment));
                            });
                        }
                        consumeScrollEvents() {
                            return this.router.events.subscribe((t) => {
                                t instanceof Jh &&
                                    (t.position
                                        ? 'top' === this.options.scrollPositionRestoration
                                            ? this.viewportScroller.scrollToPosition([0, 0])
                                            : 'enabled' === this.options.scrollPositionRestoration &&
                                              this.viewportScroller.scrollToPosition(t.position)
                                        : t.anchor && 'enabled' === this.options.anchorScrolling
                                        ? this.viewportScroller.scrollToAnchor(t.anchor)
                                        : 'disabled' !== this.options.scrollPositionRestoration &&
                                          this.viewportScroller.scrollToPosition([0, 0]));
                            });
                        }
                        scheduleScrollEvent(t, e) {
                            this.router.triggerEvent(new Jh(t, 'popstate' === this.lastSource ? this.store[this.restoredId] : null, e));
                        }
                        ngOnDestroy() {
                            this.routerEventsSubscription && this.routerEventsSubscription.unsubscribe(),
                                this.scrollEventsSubscription && this.scrollEventsSubscription.unsubscribe();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(ff), as(Jc), as(void 0));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })();
            const kf = new $n('ROUTER_CONFIGURATION'),
                Tf = new $n('ROUTER_FORROOT_GUARD'),
                Af = [
                    Bc,
                    { provide: wd, useClass: xd },
                    {
                        provide: ff,
                        useFactory: function (t, e, n, s, r, i, o, a = {}, l, c) {
                            const u = new ff(null, t, e, n, s, r, i, ad(o));
                            return (
                                l && (u.urlHandlingStrategy = l),
                                c && (u.routeReuseStrategy = c),
                                (function (t, e) {
                                    t.errorHandler && (e.errorHandler = t.errorHandler),
                                        t.malformedUriErrorHandler && (e.malformedUriErrorHandler = t.malformedUriErrorHandler),
                                        t.onSameUrlNavigation && (e.onSameUrlNavigation = t.onSameUrlNavigation),
                                        t.paramsInheritanceStrategy && (e.paramsInheritanceStrategy = t.paramsInheritanceStrategy),
                                        t.relativeLinkResolution && (e.relativeLinkResolution = t.relativeLinkResolution),
                                        t.urlUpdateStrategy && (e.urlUpdateStrategy = t.urlUpdateStrategy);
                                })(a, u),
                                a.enableTracing &&
                                    u.events.subscribe((t) => {
                                        var e, n;
                                        null === (e = console.group) ||
                                            void 0 === e ||
                                            e.call(console, `Router Event: ${t.constructor.name}`),
                                            console.log(t.toString()),
                                            console.log(t),
                                            null === (n = console.groupEnd) || void 0 === n || n.call(console);
                                    }),
                                u
                            );
                        },
                        deps: [wd, af, Bc, Ji, mc, $l, sf, kf, [class {}, new ds()], [ef, new ds()]],
                    },
                    af,
                    {
                        provide: zd,
                        useFactory: function (t) {
                            return t.routerState.root;
                        },
                        deps: [ff],
                    },
                    { provide: mc, useClass: _c },
                    Ef,
                    Sf,
                    class {
                        preload(t, e) {
                            return e().pipe(mh(() => Uu(null)));
                        }
                    },
                    { provide: kf, useValue: { enableTracing: !1 } },
                ];
            function Rf() {
                return new lc('Router', ff);
            }
            let Of = (() => {
                class t {
                    constructor(t, e) {}
                    static forRoot(e, n) {
                        return {
                            ngModule: t,
                            providers: [
                                Af,
                                Df(e),
                                { provide: Tf, useFactory: Lf, deps: [[ff, new ds(), new ps()]] },
                                { provide: kf, useValue: n || {} },
                                { provide: Nc, useFactory: Pf, deps: [kc, [new hs(Mc), new ds()], kf] },
                                { provide: Cf, useFactory: If, deps: [ff, Jc, kf] },
                                { provide: xf, useExisting: n && n.preloadingStrategy ? n.preloadingStrategy : Sf },
                                { provide: lc, multi: !0, useFactory: Rf },
                                [
                                    Nf,
                                    { provide: Cl, multi: !0, useFactory: Ff, deps: [Nf] },
                                    { provide: jf, useFactory: Mf, deps: [Nf] },
                                    { provide: Pl, multi: !0, useExisting: jf },
                                ],
                            ],
                        };
                    }
                    static forChild(e) {
                        return { ngModule: t, providers: [Df(e)] };
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Tf, 8), as(ff, 8));
                    }),
                    (t.ɵmod = Wt({ type: t })),
                    (t.ɵinj = dt({})),
                    t
                );
            })();
            function If(t, e, n) {
                return n.scrollOffset && e.setOffset(n.scrollOffset), new Cf(t, e, n);
            }
            function Pf(t, e, n = {}) {
                return n.useHash ? new Hc(t, e) : new jc(t, e);
            }
            function Lf(t) {
                return 'guarded';
            }
            function Df(t) {
                return [
                    { provide: zn, multi: !0, useValue: t },
                    { provide: sf, multi: !0, useValue: t },
                ];
            }
            let Nf = (() => {
                class t {
                    constructor(t) {
                        (this.injector = t), (this.initNavigation = !1), (this.destroyed = !1), (this.resultOfPreactivationDone = new S());
                    }
                    appInitializer() {
                        return this.injector.get(Ac, Promise.resolve(null)).then(() => {
                            if (this.destroyed) return Promise.resolve(!0);
                            let t = null;
                            const e = new Promise((e) => (t = e)),
                                n = this.injector.get(ff),
                                s = this.injector.get(kf);
                            return (
                                'disabled' === s.initialNavigation
                                    ? (n.setUpLocationChangeListener(), t(!0))
                                    : 'enabled' === s.initialNavigation || 'enabledBlocking' === s.initialNavigation
                                    ? ((n.hooks.afterPreactivation = () =>
                                          this.initNavigation
                                              ? Uu(null)
                                              : ((this.initNavigation = !0), t(!0), this.resultOfPreactivationDone)),
                                      n.initialNavigation())
                                    : t(!0),
                                e
                            );
                        });
                    }
                    bootstrapListener(t) {
                        const e = this.injector.get(kf),
                            n = this.injector.get(Ef),
                            s = this.injector.get(Cf),
                            r = this.injector.get(ff),
                            i = this.injector.get(pc);
                        t === i.components[0] &&
                            (('enabledNonBlocking' !== e.initialNavigation && void 0 !== e.initialNavigation) || r.initialNavigation(),
                            n.setUpPreloading(),
                            s.init(),
                            r.resetRootComponentType(i.componentTypes[0]),
                            this.resultOfPreactivationDone.next(null),
                            this.resultOfPreactivationDone.complete());
                    }
                    ngOnDestroy() {
                        this.destroyed = !0;
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Ji));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            function Ff(t) {
                return t.appInitializer.bind(t);
            }
            function Mf(t) {
                return t.bootstrapListener.bind(t);
            }
            const jf = new $n('Router Initializer');
            class Hf {}
            class Bf {}
            class Vf {
                constructor(t) {
                    (this.normalizedNames = new Map()),
                        (this.lazyUpdate = null),
                        t
                            ? (this.lazyInit =
                                  'string' == typeof t
                                      ? () => {
                                            (this.headers = new Map()),
                                                t.split('\n').forEach((t) => {
                                                    const e = t.indexOf(':');
                                                    if (e > 0) {
                                                        const n = t.slice(0, e),
                                                            s = n.toLowerCase(),
                                                            r = t.slice(e + 1).trim();
                                                        this.maybeSetNormalizedName(n, s),
                                                            this.headers.has(s) ? this.headers.get(s).push(r) : this.headers.set(s, [r]);
                                                    }
                                                });
                                        }
                                      : () => {
                                            (this.headers = new Map()),
                                                Object.keys(t).forEach((e) => {
                                                    let n = t[e];
                                                    const s = e.toLowerCase();
                                                    'string' == typeof n && (n = [n]),
                                                        n.length > 0 && (this.headers.set(s, n), this.maybeSetNormalizedName(e, s));
                                                });
                                        })
                            : (this.headers = new Map());
                }
                has(t) {
                    return this.init(), this.headers.has(t.toLowerCase());
                }
                get(t) {
                    this.init();
                    const e = this.headers.get(t.toLowerCase());
                    return e && e.length > 0 ? e[0] : null;
                }
                keys() {
                    return this.init(), Array.from(this.normalizedNames.values());
                }
                getAll(t) {
                    return this.init(), this.headers.get(t.toLowerCase()) || null;
                }
                append(t, e) {
                    return this.clone({ name: t, value: e, op: 'a' });
                }
                set(t, e) {
                    return this.clone({ name: t, value: e, op: 's' });
                }
                delete(t, e) {
                    return this.clone({ name: t, value: e, op: 'd' });
                }
                maybeSetNormalizedName(t, e) {
                    this.normalizedNames.has(e) || this.normalizedNames.set(e, t);
                }
                init() {
                    this.lazyInit &&
                        (this.lazyInit instanceof Vf ? this.copyFrom(this.lazyInit) : this.lazyInit(),
                        (this.lazyInit = null),
                        this.lazyUpdate && (this.lazyUpdate.forEach((t) => this.applyUpdate(t)), (this.lazyUpdate = null)));
                }
                copyFrom(t) {
                    t.init(),
                        Array.from(t.headers.keys()).forEach((e) => {
                            this.headers.set(e, t.headers.get(e)), this.normalizedNames.set(e, t.normalizedNames.get(e));
                        });
                }
                clone(t) {
                    const e = new Vf();
                    return (
                        (e.lazyInit = this.lazyInit && this.lazyInit instanceof Vf ? this.lazyInit : this),
                        (e.lazyUpdate = (this.lazyUpdate || []).concat([t])),
                        e
                    );
                }
                applyUpdate(t) {
                    const e = t.name.toLowerCase();
                    switch (t.op) {
                        case 'a':
                        case 's':
                            let n = t.value;
                            if (('string' == typeof n && (n = [n]), 0 === n.length)) return;
                            this.maybeSetNormalizedName(t.name, e);
                            const s = ('a' === t.op ? this.headers.get(e) : void 0) || [];
                            s.push(...n), this.headers.set(e, s);
                            break;
                        case 'd':
                            const r = t.value;
                            if (r) {
                                let t = this.headers.get(e);
                                if (!t) return;
                                (t = t.filter((t) => -1 === r.indexOf(t))),
                                    0 === t.length ? (this.headers.delete(e), this.normalizedNames.delete(e)) : this.headers.set(e, t);
                            } else this.headers.delete(e), this.normalizedNames.delete(e);
                    }
                }
                forEach(t) {
                    this.init(),
                        Array.from(this.normalizedNames.keys()).forEach((e) => t(this.normalizedNames.get(e), this.headers.get(e)));
                }
            }
            class Uf {
                encodeKey(t) {
                    return qf(t);
                }
                encodeValue(t) {
                    return qf(t);
                }
                decodeKey(t) {
                    return decodeURIComponent(t);
                }
                decodeValue(t) {
                    return decodeURIComponent(t);
                }
            }
            const $f = /%(\d[a-f0-9])/gi,
                zf = { 40: '@', '3A': ':', 24: '$', '2C': ',', '3B': ';', '2B': '+', '3D': '=', '3F': '?', '2F': '/' };
            function qf(t) {
                return encodeURIComponent(t).replace($f, (t, e) => {
                    var n;
                    return null !== (n = zf[e]) && void 0 !== n ? n : t;
                });
            }
            function Wf(t) {
                return `${t}`;
            }
            class Qf {
                constructor(t = {}) {
                    if (((this.updates = null), (this.cloneFrom = null), (this.encoder = t.encoder || new Uf()), t.fromString)) {
                        if (t.fromObject) throw new Error('Cannot specify both fromString and fromObject.');
                        this.map = (function (t, e) {
                            const n = new Map();
                            return (
                                t.length > 0 &&
                                    t
                                        .replace(/^\?/, '')
                                        .split('&')
                                        .forEach((t) => {
                                            const s = t.indexOf('='),
                                                [r, i] =
                                                    -1 == s
                                                        ? [e.decodeKey(t), '']
                                                        : [e.decodeKey(t.slice(0, s)), e.decodeValue(t.slice(s + 1))],
                                                o = n.get(r) || [];
                                            o.push(i), n.set(r, o);
                                        }),
                                n
                            );
                        })(t.fromString, this.encoder);
                    } else
                        t.fromObject
                            ? ((this.map = new Map()),
                              Object.keys(t.fromObject).forEach((e) => {
                                  const n = t.fromObject[e];
                                  this.map.set(e, Array.isArray(n) ? n : [n]);
                              }))
                            : (this.map = null);
                }
                has(t) {
                    return this.init(), this.map.has(t);
                }
                get(t) {
                    this.init();
                    const e = this.map.get(t);
                    return e ? e[0] : null;
                }
                getAll(t) {
                    return this.init(), this.map.get(t) || null;
                }
                keys() {
                    return this.init(), Array.from(this.map.keys());
                }
                append(t, e) {
                    return this.clone({ param: t, value: e, op: 'a' });
                }
                appendAll(t) {
                    const e = [];
                    return (
                        Object.keys(t).forEach((n) => {
                            const s = t[n];
                            Array.isArray(s)
                                ? s.forEach((t) => {
                                      e.push({ param: n, value: t, op: 'a' });
                                  })
                                : e.push({ param: n, value: s, op: 'a' });
                        }),
                        this.clone(e)
                    );
                }
                set(t, e) {
                    return this.clone({ param: t, value: e, op: 's' });
                }
                delete(t, e) {
                    return this.clone({ param: t, value: e, op: 'd' });
                }
                toString() {
                    return (
                        this.init(),
                        this.keys()
                            .map((t) => {
                                const e = this.encoder.encodeKey(t);
                                return this.map
                                    .get(t)
                                    .map((t) => e + '=' + this.encoder.encodeValue(t))
                                    .join('&');
                            })
                            .filter((t) => '' !== t)
                            .join('&')
                    );
                }
                clone(t) {
                    const e = new Qf({ encoder: this.encoder });
                    return (e.cloneFrom = this.cloneFrom || this), (e.updates = (this.updates || []).concat(t)), e;
                }
                init() {
                    null === this.map && (this.map = new Map()),
                        null !== this.cloneFrom &&
                            (this.cloneFrom.init(),
                            this.cloneFrom.keys().forEach((t) => this.map.set(t, this.cloneFrom.map.get(t))),
                            this.updates.forEach((t) => {
                                switch (t.op) {
                                    case 'a':
                                    case 's':
                                        const e = ('a' === t.op ? this.map.get(t.param) : void 0) || [];
                                        e.push(Wf(t.value)), this.map.set(t.param, e);
                                        break;
                                    case 'd':
                                        if (void 0 === t.value) {
                                            this.map.delete(t.param);
                                            break;
                                        }
                                        {
                                            let e = this.map.get(t.param) || [];
                                            const n = e.indexOf(Wf(t.value));
                                            -1 !== n && e.splice(n, 1), e.length > 0 ? this.map.set(t.param, e) : this.map.delete(t.param);
                                        }
                                }
                            }),
                            (this.cloneFrom = this.updates = null));
                }
            }
            class Kf {
                constructor() {
                    this.map = new Map();
                }
                set(t, e) {
                    return this.map.set(t, e), this;
                }
                get(t) {
                    return this.map.has(t) || this.map.set(t, t.defaultValue()), this.map.get(t);
                }
                delete(t) {
                    return this.map.delete(t), this;
                }
                keys() {
                    return this.map.keys();
                }
            }
            function Zf(t) {
                return 'undefined' != typeof ArrayBuffer && t instanceof ArrayBuffer;
            }
            function Yf(t) {
                return 'undefined' != typeof Blob && t instanceof Blob;
            }
            function Gf(t) {
                return 'undefined' != typeof FormData && t instanceof FormData;
            }
            class Xf {
                constructor(t, e, n, s) {
                    let r;
                    if (
                        ((this.url = e),
                        (this.body = null),
                        (this.reportProgress = !1),
                        (this.withCredentials = !1),
                        (this.responseType = 'json'),
                        (this.method = t.toUpperCase()),
                        (function (t) {
                            switch (t) {
                                case 'DELETE':
                                case 'GET':
                                case 'HEAD':
                                case 'OPTIONS':
                                case 'JSONP':
                                    return !1;
                                default:
                                    return !0;
                            }
                        })(this.method) || s
                            ? ((this.body = void 0 !== n ? n : null), (r = s))
                            : (r = n),
                        r &&
                            ((this.reportProgress = !!r.reportProgress),
                            (this.withCredentials = !!r.withCredentials),
                            r.responseType && (this.responseType = r.responseType),
                            r.headers && (this.headers = r.headers),
                            r.context && (this.context = r.context),
                            r.params && (this.params = r.params)),
                        this.headers || (this.headers = new Vf()),
                        this.context || (this.context = new Kf()),
                        this.params)
                    ) {
                        const t = this.params.toString();
                        if (0 === t.length) this.urlWithParams = e;
                        else {
                            const n = e.indexOf('?');
                            this.urlWithParams = e + (-1 === n ? '?' : n < e.length - 1 ? '&' : '') + t;
                        }
                    } else (this.params = new Qf()), (this.urlWithParams = e);
                }
                serializeBody() {
                    return null === this.body
                        ? null
                        : Zf(this.body) ||
                          Yf(this.body) ||
                          Gf(this.body) ||
                          ('undefined' != typeof URLSearchParams && this.body instanceof URLSearchParams) ||
                          'string' == typeof this.body
                        ? this.body
                        : this.body instanceof Qf
                        ? this.body.toString()
                        : 'object' == typeof this.body || 'boolean' == typeof this.body || Array.isArray(this.body)
                        ? JSON.stringify(this.body)
                        : this.body.toString();
                }
                detectContentTypeHeader() {
                    return null === this.body || Gf(this.body)
                        ? null
                        : Yf(this.body)
                        ? this.body.type || null
                        : Zf(this.body)
                        ? null
                        : 'string' == typeof this.body
                        ? 'text/plain'
                        : this.body instanceof Qf
                        ? 'application/x-www-form-urlencoded;charset=UTF-8'
                        : 'object' == typeof this.body || 'number' == typeof this.body || 'boolean' == typeof this.body
                        ? 'application/json'
                        : null;
                }
                clone(t = {}) {
                    var e;
                    const n = t.method || this.method,
                        s = t.url || this.url,
                        r = t.responseType || this.responseType,
                        i = void 0 !== t.body ? t.body : this.body,
                        o = void 0 !== t.withCredentials ? t.withCredentials : this.withCredentials,
                        a = void 0 !== t.reportProgress ? t.reportProgress : this.reportProgress;
                    let l = t.headers || this.headers,
                        c = t.params || this.params;
                    const u = null !== (e = t.context) && void 0 !== e ? e : this.context;
                    return (
                        void 0 !== t.setHeaders && (l = Object.keys(t.setHeaders).reduce((e, n) => e.set(n, t.setHeaders[n]), l)),
                        t.setParams && (c = Object.keys(t.setParams).reduce((e, n) => e.set(n, t.setParams[n]), c)),
                        new Xf(n, s, i, { params: c, headers: l, context: u, reportProgress: a, responseType: r, withCredentials: o })
                    );
                }
            }
            var Jf = (() => (
                ((Jf = Jf || {})[(Jf.Sent = 0)] = 'Sent'),
                (Jf[(Jf.UploadProgress = 1)] = 'UploadProgress'),
                (Jf[(Jf.ResponseHeader = 2)] = 'ResponseHeader'),
                (Jf[(Jf.DownloadProgress = 3)] = 'DownloadProgress'),
                (Jf[(Jf.Response = 4)] = 'Response'),
                (Jf[(Jf.User = 5)] = 'User'),
                Jf
            ))();
            class tm {
                constructor(t, e = 200, n = 'OK') {
                    (this.headers = t.headers || new Vf()),
                        (this.status = void 0 !== t.status ? t.status : e),
                        (this.statusText = t.statusText || n),
                        (this.url = t.url || null),
                        (this.ok = this.status >= 200 && this.status < 300);
                }
            }
            class em extends tm {
                constructor(t = {}) {
                    super(t), (this.type = Jf.ResponseHeader);
                }
                clone(t = {}) {
                    return new em({
                        headers: t.headers || this.headers,
                        status: void 0 !== t.status ? t.status : this.status,
                        statusText: t.statusText || this.statusText,
                        url: t.url || this.url || void 0,
                    });
                }
            }
            class nm extends tm {
                constructor(t = {}) {
                    super(t), (this.type = Jf.Response), (this.body = void 0 !== t.body ? t.body : null);
                }
                clone(t = {}) {
                    return new nm({
                        body: void 0 !== t.body ? t.body : this.body,
                        headers: t.headers || this.headers,
                        status: void 0 !== t.status ? t.status : this.status,
                        statusText: t.statusText || this.statusText,
                        url: t.url || this.url || void 0,
                    });
                }
            }
            class sm extends tm {
                constructor(t) {
                    super(t, 0, 'Unknown Error'),
                        (this.name = 'HttpErrorResponse'),
                        (this.ok = !1),
                        (this.message =
                            this.status >= 200 && this.status < 300
                                ? `Http failure during parsing for ${t.url || '(unknown url)'}`
                                : `Http failure response for ${t.url || '(unknown url)'}: ${t.status} ${t.statusText}`),
                        (this.error = t.error || null);
                }
            }
            function rm(t, e) {
                return {
                    body: e,
                    headers: t.headers,
                    context: t.context,
                    observe: t.observe,
                    params: t.params,
                    reportProgress: t.reportProgress,
                    responseType: t.responseType,
                    withCredentials: t.withCredentials,
                };
            }
            let im = (() => {
                class t {
                    constructor(t) {
                        this.handler = t;
                    }
                    request(t, e, n = {}) {
                        let s;
                        if (t instanceof Xf) s = t;
                        else {
                            let r, i;
                            (r = n.headers instanceof Vf ? n.headers : new Vf(n.headers)),
                                n.params && (i = n.params instanceof Qf ? n.params : new Qf({ fromObject: n.params })),
                                (s = new Xf(t, e, void 0 !== n.body ? n.body : null, {
                                    headers: r,
                                    context: n.context,
                                    params: i,
                                    reportProgress: n.reportProgress,
                                    responseType: n.responseType || 'json',
                                    withCredentials: n.withCredentials,
                                }));
                        }
                        const r = Uu(s).pipe(_h((t) => this.handler.handle(t)));
                        if (t instanceof Xf || 'events' === n.observe) return r;
                        const i = r.pipe(dh((t) => t instanceof nm));
                        switch (n.observe || 'body') {
                            case 'body':
                                switch (s.responseType) {
                                    case 'arraybuffer':
                                        return i.pipe(
                                            k((t) => {
                                                if (null !== t.body && !(t.body instanceof ArrayBuffer))
                                                    throw new Error('Response is not an ArrayBuffer.');
                                                return t.body;
                                            })
                                        );
                                    case 'blob':
                                        return i.pipe(
                                            k((t) => {
                                                if (null !== t.body && !(t.body instanceof Blob))
                                                    throw new Error('Response is not a Blob.');
                                                return t.body;
                                            })
                                        );
                                    case 'text':
                                        return i.pipe(
                                            k((t) => {
                                                if (null !== t.body && 'string' != typeof t.body)
                                                    throw new Error('Response is not a string.');
                                                return t.body;
                                            })
                                        );
                                    case 'json':
                                    default:
                                        return i.pipe(k((t) => t.body));
                                }
                            case 'response':
                                return i;
                            default:
                                throw new Error(`Unreachable: unhandled observe type ${n.observe}}`);
                        }
                    }
                    delete(t, e = {}) {
                        return this.request('DELETE', t, e);
                    }
                    get(t, e = {}) {
                        return this.request('GET', t, e);
                    }
                    head(t, e = {}) {
                        return this.request('HEAD', t, e);
                    }
                    jsonp(t, e) {
                        return this.request('JSONP', t, {
                            params: new Qf().append(e, 'JSONP_CALLBACK'),
                            observe: 'body',
                            responseType: 'json',
                        });
                    }
                    options(t, e = {}) {
                        return this.request('OPTIONS', t, e);
                    }
                    patch(t, e, n = {}) {
                        return this.request('PATCH', t, rm(n, e));
                    }
                    post(t, e, n = {}) {
                        return this.request('POST', t, rm(n, e));
                    }
                    put(t, e, n = {}) {
                        return this.request('PUT', t, rm(n, e));
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Hf));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            class om {
                constructor(t, e) {
                    (this.next = t), (this.interceptor = e);
                }
                handle(t) {
                    return this.interceptor.intercept(t, this.next);
                }
            }
            const am = new $n('HTTP_INTERCEPTORS');
            let lm = (() => {
                class t {
                    intercept(t, e) {
                        return e.handle(t);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const cm = /^\)\]\}',?\n/;
            let um = (() => {
                class t {
                    constructor(t) {
                        this.xhrFactory = t;
                    }
                    handle(t) {
                        if ('JSONP' === t.method)
                            throw new Error('Attempted to construct Jsonp request without HttpClientJsonpModule installed.');
                        return new _((e) => {
                            const n = this.xhrFactory.build();
                            if (
                                (n.open(t.method, t.urlWithParams),
                                t.withCredentials && (n.withCredentials = !0),
                                t.headers.forEach((t, e) => n.setRequestHeader(t, e.join(','))),
                                t.headers.has('Accept') || n.setRequestHeader('Accept', 'application/json, text/plain, */*'),
                                !t.headers.has('Content-Type'))
                            ) {
                                const e = t.detectContentTypeHeader();
                                null !== e && n.setRequestHeader('Content-Type', e);
                            }
                            if (t.responseType) {
                                const e = t.responseType.toLowerCase();
                                n.responseType = 'json' !== e ? e : 'text';
                            }
                            const s = t.serializeBody();
                            let r = null;
                            const i = () => {
                                    if (null !== r) return r;
                                    const e = 1223 === n.status ? 204 : n.status,
                                        s = n.statusText || 'OK',
                                        i = new Vf(n.getAllResponseHeaders()),
                                        o =
                                            (function (t) {
                                                return 'responseURL' in t && t.responseURL
                                                    ? t.responseURL
                                                    : /^X-Request-URL:/m.test(t.getAllResponseHeaders())
                                                    ? t.getResponseHeader('X-Request-URL')
                                                    : null;
                                            })(n) || t.url;
                                    return (r = new em({ headers: i, status: e, statusText: s, url: o })), r;
                                },
                                o = () => {
                                    let { headers: s, status: r, statusText: o, url: a } = i(),
                                        l = null;
                                    204 !== r && (l = void 0 === n.response ? n.responseText : n.response), 0 === r && (r = l ? 200 : 0);
                                    let c = r >= 200 && r < 300;
                                    if ('json' === t.responseType && 'string' == typeof l) {
                                        const t = l;
                                        l = l.replace(cm, '');
                                        try {
                                            l = '' !== l ? JSON.parse(l) : null;
                                        } catch (u) {
                                            (l = t), c && ((c = !1), (l = { error: u, text: l }));
                                        }
                                    }
                                    c
                                        ? (e.next(new nm({ body: l, headers: s, status: r, statusText: o, url: a || void 0 })),
                                          e.complete())
                                        : e.error(new sm({ error: l, headers: s, status: r, statusText: o, url: a || void 0 }));
                                },
                                a = (t) => {
                                    const { url: s } = i(),
                                        r = new sm({
                                            error: t,
                                            status: n.status || 0,
                                            statusText: n.statusText || 'Unknown Error',
                                            url: s || void 0,
                                        });
                                    e.error(r);
                                };
                            let l = !1;
                            const c = (s) => {
                                    l || (e.next(i()), (l = !0));
                                    let r = { type: Jf.DownloadProgress, loaded: s.loaded };
                                    s.lengthComputable && (r.total = s.total),
                                        'text' === t.responseType && n.responseText && (r.partialText = n.responseText),
                                        e.next(r);
                                },
                                u = (t) => {
                                    let n = { type: Jf.UploadProgress, loaded: t.loaded };
                                    t.lengthComputable && (n.total = t.total), e.next(n);
                                };
                            return (
                                n.addEventListener('load', o),
                                n.addEventListener('error', a),
                                n.addEventListener('timeout', a),
                                n.addEventListener('abort', a),
                                t.reportProgress &&
                                    (n.addEventListener('progress', c), null !== s && n.upload && n.upload.addEventListener('progress', u)),
                                n.send(s),
                                e.next({ type: Jf.Sent }),
                                () => {
                                    n.removeEventListener('error', a),
                                        n.removeEventListener('abort', a),
                                        n.removeEventListener('load', o),
                                        n.removeEventListener('timeout', a),
                                        t.reportProgress &&
                                            (n.removeEventListener('progress', c),
                                            null !== s && n.upload && n.upload.removeEventListener('progress', u)),
                                        n.readyState !== n.DONE && n.abort();
                                }
                            );
                        });
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(nu));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const hm = new $n('XSRF_COOKIE_NAME'),
                dm = new $n('XSRF_HEADER_NAME');
            class pm {}
            let fm = (() => {
                    class t {
                        constructor(t, e, n) {
                            (this.doc = t),
                                (this.platform = e),
                                (this.cookieName = n),
                                (this.lastCookieString = ''),
                                (this.lastToken = null),
                                (this.parseCount = 0);
                        }
                        getToken() {
                            if ('server' === this.platform) return null;
                            const t = this.doc.cookie || '';
                            return (
                                t !== this.lastCookieString &&
                                    (this.parseCount++, (this.lastToken = Wc(t, this.cookieName)), (this.lastCookieString = t)),
                                this.lastToken
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Cc), as(Il), as(hm));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                mm = (() => {
                    class t {
                        constructor(t, e) {
                            (this.tokenService = t), (this.headerName = e);
                        }
                        intercept(t, e) {
                            const n = t.url.toLowerCase();
                            if ('GET' === t.method || 'HEAD' === t.method || n.startsWith('http://') || n.startsWith('https://'))
                                return e.handle(t);
                            const s = this.tokenService.getToken();
                            return (
                                null === s ||
                                    t.headers.has(this.headerName) ||
                                    (t = t.clone({ headers: t.headers.set(this.headerName, s) })),
                                e.handle(t)
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(pm), as(dm));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                gm = (() => {
                    class t {
                        constructor(t, e) {
                            (this.backend = t), (this.injector = e), (this.chain = null);
                        }
                        handle(t) {
                            if (null === this.chain) {
                                const t = this.injector.get(am, []);
                                this.chain = t.reduceRight((t, e) => new om(t, e), this.backend);
                            }
                            return this.chain.handle(t);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Bf), as(Ji));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                ym = (() => {
                    class t {
                        static disable() {
                            return { ngModule: t, providers: [{ provide: mm, useClass: lm }] };
                        }
                        static withOptions(e = {}) {
                            return {
                                ngModule: t,
                                providers: [
                                    e.cookieName ? { provide: hm, useValue: e.cookieName } : [],
                                    e.headerName ? { provide: dm, useValue: e.headerName } : [],
                                ],
                            };
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({
                            providers: [
                                mm,
                                { provide: am, useExisting: mm, multi: !0 },
                                { provide: pm, useClass: fm },
                                { provide: hm, useValue: 'XSRF-TOKEN' },
                                { provide: dm, useValue: 'X-XSRF-TOKEN' },
                            ],
                        })),
                        t
                    );
                })(),
                _m = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({
                            providers: [im, { provide: Hf, useClass: gm }, um, { provide: Bf, useExisting: um }],
                            imports: [[ym.withOptions({ cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN' })]],
                        })),
                        t
                    );
                })();
            class vm {}
            const bm = '*';
            function wm(t, e) {
                return { type: 7, name: t, definitions: e, options: {} };
            }
            function xm(t, e = null) {
                return { type: 4, styles: e, timings: t };
            }
            function Sm(t, e = null) {
                return { type: 2, steps: t, options: e };
            }
            function Em(t) {
                return { type: 6, styles: t, offset: null };
            }
            function Cm(t, e, n) {
                return { type: 0, name: t, styles: e, options: n };
            }
            function km(t, e, n = null) {
                return { type: 1, expr: t, animation: e, options: n };
            }
            function Tm(t) {
                Promise.resolve(null).then(t);
            }
            class Am {
                constructor(t = 0, e = 0) {
                    (this._onDoneFns = []),
                        (this._onStartFns = []),
                        (this._onDestroyFns = []),
                        (this._started = !1),
                        (this._destroyed = !1),
                        (this._finished = !1),
                        (this._position = 0),
                        (this.parentPlayer = null),
                        (this.totalTime = t + e);
                }
                _onFinish() {
                    this._finished || ((this._finished = !0), this._onDoneFns.forEach((t) => t()), (this._onDoneFns = []));
                }
                onStart(t) {
                    this._onStartFns.push(t);
                }
                onDone(t) {
                    this._onDoneFns.push(t);
                }
                onDestroy(t) {
                    this._onDestroyFns.push(t);
                }
                hasStarted() {
                    return this._started;
                }
                init() {}
                play() {
                    this.hasStarted() || (this._onStart(), this.triggerMicrotask()), (this._started = !0);
                }
                triggerMicrotask() {
                    Tm(() => this._onFinish());
                }
                _onStart() {
                    this._onStartFns.forEach((t) => t()), (this._onStartFns = []);
                }
                pause() {}
                restart() {}
                finish() {
                    this._onFinish();
                }
                destroy() {
                    this._destroyed ||
                        ((this._destroyed = !0),
                        this.hasStarted() || this._onStart(),
                        this.finish(),
                        this._onDestroyFns.forEach((t) => t()),
                        (this._onDestroyFns = []));
                }
                reset() {
                    this._started = !1;
                }
                setPosition(t) {
                    this._position = this.totalTime ? t * this.totalTime : 1;
                }
                getPosition() {
                    return this.totalTime ? this._position / this.totalTime : 1;
                }
                triggerCallback(t) {
                    const e = 'start' == t ? this._onStartFns : this._onDoneFns;
                    e.forEach((t) => t()), (e.length = 0);
                }
            }
            class Rm {
                constructor(t) {
                    (this._onDoneFns = []),
                        (this._onStartFns = []),
                        (this._finished = !1),
                        (this._started = !1),
                        (this._destroyed = !1),
                        (this._onDestroyFns = []),
                        (this.parentPlayer = null),
                        (this.totalTime = 0),
                        (this.players = t);
                    let e = 0,
                        n = 0,
                        s = 0;
                    const r = this.players.length;
                    0 == r
                        ? Tm(() => this._onFinish())
                        : this.players.forEach((t) => {
                              t.onDone(() => {
                                  ++e == r && this._onFinish();
                              }),
                                  t.onDestroy(() => {
                                      ++n == r && this._onDestroy();
                                  }),
                                  t.onStart(() => {
                                      ++s == r && this._onStart();
                                  });
                          }),
                        (this.totalTime = this.players.reduce((t, e) => Math.max(t, e.totalTime), 0));
                }
                _onFinish() {
                    this._finished || ((this._finished = !0), this._onDoneFns.forEach((t) => t()), (this._onDoneFns = []));
                }
                init() {
                    this.players.forEach((t) => t.init());
                }
                onStart(t) {
                    this._onStartFns.push(t);
                }
                _onStart() {
                    this.hasStarted() || ((this._started = !0), this._onStartFns.forEach((t) => t()), (this._onStartFns = []));
                }
                onDone(t) {
                    this._onDoneFns.push(t);
                }
                onDestroy(t) {
                    this._onDestroyFns.push(t);
                }
                hasStarted() {
                    return this._started;
                }
                play() {
                    this.parentPlayer || this.init(), this._onStart(), this.players.forEach((t) => t.play());
                }
                pause() {
                    this.players.forEach((t) => t.pause());
                }
                restart() {
                    this.players.forEach((t) => t.restart());
                }
                finish() {
                    this._onFinish(), this.players.forEach((t) => t.finish());
                }
                destroy() {
                    this._onDestroy();
                }
                _onDestroy() {
                    this._destroyed ||
                        ((this._destroyed = !0),
                        this._onFinish(),
                        this.players.forEach((t) => t.destroy()),
                        this._onDestroyFns.forEach((t) => t()),
                        (this._onDestroyFns = []));
                }
                reset() {
                    this.players.forEach((t) => t.reset()), (this._destroyed = !1), (this._finished = !1), (this._started = !1);
                }
                setPosition(t) {
                    const e = t * this.totalTime;
                    this.players.forEach((t) => {
                        const n = t.totalTime ? Math.min(1, e / t.totalTime) : 1;
                        t.setPosition(n);
                    });
                }
                getPosition() {
                    const t = this.players.reduce((t, e) => (null === t || e.totalTime > t.totalTime ? e : t), null);
                    return null != t ? t.getPosition() : 0;
                }
                beforeDestroy() {
                    this.players.forEach((t) => {
                        t.beforeDestroy && t.beforeDestroy();
                    });
                }
                triggerCallback(t) {
                    const e = 'start' == t ? this._onStartFns : this._onDoneFns;
                    e.forEach((t) => t()), (e.length = 0);
                }
            }
            function Om() {
                return 'undefined' != typeof window && void 0 !== window.document;
            }
            function Im() {
                return 'undefined' != typeof process && '[object process]' === {}.toString.call(process);
            }
            function Pm(t) {
                switch (t.length) {
                    case 0:
                        return new Am();
                    case 1:
                        return t[0];
                    default:
                        return new Rm(t);
                }
            }
            function Lm(t, e, n, s, r = {}, i = {}) {
                const o = [],
                    a = [];
                let l = -1,
                    c = null;
                if (
                    (s.forEach((t) => {
                        const n = t.offset,
                            s = n == l,
                            u = (s && c) || {};
                        Object.keys(t).forEach((n) => {
                            let s = n,
                                a = t[n];
                            if ('offset' !== n)
                                switch (((s = e.normalizePropertyName(s, o)), a)) {
                                    case '!':
                                        a = r[n];
                                        break;
                                    case bm:
                                        a = i[n];
                                        break;
                                    default:
                                        a = e.normalizeStyleValue(n, s, a, o);
                                }
                            u[s] = a;
                        }),
                            s || a.push(u),
                            (c = u),
                            (l = n);
                    }),
                    o.length)
                ) {
                    const t = '\n - ';
                    throw new Error(`Unable to animate due to the following errors:${t}${o.join(t)}`);
                }
                return a;
            }
            function Dm(t, e, n, s) {
                switch (e) {
                    case 'start':
                        t.onStart(() => s(n && Nm(n, 'start', t)));
                        break;
                    case 'done':
                        t.onDone(() => s(n && Nm(n, 'done', t)));
                        break;
                    case 'destroy':
                        t.onDestroy(() => s(n && Nm(n, 'destroy', t)));
                }
            }
            function Nm(t, e, n) {
                const s = n.totalTime,
                    r = Fm(t.element, t.triggerName, t.fromState, t.toState, e || t.phaseName, null == s ? t.totalTime : s, !!n.disabled),
                    i = t._data;
                return null != i && (r._data = i), r;
            }
            function Fm(t, e, n, s, r = '', i = 0, o) {
                return { element: t, triggerName: e, fromState: n, toState: s, phaseName: r, totalTime: i, disabled: !!o };
            }
            function Mm(t, e, n) {
                let s;
                return t instanceof Map ? ((s = t.get(e)), s || t.set(e, (s = n))) : ((s = t[e]), s || (s = t[e] = n)), s;
            }
            function jm(t) {
                const e = t.indexOf(':');
                return [t.substring(1, e), t.substr(e + 1)];
            }
            let Hm = (t, e) => !1,
                Bm = (t, e) => !1,
                Vm = (t, e, n) => [];
            const Um = Im();
            (Um || 'undefined' != typeof Element) &&
                ((Hm = Om()
                    ? (t, e) => {
                          for (; e && e !== document.documentElement; ) {
                              if (e === t) return !0;
                              e = e.parentNode || e.host;
                          }
                          return !1;
                      }
                    : (t, e) => t.contains(e)),
                (Bm = (() => {
                    if (Um || Element.prototype.matches) return (t, e) => t.matches(e);
                    {
                        const t = Element.prototype,
                            e =
                                t.matchesSelector ||
                                t.mozMatchesSelector ||
                                t.msMatchesSelector ||
                                t.oMatchesSelector ||
                                t.webkitMatchesSelector;
                        return e ? (t, n) => e.apply(t, [n]) : Bm;
                    }
                })()),
                (Vm = (t, e, n) => {
                    let s = [];
                    if (n) {
                        const n = t.querySelectorAll(e);
                        for (let t = 0; t < n.length; t++) s.push(n[t]);
                    } else {
                        const n = t.querySelector(e);
                        n && s.push(n);
                    }
                    return s;
                }));
            let $m = null,
                zm = !1;
            function qm(t) {
                $m ||
                    (($m = ('undefined' != typeof document ? document.body : null) || {}),
                    (zm = !!$m.style && 'WebkitAppearance' in $m.style));
                let e = !0;
                return (
                    $m.style &&
                        !(function (t) {
                            return 'ebkit' == t.substring(1, 6);
                        })(t) &&
                        ((e = t in $m.style), !e && zm) &&
                        (e = 'Webkit' + t.charAt(0).toUpperCase() + t.substr(1) in $m.style),
                    e
                );
            }
            const Wm = Bm,
                Qm = Hm,
                Km = Vm;
            function Zm(t) {
                const e = {};
                return (
                    Object.keys(t).forEach((n) => {
                        const s = n.replace(/([a-z])([A-Z])/g, '$1-$2');
                        e[s] = t[n];
                    }),
                    e
                );
            }
            let Ym = (() => {
                class t {
                    validateStyleProperty(t) {
                        return qm(t);
                    }
                    matchesElement(t, e) {
                        return Wm(t, e);
                    }
                    containsElement(t, e) {
                        return Qm(t, e);
                    }
                    query(t, e, n) {
                        return Km(t, e, n);
                    }
                    computeStyle(t, e, n) {
                        return n || '';
                    }
                    animate(t, e, n, s, r, i = [], o) {
                        return new Am(n, s);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            class Gm {}
            Gm.NOOP = new Ym();
            const Xm = 'ng-enter',
                Jm = 'ng-leave',
                tg = 'ng-trigger',
                eg = '.ng-trigger',
                ng = 'ng-animating',
                sg = '.ng-animating';
            function rg(t) {
                if ('number' == typeof t) return t;
                const e = t.match(/^(-?[\.\d]+)(m?s)/);
                return !e || e.length < 2 ? 0 : ig(parseFloat(e[1]), e[2]);
            }
            function ig(t, e) {
                switch (e) {
                    case 's':
                        return 1e3 * t;
                    default:
                        return t;
                }
            }
            function og(t, e, n) {
                return t.hasOwnProperty('duration')
                    ? t
                    : (function (t, e, n) {
                          let s,
                              r = 0,
                              i = '';
                          if ('string' == typeof t) {
                              const n = t.match(/^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i);
                              if (null === n)
                                  return e.push(`The provided timing value "${t}" is invalid.`), { duration: 0, delay: 0, easing: '' };
                              s = ig(parseFloat(n[1]), n[2]);
                              const o = n[3];
                              null != o && (r = ig(parseFloat(o), n[4]));
                              const a = n[5];
                              a && (i = a);
                          } else s = t;
                          if (!n) {
                              let n = !1,
                                  i = e.length;
                              s < 0 && (e.push('Duration values below 0 are not allowed for this animation step.'), (n = !0)),
                                  r < 0 && (e.push('Delay values below 0 are not allowed for this animation step.'), (n = !0)),
                                  n && e.splice(i, 0, `The provided timing value "${t}" is invalid.`);
                          }
                          return { duration: s, delay: r, easing: i };
                      })(t, e, n);
            }
            function ag(t, e = {}) {
                return (
                    Object.keys(t).forEach((n) => {
                        e[n] = t[n];
                    }),
                    e
                );
            }
            function lg(t, e, n = {}) {
                if (e) for (let s in t) n[s] = t[s];
                else ag(t, n);
                return n;
            }
            function cg(t, e, n) {
                return n ? e + ':' + n + ';' : '';
            }
            function ug(t) {
                let e = '';
                for (let n = 0; n < t.style.length; n++) {
                    const s = t.style.item(n);
                    e += cg(0, s, t.style.getPropertyValue(s));
                }
                for (const n in t.style)
                    t.style.hasOwnProperty(n) &&
                        !n.startsWith('_') &&
                        (e += cg(0, n.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(), t.style[n]));
                t.setAttribute('style', e);
            }
            function hg(t, e, n) {
                t.style &&
                    (Object.keys(e).forEach((s) => {
                        const r = vg(s);
                        n && !n.hasOwnProperty(s) && (n[s] = t.style[r]), (t.style[r] = e[s]);
                    }),
                    Im() && ug(t));
            }
            function dg(t, e) {
                t.style &&
                    (Object.keys(e).forEach((e) => {
                        const n = vg(e);
                        t.style[n] = '';
                    }),
                    Im() && ug(t));
            }
            function pg(t) {
                return Array.isArray(t) ? (1 == t.length ? t[0] : Sm(t)) : t;
            }
            const fg = new RegExp('{{\\s*(.+?)\\s*}}', 'g');
            function mg(t) {
                let e = [];
                if ('string' == typeof t) {
                    let n;
                    for (; (n = fg.exec(t)); ) e.push(n[1]);
                    fg.lastIndex = 0;
                }
                return e;
            }
            function gg(t, e, n) {
                const s = t.toString(),
                    r = s.replace(fg, (t, s) => {
                        let r = e[s];
                        return (
                            e.hasOwnProperty(s) || (n.push(`Please provide a value for the animation param ${s}`), (r = '')), r.toString()
                        );
                    });
                return r == s ? t : r;
            }
            function yg(t) {
                const e = [];
                let n = t.next();
                for (; !n.done; ) e.push(n.value), (n = t.next());
                return e;
            }
            const _g = /-+([a-z0-9])/g;
            function vg(t) {
                return t.replace(_g, (...t) => t[1].toUpperCase());
            }
            function bg(t, e) {
                return 0 === t || 0 === e;
            }
            function wg(t, e, n) {
                const s = Object.keys(n);
                if (s.length && e.length) {
                    let i = e[0],
                        o = [];
                    if (
                        (s.forEach((t) => {
                            i.hasOwnProperty(t) || o.push(t), (i[t] = n[t]);
                        }),
                        o.length)
                    )
                        for (var r = 1; r < e.length; r++) {
                            let n = e[r];
                            o.forEach(function (e) {
                                n[e] = Sg(t, e);
                            });
                        }
                }
                return e;
            }
            function xg(t, e, n) {
                switch (e.type) {
                    case 7:
                        return t.visitTrigger(e, n);
                    case 0:
                        return t.visitState(e, n);
                    case 1:
                        return t.visitTransition(e, n);
                    case 2:
                        return t.visitSequence(e, n);
                    case 3:
                        return t.visitGroup(e, n);
                    case 4:
                        return t.visitAnimate(e, n);
                    case 5:
                        return t.visitKeyframes(e, n);
                    case 6:
                        return t.visitStyle(e, n);
                    case 8:
                        return t.visitReference(e, n);
                    case 9:
                        return t.visitAnimateChild(e, n);
                    case 10:
                        return t.visitAnimateRef(e, n);
                    case 11:
                        return t.visitQuery(e, n);
                    case 12:
                        return t.visitStagger(e, n);
                    default:
                        throw new Error(`Unable to resolve animation metadata node #${e.type}`);
                }
            }
            function Sg(t, e) {
                return window.getComputedStyle(t)[e];
            }
            const Eg = '*';
            function Cg(t, e) {
                const n = [];
                return (
                    'string' == typeof t
                        ? t.split(/\s*,\s*/).forEach((t) =>
                              (function (t, e, n) {
                                  if (':' == t[0]) {
                                      const s = (function (t, e) {
                                          switch (t) {
                                              case ':enter':
                                                  return 'void => *';
                                              case ':leave':
                                                  return '* => void';
                                              case ':increment':
                                                  return (t, e) => parseFloat(e) > parseFloat(t);
                                              case ':decrement':
                                                  return (t, e) => parseFloat(e) < parseFloat(t);
                                              default:
                                                  return e.push(`The transition alias value "${t}" is not supported`), '* => *';
                                          }
                                      })(t, n);
                                      if ('function' == typeof s) return void e.push(s);
                                      t = s;
                                  }
                                  const s = t.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
                                  if (null == s || s.length < 4)
                                      return n.push(`The provided transition expression "${t}" is not supported`), e;
                                  const r = s[1],
                                      i = s[2],
                                      o = s[3];
                                  e.push(Ag(r, o)), '<' != i[0] || (r == Eg && o == Eg) || e.push(Ag(o, r));
                              })(t, n, e)
                          )
                        : n.push(t),
                    n
                );
            }
            const kg = new Set(['true', '1']),
                Tg = new Set(['false', '0']);
            function Ag(t, e) {
                const n = kg.has(t) || Tg.has(t),
                    s = kg.has(e) || Tg.has(e);
                return (r, i) => {
                    let o = t == Eg || t == r,
                        a = e == Eg || e == i;
                    return (
                        !o && n && 'boolean' == typeof r && (o = r ? kg.has(t) : Tg.has(t)),
                        !a && s && 'boolean' == typeof i && (a = i ? kg.has(e) : Tg.has(e)),
                        o && a
                    );
                };
            }
            const Rg = new RegExp('s*:selfs*,?', 'g');
            function Og(t, e, n) {
                return new Ig(t).build(e, n);
            }
            class Ig {
                constructor(t) {
                    this._driver = t;
                }
                build(t, e) {
                    const n = new Pg(e);
                    return this._resetContextStyleTimingState(n), xg(this, pg(t), n);
                }
                _resetContextStyleTimingState(t) {
                    (t.currentQuerySelector = ''), (t.collectedStyles = {}), (t.collectedStyles[''] = {}), (t.currentTime = 0);
                }
                visitTrigger(t, e) {
                    let n = (e.queryCount = 0),
                        s = (e.depCount = 0);
                    const r = [],
                        i = [];
                    return (
                        '@' == t.name.charAt(0) &&
                            e.errors.push("animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))"),
                        t.definitions.forEach((t) => {
                            if ((this._resetContextStyleTimingState(e), 0 == t.type)) {
                                const n = t,
                                    s = n.name;
                                s
                                    .toString()
                                    .split(/\s*,\s*/)
                                    .forEach((t) => {
                                        (n.name = t), r.push(this.visitState(n, e));
                                    }),
                                    (n.name = s);
                            } else if (1 == t.type) {
                                const r = this.visitTransition(t, e);
                                (n += r.queryCount), (s += r.depCount), i.push(r);
                            } else e.errors.push('only state() and transition() definitions can sit inside of a trigger()');
                        }),
                        { type: 7, name: t.name, states: r, transitions: i, queryCount: n, depCount: s, options: null }
                    );
                }
                visitState(t, e) {
                    const n = this.visitStyle(t.styles, e),
                        s = (t.options && t.options.params) || null;
                    if (n.containsDynamicStyles) {
                        const r = new Set(),
                            i = s || {};
                        if (
                            (n.styles.forEach((t) => {
                                if (Lg(t)) {
                                    const e = t;
                                    Object.keys(e).forEach((t) => {
                                        mg(e[t]).forEach((t) => {
                                            i.hasOwnProperty(t) || r.add(t);
                                        });
                                    });
                                }
                            }),
                            r.size)
                        ) {
                            const n = yg(r.values());
                            e.errors.push(
                                `state("${t.name}", ...) must define default values for all the following style substitutions: ${n.join(
                                    ', '
                                )}`
                            );
                        }
                    }
                    return { type: 0, name: t.name, style: n, options: s ? { params: s } : null };
                }
                visitTransition(t, e) {
                    (e.queryCount = 0), (e.depCount = 0);
                    const n = xg(this, pg(t.animation), e);
                    return {
                        type: 1,
                        matchers: Cg(t.expr, e.errors),
                        animation: n,
                        queryCount: e.queryCount,
                        depCount: e.depCount,
                        options: Dg(t.options),
                    };
                }
                visitSequence(t, e) {
                    return { type: 2, steps: t.steps.map((t) => xg(this, t, e)), options: Dg(t.options) };
                }
                visitGroup(t, e) {
                    const n = e.currentTime;
                    let s = 0;
                    const r = t.steps.map((t) => {
                        e.currentTime = n;
                        const r = xg(this, t, e);
                        return (s = Math.max(s, e.currentTime)), r;
                    });
                    return (e.currentTime = s), { type: 3, steps: r, options: Dg(t.options) };
                }
                visitAnimate(t, e) {
                    const n = (function (t, e) {
                        let n = null;
                        if (t.hasOwnProperty('duration')) n = t;
                        else if ('number' == typeof t) return Ng(og(t, e).duration, 0, '');
                        const s = t;
                        if (s.split(/\s+/).some((t) => '{' == t.charAt(0) && '{' == t.charAt(1))) {
                            const t = Ng(0, 0, '');
                            return (t.dynamic = !0), (t.strValue = s), t;
                        }
                        return (n = n || og(s, e)), Ng(n.duration, n.delay, n.easing);
                    })(t.timings, e.errors);
                    let s;
                    e.currentAnimateTimings = n;
                    let r = t.styles ? t.styles : Em({});
                    if (5 == r.type) s = this.visitKeyframes(r, e);
                    else {
                        let r = t.styles,
                            i = !1;
                        if (!r) {
                            i = !0;
                            const t = {};
                            n.easing && (t.easing = n.easing), (r = Em(t));
                        }
                        e.currentTime += n.duration + n.delay;
                        const o = this.visitStyle(r, e);
                        (o.isEmptyStep = i), (s = o);
                    }
                    return (e.currentAnimateTimings = null), { type: 4, timings: n, style: s, options: null };
                }
                visitStyle(t, e) {
                    const n = this._makeStyleAst(t, e);
                    return this._validateStyleAst(n, e), n;
                }
                _makeStyleAst(t, e) {
                    const n = [];
                    Array.isArray(t.styles)
                        ? t.styles.forEach((t) => {
                              'string' == typeof t
                                  ? t == bm
                                      ? n.push(t)
                                      : e.errors.push(`The provided style string value ${t} is not allowed.`)
                                  : n.push(t);
                          })
                        : n.push(t.styles);
                    let s = !1,
                        r = null;
                    return (
                        n.forEach((t) => {
                            if (Lg(t)) {
                                const e = t,
                                    n = e.easing;
                                if ((n && ((r = n), delete e.easing), !s))
                                    for (let t in e)
                                        if (e[t].toString().indexOf('{{') >= 0) {
                                            s = !0;
                                            break;
                                        }
                            }
                        }),
                        { type: 6, styles: n, easing: r, offset: t.offset, containsDynamicStyles: s, options: null }
                    );
                }
                _validateStyleAst(t, e) {
                    const n = e.currentAnimateTimings;
                    let s = e.currentTime,
                        r = e.currentTime;
                    n && r > 0 && (r -= n.duration + n.delay),
                        t.styles.forEach((t) => {
                            'string' != typeof t &&
                                Object.keys(t).forEach((n) => {
                                    if (!this._driver.validateStyleProperty(n))
                                        return void e.errors.push(
                                            `The provided animation property "${n}" is not a supported CSS property for animations`
                                        );
                                    const i = e.collectedStyles[e.currentQuerySelector],
                                        o = i[n];
                                    let a = !0;
                                    o &&
                                        (r != s &&
                                            r >= o.startTime &&
                                            s <= o.endTime &&
                                            (e.errors.push(
                                                `The CSS property "${n}" that exists between the times of "${o.startTime}ms" and "${o.endTime}ms" is also being animated in a parallel animation between the times of "${r}ms" and "${s}ms"`
                                            ),
                                            (a = !1)),
                                        (r = o.startTime)),
                                        a && (i[n] = { startTime: r, endTime: s }),
                                        e.options &&
                                            (function (t, e, n) {
                                                const s = e.params || {},
                                                    r = mg(t);
                                                r.length &&
                                                    r.forEach((t) => {
                                                        s.hasOwnProperty(t) ||
                                                            n.push(
                                                                `Unable to resolve the local animation param ${t} in the given list of values`
                                                            );
                                                    });
                                            })(t[n], e.options, e.errors);
                                });
                        });
                }
                visitKeyframes(t, e) {
                    const n = { type: 5, styles: [], options: null };
                    if (!e.currentAnimateTimings) return e.errors.push('keyframes() must be placed inside of a call to animate()'), n;
                    let s = 0;
                    const r = [];
                    let i = !1,
                        o = !1,
                        a = 0;
                    const l = t.steps.map((t) => {
                        const n = this._makeStyleAst(t, e);
                        let l =
                                null != n.offset
                                    ? n.offset
                                    : (function (t) {
                                          if ('string' == typeof t) return null;
                                          let e = null;
                                          if (Array.isArray(t))
                                              t.forEach((t) => {
                                                  if (Lg(t) && t.hasOwnProperty('offset')) {
                                                      const n = t;
                                                      (e = parseFloat(n.offset)), delete n.offset;
                                                  }
                                              });
                                          else if (Lg(t) && t.hasOwnProperty('offset')) {
                                              const n = t;
                                              (e = parseFloat(n.offset)), delete n.offset;
                                          }
                                          return e;
                                      })(n.styles),
                            c = 0;
                        return null != l && (s++, (c = n.offset = l)), (o = o || c < 0 || c > 1), (i = i || c < a), (a = c), r.push(c), n;
                    });
                    o && e.errors.push('Please ensure that all keyframe offsets are between 0 and 1'),
                        i && e.errors.push('Please ensure that all keyframe offsets are in order');
                    const c = t.steps.length;
                    let u = 0;
                    s > 0 && s < c
                        ? e.errors.push('Not all style() steps within the declared keyframes() contain offsets')
                        : 0 == s && (u = 1 / (c - 1));
                    const h = c - 1,
                        d = e.currentTime,
                        p = e.currentAnimateTimings,
                        f = p.duration;
                    return (
                        l.forEach((t, s) => {
                            const i = u > 0 ? (s == h ? 1 : u * s) : r[s],
                                o = i * f;
                            (e.currentTime = d + p.delay + o),
                                (p.duration = o),
                                this._validateStyleAst(t, e),
                                (t.offset = i),
                                n.styles.push(t);
                        }),
                        n
                    );
                }
                visitReference(t, e) {
                    return { type: 8, animation: xg(this, pg(t.animation), e), options: Dg(t.options) };
                }
                visitAnimateChild(t, e) {
                    return e.depCount++, { type: 9, options: Dg(t.options) };
                }
                visitAnimateRef(t, e) {
                    return { type: 10, animation: this.visitReference(t.animation, e), options: Dg(t.options) };
                }
                visitQuery(t, e) {
                    const n = e.currentQuerySelector,
                        s = t.options || {};
                    e.queryCount++, (e.currentQuery = t);
                    const [r, i] = (function (t) {
                        const e = !!t.split(/\s*,\s*/).find((t) => ':self' == t);
                        return (
                            e && (t = t.replace(Rg, '')),
                            [
                                (t = t
                                    .replace(/@\*/g, eg)
                                    .replace(/@\w+/g, (t) => '.ng-trigger-' + t.substr(1))
                                    .replace(/:animating/g, sg)),
                                e,
                            ]
                        );
                    })(t.selector);
                    (e.currentQuerySelector = n.length ? n + ' ' + r : r), Mm(e.collectedStyles, e.currentQuerySelector, {});
                    const o = xg(this, pg(t.animation), e);
                    return (
                        (e.currentQuery = null),
                        (e.currentQuerySelector = n),
                        {
                            type: 11,
                            selector: r,
                            limit: s.limit || 0,
                            optional: !!s.optional,
                            includeSelf: i,
                            animation: o,
                            originalSelector: t.selector,
                            options: Dg(t.options),
                        }
                    );
                }
                visitStagger(t, e) {
                    e.currentQuery || e.errors.push('stagger() can only be used inside of query()');
                    const n = 'full' === t.timings ? { duration: 0, delay: 0, easing: 'full' } : og(t.timings, e.errors, !0);
                    return { type: 12, animation: xg(this, pg(t.animation), e), timings: n, options: null };
                }
            }
            class Pg {
                constructor(t) {
                    (this.errors = t),
                        (this.queryCount = 0),
                        (this.depCount = 0),
                        (this.currentTransition = null),
                        (this.currentQuery = null),
                        (this.currentQuerySelector = null),
                        (this.currentAnimateTimings = null),
                        (this.currentTime = 0),
                        (this.collectedStyles = {}),
                        (this.options = null);
                }
            }
            function Lg(t) {
                return !Array.isArray(t) && 'object' == typeof t;
            }
            function Dg(t) {
                var e;
                return t ? (t = ag(t)).params && (t.params = (e = t.params) ? ag(e) : null) : (t = {}), t;
            }
            function Ng(t, e, n) {
                return { duration: t, delay: e, easing: n };
            }
            function Fg(t, e, n, s, r, i, o = null, a = !1) {
                return {
                    type: 1,
                    element: t,
                    keyframes: e,
                    preStyleProps: n,
                    postStyleProps: s,
                    duration: r,
                    delay: i,
                    totalTime: r + i,
                    easing: o,
                    subTimeline: a,
                };
            }
            class Mg {
                constructor() {
                    this._map = new Map();
                }
                consume(t) {
                    let e = this._map.get(t);
                    return e ? this._map.delete(t) : (e = []), e;
                }
                append(t, e) {
                    let n = this._map.get(t);
                    n || this._map.set(t, (n = [])), n.push(...e);
                }
                has(t) {
                    return this._map.has(t);
                }
                clear() {
                    this._map.clear();
                }
            }
            const jg = new RegExp(':enter', 'g'),
                Hg = new RegExp(':leave', 'g');
            function Bg(t, e, n, s, r, i = {}, o = {}, a, l, c = []) {
                return new Vg().buildKeyframes(t, e, n, s, r, i, o, a, l, c);
            }
            class Vg {
                buildKeyframes(t, e, n, s, r, i, o, a, l, c = []) {
                    l = l || new Mg();
                    const u = new $g(t, e, l, s, r, c, []);
                    (u.options = a), u.currentTimeline.setStyles([i], null, u.errors, a), xg(this, n, u);
                    const h = u.timelines.filter((t) => t.containsAnimation());
                    if (h.length && Object.keys(o).length) {
                        const t = h[h.length - 1];
                        t.allowOnlyTimelineStyles() || t.setStyles([o], null, u.errors, a);
                    }
                    return h.length ? h.map((t) => t.buildKeyframes()) : [Fg(e, [], [], [], 0, 0, '', !1)];
                }
                visitTrigger(t, e) {}
                visitState(t, e) {}
                visitTransition(t, e) {}
                visitAnimateChild(t, e) {
                    const n = e.subInstructions.consume(e.element);
                    if (n) {
                        const s = e.createSubContext(t.options),
                            r = e.currentTimeline.currentTime,
                            i = this._visitSubInstructions(n, s, s.options);
                        r != i && e.transformIntoNewTimeline(i);
                    }
                    e.previousNode = t;
                }
                visitAnimateRef(t, e) {
                    const n = e.createSubContext(t.options);
                    n.transformIntoNewTimeline(),
                        this.visitReference(t.animation, n),
                        e.transformIntoNewTimeline(n.currentTimeline.currentTime),
                        (e.previousNode = t);
                }
                _visitSubInstructions(t, e, n) {
                    let s = e.currentTimeline.currentTime;
                    const r = null != n.duration ? rg(n.duration) : null,
                        i = null != n.delay ? rg(n.delay) : null;
                    return (
                        0 !== r &&
                            t.forEach((t) => {
                                const n = e.appendInstructionToTimeline(t, r, i);
                                s = Math.max(s, n.duration + n.delay);
                            }),
                        s
                    );
                }
                visitReference(t, e) {
                    e.updateOptions(t.options, !0), xg(this, t.animation, e), (e.previousNode = t);
                }
                visitSequence(t, e) {
                    const n = e.subContextCount;
                    let s = e;
                    const r = t.options;
                    if (r && (r.params || r.delay) && ((s = e.createSubContext(r)), s.transformIntoNewTimeline(), null != r.delay)) {
                        6 == s.previousNode.type && (s.currentTimeline.snapshotCurrentStyles(), (s.previousNode = Ug));
                        const t = rg(r.delay);
                        s.delayNextStep(t);
                    }
                    t.steps.length &&
                        (t.steps.forEach((t) => xg(this, t, s)),
                        s.currentTimeline.applyStylesToKeyframe(),
                        s.subContextCount > n && s.transformIntoNewTimeline()),
                        (e.previousNode = t);
                }
                visitGroup(t, e) {
                    const n = [];
                    let s = e.currentTimeline.currentTime;
                    const r = t.options && t.options.delay ? rg(t.options.delay) : 0;
                    t.steps.forEach((i) => {
                        const o = e.createSubContext(t.options);
                        r && o.delayNextStep(r),
                            xg(this, i, o),
                            (s = Math.max(s, o.currentTimeline.currentTime)),
                            n.push(o.currentTimeline);
                    }),
                        n.forEach((t) => e.currentTimeline.mergeTimelineCollectedStyles(t)),
                        e.transformIntoNewTimeline(s),
                        (e.previousNode = t);
                }
                _visitTiming(t, e) {
                    if (t.dynamic) {
                        const n = t.strValue;
                        return og(e.params ? gg(n, e.params, e.errors) : n, e.errors);
                    }
                    return { duration: t.duration, delay: t.delay, easing: t.easing };
                }
                visitAnimate(t, e) {
                    const n = (e.currentAnimateTimings = this._visitTiming(t.timings, e)),
                        s = e.currentTimeline;
                    n.delay && (e.incrementTime(n.delay), s.snapshotCurrentStyles());
                    const r = t.style;
                    5 == r.type
                        ? this.visitKeyframes(r, e)
                        : (e.incrementTime(n.duration), this.visitStyle(r, e), s.applyStylesToKeyframe()),
                        (e.currentAnimateTimings = null),
                        (e.previousNode = t);
                }
                visitStyle(t, e) {
                    const n = e.currentTimeline,
                        s = e.currentAnimateTimings;
                    !s && n.getCurrentStyleProperties().length && n.forwardFrame();
                    const r = (s && s.easing) || t.easing;
                    t.isEmptyStep ? n.applyEmptyStep(r) : n.setStyles(t.styles, r, e.errors, e.options), (e.previousNode = t);
                }
                visitKeyframes(t, e) {
                    const n = e.currentAnimateTimings,
                        s = e.currentTimeline.duration,
                        r = n.duration,
                        i = e.createSubContext().currentTimeline;
                    (i.easing = n.easing),
                        t.styles.forEach((t) => {
                            i.forwardTime((t.offset || 0) * r),
                                i.setStyles(t.styles, t.easing, e.errors, e.options),
                                i.applyStylesToKeyframe();
                        }),
                        e.currentTimeline.mergeTimelineCollectedStyles(i),
                        e.transformIntoNewTimeline(s + r),
                        (e.previousNode = t);
                }
                visitQuery(t, e) {
                    const n = e.currentTimeline.currentTime,
                        s = t.options || {},
                        r = s.delay ? rg(s.delay) : 0;
                    r &&
                        (6 === e.previousNode.type || (0 == n && e.currentTimeline.getCurrentStyleProperties().length)) &&
                        (e.currentTimeline.snapshotCurrentStyles(), (e.previousNode = Ug));
                    let i = n;
                    const o = e.invokeQuery(t.selector, t.originalSelector, t.limit, t.includeSelf, !!s.optional, e.errors);
                    e.currentQueryTotal = o.length;
                    let a = null;
                    o.forEach((n, s) => {
                        e.currentQueryIndex = s;
                        const o = e.createSubContext(t.options, n);
                        r && o.delayNextStep(r),
                            n === e.element && (a = o.currentTimeline),
                            xg(this, t.animation, o),
                            o.currentTimeline.applyStylesToKeyframe(),
                            (i = Math.max(i, o.currentTimeline.currentTime));
                    }),
                        (e.currentQueryIndex = 0),
                        (e.currentQueryTotal = 0),
                        e.transformIntoNewTimeline(i),
                        a && (e.currentTimeline.mergeTimelineCollectedStyles(a), e.currentTimeline.snapshotCurrentStyles()),
                        (e.previousNode = t);
                }
                visitStagger(t, e) {
                    const n = e.parentContext,
                        s = e.currentTimeline,
                        r = t.timings,
                        i = Math.abs(r.duration),
                        o = i * (e.currentQueryTotal - 1);
                    let a = i * e.currentQueryIndex;
                    switch (r.duration < 0 ? 'reverse' : r.easing) {
                        case 'reverse':
                            a = o - a;
                            break;
                        case 'full':
                            a = n.currentStaggerTime;
                    }
                    const l = e.currentTimeline;
                    a && l.delayNextStep(a);
                    const c = l.currentTime;
                    xg(this, t.animation, e),
                        (e.previousNode = t),
                        (n.currentStaggerTime = s.currentTime - c + (s.startTime - n.currentTimeline.startTime));
                }
            }
            const Ug = {};
            class $g {
                constructor(t, e, n, s, r, i, o, a) {
                    (this._driver = t),
                        (this.element = e),
                        (this.subInstructions = n),
                        (this._enterClassName = s),
                        (this._leaveClassName = r),
                        (this.errors = i),
                        (this.timelines = o),
                        (this.parentContext = null),
                        (this.currentAnimateTimings = null),
                        (this.previousNode = Ug),
                        (this.subContextCount = 0),
                        (this.options = {}),
                        (this.currentQueryIndex = 0),
                        (this.currentQueryTotal = 0),
                        (this.currentStaggerTime = 0),
                        (this.currentTimeline = a || new zg(this._driver, e, 0)),
                        o.push(this.currentTimeline);
                }
                get params() {
                    return this.options.params;
                }
                updateOptions(t, e) {
                    if (!t) return;
                    const n = t;
                    let s = this.options;
                    null != n.duration && (s.duration = rg(n.duration)), null != n.delay && (s.delay = rg(n.delay));
                    const r = n.params;
                    if (r) {
                        let t = s.params;
                        t || (t = this.options.params = {}),
                            Object.keys(r).forEach((n) => {
                                (e && t.hasOwnProperty(n)) || (t[n] = gg(r[n], t, this.errors));
                            });
                    }
                }
                _copyOptions() {
                    const t = {};
                    if (this.options) {
                        const e = this.options.params;
                        if (e) {
                            const n = (t.params = {});
                            Object.keys(e).forEach((t) => {
                                n[t] = e[t];
                            });
                        }
                    }
                    return t;
                }
                createSubContext(t = null, e, n) {
                    const s = e || this.element,
                        r = new $g(
                            this._driver,
                            s,
                            this.subInstructions,
                            this._enterClassName,
                            this._leaveClassName,
                            this.errors,
                            this.timelines,
                            this.currentTimeline.fork(s, n || 0)
                        );
                    return (
                        (r.previousNode = this.previousNode),
                        (r.currentAnimateTimings = this.currentAnimateTimings),
                        (r.options = this._copyOptions()),
                        r.updateOptions(t),
                        (r.currentQueryIndex = this.currentQueryIndex),
                        (r.currentQueryTotal = this.currentQueryTotal),
                        (r.parentContext = this),
                        this.subContextCount++,
                        r
                    );
                }
                transformIntoNewTimeline(t) {
                    return (
                        (this.previousNode = Ug),
                        (this.currentTimeline = this.currentTimeline.fork(this.element, t)),
                        this.timelines.push(this.currentTimeline),
                        this.currentTimeline
                    );
                }
                appendInstructionToTimeline(t, e, n) {
                    const s = {
                            duration: null != e ? e : t.duration,
                            delay: this.currentTimeline.currentTime + (null != n ? n : 0) + t.delay,
                            easing: '',
                        },
                        r = new qg(this._driver, t.element, t.keyframes, t.preStyleProps, t.postStyleProps, s, t.stretchStartingKeyframe);
                    return this.timelines.push(r), s;
                }
                incrementTime(t) {
                    this.currentTimeline.forwardTime(this.currentTimeline.duration + t);
                }
                delayNextStep(t) {
                    t > 0 && this.currentTimeline.delayNextStep(t);
                }
                invokeQuery(t, e, n, s, r, i) {
                    let o = [];
                    if ((s && o.push(this.element), t.length > 0)) {
                        t = (t = t.replace(jg, '.' + this._enterClassName)).replace(Hg, '.' + this._leaveClassName);
                        let e = this._driver.query(this.element, t, 1 != n);
                        0 !== n && (e = n < 0 ? e.slice(e.length + n, e.length) : e.slice(0, n)), o.push(...e);
                    }
                    return (
                        r ||
                            0 != o.length ||
                            i.push(
                                `\`query("${e}")\` returned zero elements. (Use \`query("${e}", { optional: true })\` if you wish to allow this.)`
                            ),
                        o
                    );
                }
            }
            class zg {
                constructor(t, e, n, s) {
                    (this._driver = t),
                        (this.element = e),
                        (this.startTime = n),
                        (this._elementTimelineStylesLookup = s),
                        (this.duration = 0),
                        (this._previousKeyframe = {}),
                        (this._currentKeyframe = {}),
                        (this._keyframes = new Map()),
                        (this._styleSummary = {}),
                        (this._pendingStyles = {}),
                        (this._backFill = {}),
                        (this._currentEmptyStepKeyframe = null),
                        this._elementTimelineStylesLookup || (this._elementTimelineStylesLookup = new Map()),
                        (this._localTimelineStyles = Object.create(this._backFill, {})),
                        (this._globalTimelineStyles = this._elementTimelineStylesLookup.get(e)),
                        this._globalTimelineStyles ||
                            ((this._globalTimelineStyles = this._localTimelineStyles),
                            this._elementTimelineStylesLookup.set(e, this._localTimelineStyles)),
                        this._loadKeyframe();
                }
                containsAnimation() {
                    switch (this._keyframes.size) {
                        case 0:
                            return !1;
                        case 1:
                            return this.getCurrentStyleProperties().length > 0;
                        default:
                            return !0;
                    }
                }
                getCurrentStyleProperties() {
                    return Object.keys(this._currentKeyframe);
                }
                get currentTime() {
                    return this.startTime + this.duration;
                }
                delayNextStep(t) {
                    const e = 1 == this._keyframes.size && Object.keys(this._pendingStyles).length;
                    this.duration || e
                        ? (this.forwardTime(this.currentTime + t), e && this.snapshotCurrentStyles())
                        : (this.startTime += t);
                }
                fork(t, e) {
                    return this.applyStylesToKeyframe(), new zg(this._driver, t, e || this.currentTime, this._elementTimelineStylesLookup);
                }
                _loadKeyframe() {
                    this._currentKeyframe && (this._previousKeyframe = this._currentKeyframe),
                        (this._currentKeyframe = this._keyframes.get(this.duration)),
                        this._currentKeyframe ||
                            ((this._currentKeyframe = Object.create(this._backFill, {})),
                            this._keyframes.set(this.duration, this._currentKeyframe));
                }
                forwardFrame() {
                    (this.duration += 1), this._loadKeyframe();
                }
                forwardTime(t) {
                    this.applyStylesToKeyframe(), (this.duration = t), this._loadKeyframe();
                }
                _updateStyle(t, e) {
                    (this._localTimelineStyles[t] = e),
                        (this._globalTimelineStyles[t] = e),
                        (this._styleSummary[t] = { time: this.currentTime, value: e });
                }
                allowOnlyTimelineStyles() {
                    return this._currentEmptyStepKeyframe !== this._currentKeyframe;
                }
                applyEmptyStep(t) {
                    t && (this._previousKeyframe.easing = t),
                        Object.keys(this._globalTimelineStyles).forEach((t) => {
                            (this._backFill[t] = this._globalTimelineStyles[t] || bm), (this._currentKeyframe[t] = bm);
                        }),
                        (this._currentEmptyStepKeyframe = this._currentKeyframe);
                }
                setStyles(t, e, n, s) {
                    e && (this._previousKeyframe.easing = e);
                    const r = (s && s.params) || {},
                        i = (function (t, e) {
                            const n = {};
                            let s;
                            return (
                                t.forEach((t) => {
                                    '*' === t
                                        ? ((s = s || Object.keys(e)),
                                          s.forEach((t) => {
                                              n[t] = bm;
                                          }))
                                        : lg(t, !1, n);
                                }),
                                n
                            );
                        })(t, this._globalTimelineStyles);
                    Object.keys(i).forEach((t) => {
                        const e = gg(i[t], r, n);
                        (this._pendingStyles[t] = e),
                            this._localTimelineStyles.hasOwnProperty(t) ||
                                (this._backFill[t] = this._globalTimelineStyles.hasOwnProperty(t) ? this._globalTimelineStyles[t] : bm),
                            this._updateStyle(t, e);
                    });
                }
                applyStylesToKeyframe() {
                    const t = this._pendingStyles,
                        e = Object.keys(t);
                    0 != e.length &&
                        ((this._pendingStyles = {}),
                        e.forEach((e) => {
                            this._currentKeyframe[e] = t[e];
                        }),
                        Object.keys(this._localTimelineStyles).forEach((t) => {
                            this._currentKeyframe.hasOwnProperty(t) || (this._currentKeyframe[t] = this._localTimelineStyles[t]);
                        }));
                }
                snapshotCurrentStyles() {
                    Object.keys(this._localTimelineStyles).forEach((t) => {
                        const e = this._localTimelineStyles[t];
                        (this._pendingStyles[t] = e), this._updateStyle(t, e);
                    });
                }
                getFinalKeyframe() {
                    return this._keyframes.get(this.duration);
                }
                get properties() {
                    const t = [];
                    for (let e in this._currentKeyframe) t.push(e);
                    return t;
                }
                mergeTimelineCollectedStyles(t) {
                    Object.keys(t._styleSummary).forEach((e) => {
                        const n = this._styleSummary[e],
                            s = t._styleSummary[e];
                        (!n || s.time > n.time) && this._updateStyle(e, s.value);
                    });
                }
                buildKeyframes() {
                    this.applyStylesToKeyframe();
                    const t = new Set(),
                        e = new Set(),
                        n = 1 === this._keyframes.size && 0 === this.duration;
                    let s = [];
                    this._keyframes.forEach((r, i) => {
                        const o = lg(r, !0);
                        Object.keys(o).forEach((n) => {
                            const s = o[n];
                            '!' == s ? t.add(n) : s == bm && e.add(n);
                        }),
                            n || (o.offset = i / this.duration),
                            s.push(o);
                    });
                    const r = t.size ? yg(t.values()) : [],
                        i = e.size ? yg(e.values()) : [];
                    if (n) {
                        const t = s[0],
                            e = ag(t);
                        (t.offset = 0), (e.offset = 1), (s = [t, e]);
                    }
                    return Fg(this.element, s, r, i, this.duration, this.startTime, this.easing, !1);
                }
            }
            class qg extends zg {
                constructor(t, e, n, s, r, i, o = !1) {
                    super(t, e, i.delay),
                        (this.keyframes = n),
                        (this.preStyleProps = s),
                        (this.postStyleProps = r),
                        (this._stretchStartingKeyframe = o),
                        (this.timings = { duration: i.duration, delay: i.delay, easing: i.easing });
                }
                containsAnimation() {
                    return this.keyframes.length > 1;
                }
                buildKeyframes() {
                    let t = this.keyframes,
                        { delay: e, duration: n, easing: s } = this.timings;
                    if (this._stretchStartingKeyframe && e) {
                        const r = [],
                            i = n + e,
                            o = e / i,
                            a = lg(t[0], !1);
                        (a.offset = 0), r.push(a);
                        const l = lg(t[0], !1);
                        (l.offset = Wg(o)), r.push(l);
                        const c = t.length - 1;
                        for (let s = 1; s <= c; s++) {
                            let o = lg(t[s], !1);
                            (o.offset = Wg((e + o.offset * n) / i)), r.push(o);
                        }
                        (n = i), (e = 0), (s = ''), (t = r);
                    }
                    return Fg(this.element, t, this.preStyleProps, this.postStyleProps, n, e, s, !0);
                }
            }
            function Wg(t, e = 3) {
                const n = Math.pow(10, e - 1);
                return Math.round(t * n) / n;
            }
            class Qg {}
            class Kg extends Qg {
                normalizePropertyName(t, e) {
                    return vg(t);
                }
                normalizeStyleValue(t, e, n, s) {
                    let r = '';
                    const i = n.toString().trim();
                    if (Zg[e] && 0 !== n && '0' !== n)
                        if ('number' == typeof n) r = 'px';
                        else {
                            const e = n.match(/^[+-]?[\d\.]+([a-z]*)$/);
                            e && 0 == e[1].length && s.push(`Please provide a CSS unit value for ${t}:${n}`);
                        }
                    return i + r;
                }
            }
            const Zg = (() =>
                (function (t) {
                    const e = {};
                    return t.forEach((t) => (e[t] = !0)), e;
                })(
                    'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'.split(
                        ','
                    )
                ))();
            function Yg(t, e, n, s, r, i, o, a, l, c, u, h, d) {
                return {
                    type: 0,
                    element: t,
                    triggerName: e,
                    isRemovalTransition: r,
                    fromState: n,
                    fromStyles: i,
                    toState: s,
                    toStyles: o,
                    timelines: a,
                    queriedElements: l,
                    preStyleProps: c,
                    postStyleProps: u,
                    totalTime: h,
                    errors: d,
                };
            }
            const Gg = {};
            class Xg {
                constructor(t, e, n) {
                    (this._triggerName = t), (this.ast = e), (this._stateStyles = n);
                }
                match(t, e, n, s) {
                    return (function (t, e, n, s, r) {
                        return t.some((t) => t(e, n, s, r));
                    })(this.ast.matchers, t, e, n, s);
                }
                buildStyles(t, e, n) {
                    const s = this._stateStyles['*'],
                        r = this._stateStyles[t],
                        i = s ? s.buildStyles(e, n) : {};
                    return r ? r.buildStyles(e, n) : i;
                }
                build(t, e, n, s, r, i, o, a, l, c) {
                    const u = [],
                        h = (this.ast.options && this.ast.options.params) || Gg,
                        d = this.buildStyles(n, (o && o.params) || Gg, u),
                        p = (a && a.params) || Gg,
                        f = this.buildStyles(s, p, u),
                        m = new Set(),
                        g = new Map(),
                        y = new Map(),
                        _ = 'void' === s,
                        v = { params: Object.assign(Object.assign({}, h), p) },
                        b = c ? [] : Bg(t, e, this.ast.animation, r, i, d, f, v, l, u);
                    let w = 0;
                    if (
                        (b.forEach((t) => {
                            w = Math.max(t.duration + t.delay, w);
                        }),
                        u.length)
                    )
                        return Yg(e, this._triggerName, n, s, _, d, f, [], [], g, y, w, u);
                    b.forEach((t) => {
                        const n = t.element,
                            s = Mm(g, n, {});
                        t.preStyleProps.forEach((t) => (s[t] = !0));
                        const r = Mm(y, n, {});
                        t.postStyleProps.forEach((t) => (r[t] = !0)), n !== e && m.add(n);
                    });
                    const x = yg(m.values());
                    return Yg(e, this._triggerName, n, s, _, d, f, b, x, g, y, w);
                }
            }
            class Jg {
                constructor(t, e, n) {
                    (this.styles = t), (this.defaultParams = e), (this.normalizer = n);
                }
                buildStyles(t, e) {
                    const n = {},
                        s = ag(this.defaultParams);
                    return (
                        Object.keys(t).forEach((e) => {
                            const n = t[e];
                            null != n && (s[e] = n);
                        }),
                        this.styles.styles.forEach((t) => {
                            if ('string' != typeof t) {
                                const r = t;
                                Object.keys(r).forEach((t) => {
                                    let i = r[t];
                                    i.length > 1 && (i = gg(i, s, e));
                                    const o = this.normalizer.normalizePropertyName(t, e);
                                    (i = this.normalizer.normalizeStyleValue(t, o, i, e)), (n[o] = i);
                                });
                            }
                        }),
                        n
                    );
                }
            }
            class ty {
                constructor(t, e, n) {
                    (this.name = t),
                        (this.ast = e),
                        (this._normalizer = n),
                        (this.transitionFactories = []),
                        (this.states = {}),
                        e.states.forEach((t) => {
                            this.states[t.name] = new Jg(t.style, (t.options && t.options.params) || {}, n);
                        }),
                        ey(this.states, 'true', '1'),
                        ey(this.states, 'false', '0'),
                        e.transitions.forEach((e) => {
                            this.transitionFactories.push(new Xg(t, e, this.states));
                        }),
                        (this.fallbackTransition = new Xg(
                            t,
                            {
                                type: 1,
                                animation: { type: 2, steps: [], options: null },
                                matchers: [(t, e) => !0],
                                options: null,
                                queryCount: 0,
                                depCount: 0,
                            },
                            this.states
                        ));
                }
                get containsQueries() {
                    return this.ast.queryCount > 0;
                }
                matchTransition(t, e, n, s) {
                    return this.transitionFactories.find((r) => r.match(t, e, n, s)) || null;
                }
                matchStyles(t, e, n) {
                    return this.fallbackTransition.buildStyles(t, e, n);
                }
            }
            function ey(t, e, n) {
                t.hasOwnProperty(e) ? t.hasOwnProperty(n) || (t[n] = t[e]) : t.hasOwnProperty(n) && (t[e] = t[n]);
            }
            const ny = new Mg();
            class sy {
                constructor(t, e, n) {
                    (this.bodyNode = t),
                        (this._driver = e),
                        (this._normalizer = n),
                        (this._animations = {}),
                        (this._playersById = {}),
                        (this.players = []);
                }
                register(t, e) {
                    const n = [],
                        s = Og(this._driver, e, n);
                    if (n.length) throw new Error(`Unable to build the animation due to the following errors: ${n.join('\n')}`);
                    this._animations[t] = s;
                }
                _buildPlayer(t, e, n) {
                    const s = t.element,
                        r = Lm(0, this._normalizer, 0, t.keyframes, e, n);
                    return this._driver.animate(s, r, t.duration, t.delay, t.easing, [], !0);
                }
                create(t, e, n = {}) {
                    const s = [],
                        r = this._animations[t];
                    let i;
                    const o = new Map();
                    if (
                        (r
                            ? ((i = Bg(this._driver, e, r, Xm, Jm, {}, {}, n, ny, s)),
                              i.forEach((t) => {
                                  const e = Mm(o, t.element, {});
                                  t.postStyleProps.forEach((t) => (e[t] = null));
                              }))
                            : (s.push("The requested animation doesn't exist or has already been destroyed"), (i = [])),
                        s.length)
                    )
                        throw new Error(`Unable to create the animation due to the following errors: ${s.join('\n')}`);
                    o.forEach((t, e) => {
                        Object.keys(t).forEach((n) => {
                            t[n] = this._driver.computeStyle(e, n, bm);
                        });
                    });
                    const a = Pm(
                        i.map((t) => {
                            const e = o.get(t.element);
                            return this._buildPlayer(t, {}, e);
                        })
                    );
                    return (this._playersById[t] = a), a.onDestroy(() => this.destroy(t)), this.players.push(a), a;
                }
                destroy(t) {
                    const e = this._getPlayer(t);
                    e.destroy(), delete this._playersById[t];
                    const n = this.players.indexOf(e);
                    n >= 0 && this.players.splice(n, 1);
                }
                _getPlayer(t) {
                    const e = this._playersById[t];
                    if (!e) throw new Error(`Unable to find the timeline player referenced by ${t}`);
                    return e;
                }
                listen(t, e, n, s) {
                    const r = Fm(e, '', '', '');
                    return Dm(this._getPlayer(t), n, r, s), () => {};
                }
                command(t, e, n, s) {
                    if ('register' == n) return void this.register(t, s[0]);
                    if ('create' == n) return void this.create(t, e, s[0] || {});
                    const r = this._getPlayer(t);
                    switch (n) {
                        case 'play':
                            r.play();
                            break;
                        case 'pause':
                            r.pause();
                            break;
                        case 'reset':
                            r.reset();
                            break;
                        case 'restart':
                            r.restart();
                            break;
                        case 'finish':
                            r.finish();
                            break;
                        case 'init':
                            r.init();
                            break;
                        case 'setPosition':
                            r.setPosition(parseFloat(s[0]));
                            break;
                        case 'destroy':
                            this.destroy(t);
                    }
                }
            }
            const ry = 'ng-animate-queued',
                iy = 'ng-animate-disabled',
                oy = '.ng-animate-disabled',
                ay = [],
                ly = { namespaceId: '', setForRemoval: !1, setForMove: !1, hasAnimation: !1, removedBeforeQueried: !1 },
                cy = { namespaceId: '', setForMove: !1, setForRemoval: !1, hasAnimation: !1, removedBeforeQueried: !0 };
            class uy {
                constructor(t, e = '') {
                    this.namespaceId = e;
                    const n = t && t.hasOwnProperty('value');
                    if (((this.value = null != (s = n ? t.value : t) ? s : null), n)) {
                        const e = ag(t);
                        delete e.value, (this.options = e);
                    } else this.options = {};
                    var s;
                    this.options.params || (this.options.params = {});
                }
                get params() {
                    return this.options.params;
                }
                absorbOptions(t) {
                    const e = t.params;
                    if (e) {
                        const t = this.options.params;
                        Object.keys(e).forEach((n) => {
                            null == t[n] && (t[n] = e[n]);
                        });
                    }
                }
            }
            const hy = 'void',
                dy = new uy(hy);
            class py {
                constructor(t, e, n) {
                    (this.id = t),
                        (this.hostElement = e),
                        (this._engine = n),
                        (this.players = []),
                        (this._triggers = {}),
                        (this._queue = []),
                        (this._elementListeners = new Map()),
                        (this._hostClassName = 'ng-tns-' + t),
                        by(e, this._hostClassName);
                }
                listen(t, e, n, s) {
                    if (!this._triggers.hasOwnProperty(e))
                        throw new Error(
                            `Unable to listen on the animation trigger event "${n}" because the animation trigger "${e}" doesn't exist!`
                        );
                    if (null == n || 0 == n.length)
                        throw new Error(`Unable to listen on the animation trigger "${e}" because the provided event is undefined!`);
                    if ('start' != (r = n) && 'done' != r)
                        throw new Error(`The provided animation trigger event "${n}" for the animation trigger "${e}" is not supported!`);
                    var r;
                    const i = Mm(this._elementListeners, t, []),
                        o = { name: e, phase: n, callback: s };
                    i.push(o);
                    const a = Mm(this._engine.statesByElement, t, {});
                    return (
                        a.hasOwnProperty(e) || (by(t, tg), by(t, 'ng-trigger-' + e), (a[e] = dy)),
                        () => {
                            this._engine.afterFlush(() => {
                                const t = i.indexOf(o);
                                t >= 0 && i.splice(t, 1), this._triggers[e] || delete a[e];
                            });
                        }
                    );
                }
                register(t, e) {
                    return !this._triggers[t] && ((this._triggers[t] = e), !0);
                }
                _getTrigger(t) {
                    const e = this._triggers[t];
                    if (!e) throw new Error(`The provided animation trigger "${t}" has not been registered!`);
                    return e;
                }
                trigger(t, e, n, s = !0) {
                    const r = this._getTrigger(e),
                        i = new my(this.id, e, t);
                    let o = this._engine.statesByElement.get(t);
                    o || (by(t, tg), by(t, 'ng-trigger-' + e), this._engine.statesByElement.set(t, (o = {})));
                    let a = o[e];
                    const l = new uy(n, this.id);
                    if (
                        (!(n && n.hasOwnProperty('value')) && a && l.absorbOptions(a.options),
                        (o[e] = l),
                        a || (a = dy),
                        l.value !== hy && a.value === l.value)
                    ) {
                        if (
                            !(function (t, e) {
                                const n = Object.keys(t),
                                    s = Object.keys(e);
                                if (n.length != s.length) return !1;
                                for (let r = 0; r < n.length; r++) {
                                    const s = n[r];
                                    if (!e.hasOwnProperty(s) || t[s] !== e[s]) return !1;
                                }
                                return !0;
                            })(a.params, l.params)
                        ) {
                            const e = [],
                                n = r.matchStyles(a.value, a.params, e),
                                s = r.matchStyles(l.value, l.params, e);
                            e.length
                                ? this._engine.reportError(e)
                                : this._engine.afterFlush(() => {
                                      dg(t, n), hg(t, s);
                                  });
                        }
                        return;
                    }
                    const c = Mm(this._engine.playersByElement, t, []);
                    c.forEach((t) => {
                        t.namespaceId == this.id && t.triggerName == e && t.queued && t.destroy();
                    });
                    let u = r.matchTransition(a.value, l.value, t, l.params),
                        h = !1;
                    if (!u) {
                        if (!s) return;
                        (u = r.fallbackTransition), (h = !0);
                    }
                    return (
                        this._engine.totalQueuedPlayers++,
                        this._queue.push({
                            element: t,
                            triggerName: e,
                            transition: u,
                            fromState: a,
                            toState: l,
                            player: i,
                            isFallbackTransition: h,
                        }),
                        h ||
                            (by(t, ry),
                            i.onStart(() => {
                                wy(t, ry);
                            })),
                        i.onDone(() => {
                            let e = this.players.indexOf(i);
                            e >= 0 && this.players.splice(e, 1);
                            const n = this._engine.playersByElement.get(t);
                            if (n) {
                                let t = n.indexOf(i);
                                t >= 0 && n.splice(t, 1);
                            }
                        }),
                        this.players.push(i),
                        c.push(i),
                        i
                    );
                }
                deregister(t) {
                    delete this._triggers[t],
                        this._engine.statesByElement.forEach((e, n) => {
                            delete e[t];
                        }),
                        this._elementListeners.forEach((e, n) => {
                            this._elementListeners.set(
                                n,
                                e.filter((e) => e.name != t)
                            );
                        });
                }
                clearElementCache(t) {
                    this._engine.statesByElement.delete(t), this._elementListeners.delete(t);
                    const e = this._engine.playersByElement.get(t);
                    e && (e.forEach((t) => t.destroy()), this._engine.playersByElement.delete(t));
                }
                _signalRemovalForInnerTriggers(t, e) {
                    const n = this._engine.driver.query(t, eg, !0);
                    n.forEach((t) => {
                        if (t.__ng_removed) return;
                        const n = this._engine.fetchNamespacesByElement(t);
                        n.size ? n.forEach((n) => n.triggerLeaveAnimation(t, e, !1, !0)) : this.clearElementCache(t);
                    }),
                        this._engine.afterFlushAnimationsDone(() => n.forEach((t) => this.clearElementCache(t)));
                }
                triggerLeaveAnimation(t, e, n, s) {
                    const r = this._engine.statesByElement.get(t);
                    if (r) {
                        const i = [];
                        if (
                            (Object.keys(r).forEach((e) => {
                                if (this._triggers[e]) {
                                    const n = this.trigger(t, e, hy, s);
                                    n && i.push(n);
                                }
                            }),
                            i.length)
                        )
                            return (
                                this._engine.markElementAsRemoved(this.id, t, !0, e),
                                n && Pm(i).onDone(() => this._engine.processLeaveNode(t)),
                                !0
                            );
                    }
                    return !1;
                }
                prepareLeaveAnimationListeners(t) {
                    const e = this._elementListeners.get(t),
                        n = this._engine.statesByElement.get(t);
                    if (e && n) {
                        const s = new Set();
                        e.forEach((e) => {
                            const r = e.name;
                            if (s.has(r)) return;
                            s.add(r);
                            const i = this._triggers[r].fallbackTransition,
                                o = n[r] || dy,
                                a = new uy(hy),
                                l = new my(this.id, r, t);
                            this._engine.totalQueuedPlayers++,
                                this._queue.push({
                                    element: t,
                                    triggerName: r,
                                    transition: i,
                                    fromState: o,
                                    toState: a,
                                    player: l,
                                    isFallbackTransition: !0,
                                });
                        });
                    }
                }
                removeNode(t, e) {
                    const n = this._engine;
                    if ((t.childElementCount && this._signalRemovalForInnerTriggers(t, e), this.triggerLeaveAnimation(t, e, !0))) return;
                    let s = !1;
                    if (n.totalAnimations) {
                        const e = n.players.length ? n.playersByQueriedElement.get(t) : [];
                        if (e && e.length) s = !0;
                        else {
                            let e = t;
                            for (; (e = e.parentNode); )
                                if (n.statesByElement.get(e)) {
                                    s = !0;
                                    break;
                                }
                        }
                    }
                    if ((this.prepareLeaveAnimationListeners(t), s)) n.markElementAsRemoved(this.id, t, !1, e);
                    else {
                        const s = t.__ng_removed;
                        (s && s !== ly) ||
                            (n.afterFlush(() => this.clearElementCache(t)), n.destroyInnerAnimations(t), n._onRemovalComplete(t, e));
                    }
                }
                insertNode(t, e) {
                    by(t, this._hostClassName);
                }
                drainQueuedTransitions(t) {
                    const e = [];
                    return (
                        this._queue.forEach((n) => {
                            const s = n.player;
                            if (s.destroyed) return;
                            const r = n.element,
                                i = this._elementListeners.get(r);
                            i &&
                                i.forEach((e) => {
                                    if (e.name == n.triggerName) {
                                        const s = Fm(r, n.triggerName, n.fromState.value, n.toState.value);
                                        (s._data = t), Dm(n.player, e.phase, s, e.callback);
                                    }
                                }),
                                s.markedForDestroy
                                    ? this._engine.afterFlush(() => {
                                          s.destroy();
                                      })
                                    : e.push(n);
                        }),
                        (this._queue = []),
                        e.sort((t, e) => {
                            const n = t.transition.ast.depCount,
                                s = e.transition.ast.depCount;
                            return 0 == n || 0 == s ? n - s : this._engine.driver.containsElement(t.element, e.element) ? 1 : -1;
                        })
                    );
                }
                destroy(t) {
                    this.players.forEach((t) => t.destroy()), this._signalRemovalForInnerTriggers(this.hostElement, t);
                }
                elementContainsData(t) {
                    let e = !1;
                    return this._elementListeners.has(t) && (e = !0), (e = !!this._queue.find((e) => e.element === t) || e), e;
                }
            }
            class fy {
                constructor(t, e, n) {
                    (this.bodyNode = t),
                        (this.driver = e),
                        (this._normalizer = n),
                        (this.players = []),
                        (this.newHostElements = new Map()),
                        (this.playersByElement = new Map()),
                        (this.playersByQueriedElement = new Map()),
                        (this.statesByElement = new Map()),
                        (this.disabledNodes = new Set()),
                        (this.totalAnimations = 0),
                        (this.totalQueuedPlayers = 0),
                        (this._namespaceLookup = {}),
                        (this._namespaceList = []),
                        (this._flushFns = []),
                        (this._whenQuietFns = []),
                        (this.namespacesByHostElement = new Map()),
                        (this.collectedEnterElements = []),
                        (this.collectedLeaveElements = []),
                        (this.onRemovalComplete = (t, e) => {});
                }
                _onRemovalComplete(t, e) {
                    this.onRemovalComplete(t, e);
                }
                get queuedPlayers() {
                    const t = [];
                    return (
                        this._namespaceList.forEach((e) => {
                            e.players.forEach((e) => {
                                e.queued && t.push(e);
                            });
                        }),
                        t
                    );
                }
                createNamespace(t, e) {
                    const n = new py(t, e, this);
                    return (
                        this.bodyNode && this.driver.containsElement(this.bodyNode, e)
                            ? this._balanceNamespaceList(n, e)
                            : (this.newHostElements.set(e, n), this.collectEnterElement(e)),
                        (this._namespaceLookup[t] = n)
                    );
                }
                _balanceNamespaceList(t, e) {
                    const n = this._namespaceList.length - 1;
                    if (n >= 0) {
                        let s = !1;
                        for (let r = n; r >= 0; r--)
                            if (this.driver.containsElement(this._namespaceList[r].hostElement, e)) {
                                this._namespaceList.splice(r + 1, 0, t), (s = !0);
                                break;
                            }
                        s || this._namespaceList.splice(0, 0, t);
                    } else this._namespaceList.push(t);
                    return this.namespacesByHostElement.set(e, t), t;
                }
                register(t, e) {
                    let n = this._namespaceLookup[t];
                    return n || (n = this.createNamespace(t, e)), n;
                }
                registerTrigger(t, e, n) {
                    let s = this._namespaceLookup[t];
                    s && s.register(e, n) && this.totalAnimations++;
                }
                destroy(t, e) {
                    if (!t) return;
                    const n = this._fetchNamespace(t);
                    this.afterFlush(() => {
                        this.namespacesByHostElement.delete(n.hostElement), delete this._namespaceLookup[t];
                        const e = this._namespaceList.indexOf(n);
                        e >= 0 && this._namespaceList.splice(e, 1);
                    }),
                        this.afterFlushAnimationsDone(() => n.destroy(e));
                }
                _fetchNamespace(t) {
                    return this._namespaceLookup[t];
                }
                fetchNamespacesByElement(t) {
                    const e = new Set(),
                        n = this.statesByElement.get(t);
                    if (n) {
                        const t = Object.keys(n);
                        for (let s = 0; s < t.length; s++) {
                            const r = n[t[s]].namespaceId;
                            if (r) {
                                const t = this._fetchNamespace(r);
                                t && e.add(t);
                            }
                        }
                    }
                    return e;
                }
                trigger(t, e, n, s) {
                    if (gy(e)) {
                        const r = this._fetchNamespace(t);
                        if (r) return r.trigger(e, n, s), !0;
                    }
                    return !1;
                }
                insertNode(t, e, n, s) {
                    if (!gy(e)) return;
                    const r = e.__ng_removed;
                    if (r && r.setForRemoval) {
                        (r.setForRemoval = !1), (r.setForMove = !0);
                        const t = this.collectedLeaveElements.indexOf(e);
                        t >= 0 && this.collectedLeaveElements.splice(t, 1);
                    }
                    if (t) {
                        const s = this._fetchNamespace(t);
                        s && s.insertNode(e, n);
                    }
                    s && this.collectEnterElement(e);
                }
                collectEnterElement(t) {
                    this.collectedEnterElements.push(t);
                }
                markElementAsDisabled(t, e) {
                    e
                        ? this.disabledNodes.has(t) || (this.disabledNodes.add(t), by(t, iy))
                        : this.disabledNodes.has(t) && (this.disabledNodes.delete(t), wy(t, iy));
                }
                removeNode(t, e, n, s) {
                    if (gy(e)) {
                        const r = t ? this._fetchNamespace(t) : null;
                        if ((r ? r.removeNode(e, s) : this.markElementAsRemoved(t, e, !1, s), n)) {
                            const n = this.namespacesByHostElement.get(e);
                            n && n.id !== t && n.removeNode(e, s);
                        }
                    } else this._onRemovalComplete(e, s);
                }
                markElementAsRemoved(t, e, n, s) {
                    this.collectedLeaveElements.push(e),
                        (e.__ng_removed = { namespaceId: t, setForRemoval: s, hasAnimation: n, removedBeforeQueried: !1 });
                }
                listen(t, e, n, s, r) {
                    return gy(e) ? this._fetchNamespace(t).listen(e, n, s, r) : () => {};
                }
                _buildInstruction(t, e, n, s, r) {
                    return t.transition.build(
                        this.driver,
                        t.element,
                        t.fromState.value,
                        t.toState.value,
                        n,
                        s,
                        t.fromState.options,
                        t.toState.options,
                        e,
                        r
                    );
                }
                destroyInnerAnimations(t) {
                    let e = this.driver.query(t, eg, !0);
                    e.forEach((t) => this.destroyActiveAnimationsForElement(t)),
                        0 != this.playersByQueriedElement.size &&
                            ((e = this.driver.query(t, sg, !0)), e.forEach((t) => this.finishActiveQueriedAnimationOnElement(t)));
                }
                destroyActiveAnimationsForElement(t) {
                    const e = this.playersByElement.get(t);
                    e &&
                        e.forEach((t) => {
                            t.queued ? (t.markedForDestroy = !0) : t.destroy();
                        });
                }
                finishActiveQueriedAnimationOnElement(t) {
                    const e = this.playersByQueriedElement.get(t);
                    e && e.forEach((t) => t.finish());
                }
                whenRenderingDone() {
                    return new Promise((t) => {
                        if (this.players.length) return Pm(this.players).onDone(() => t());
                        t();
                    });
                }
                processLeaveNode(t) {
                    const e = t.__ng_removed;
                    if (e && e.setForRemoval) {
                        if (((t.__ng_removed = ly), e.namespaceId)) {
                            this.destroyInnerAnimations(t);
                            const n = this._fetchNamespace(e.namespaceId);
                            n && n.clearElementCache(t);
                        }
                        this._onRemovalComplete(t, e.setForRemoval);
                    }
                    this.driver.matchesElement(t, oy) && this.markElementAsDisabled(t, !1),
                        this.driver.query(t, oy, !0).forEach((t) => {
                            this.markElementAsDisabled(t, !1);
                        });
                }
                flush(t = -1) {
                    let e = [];
                    if (
                        (this.newHostElements.size &&
                            (this.newHostElements.forEach((t, e) => this._balanceNamespaceList(t, e)), this.newHostElements.clear()),
                        this.totalAnimations && this.collectedEnterElements.length)
                    )
                        for (let n = 0; n < this.collectedEnterElements.length; n++) by(this.collectedEnterElements[n], 'ng-star-inserted');
                    if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
                        const n = [];
                        try {
                            e = this._flushAnimations(n, t);
                        } finally {
                            for (let t = 0; t < n.length; t++) n[t]();
                        }
                    } else
                        for (let n = 0; n < this.collectedLeaveElements.length; n++) this.processLeaveNode(this.collectedLeaveElements[n]);
                    if (
                        ((this.totalQueuedPlayers = 0),
                        (this.collectedEnterElements.length = 0),
                        (this.collectedLeaveElements.length = 0),
                        this._flushFns.forEach((t) => t()),
                        (this._flushFns = []),
                        this._whenQuietFns.length)
                    ) {
                        const t = this._whenQuietFns;
                        (this._whenQuietFns = []),
                            e.length
                                ? Pm(e).onDone(() => {
                                      t.forEach((t) => t());
                                  })
                                : t.forEach((t) => t());
                    }
                }
                reportError(t) {
                    throw new Error(`Unable to process animations due to the following failed trigger transitions\n ${t.join('\n')}`);
                }
                _flushAnimations(t, e) {
                    const n = new Mg(),
                        s = [],
                        r = new Map(),
                        i = [],
                        o = new Map(),
                        a = new Map(),
                        l = new Map(),
                        c = new Set();
                    this.disabledNodes.forEach((t) => {
                        c.add(t);
                        const e = this.driver.query(t, '.ng-animate-queued', !0);
                        for (let n = 0; n < e.length; n++) c.add(e[n]);
                    });
                    const u = this.bodyNode,
                        h = Array.from(this.statesByElement.keys()),
                        d = vy(h, this.collectedEnterElements),
                        p = new Map();
                    let f = 0;
                    d.forEach((t, e) => {
                        const n = Xm + f++;
                        p.set(e, n), t.forEach((t) => by(t, n));
                    });
                    const m = [],
                        g = new Set(),
                        y = new Set();
                    for (let O = 0; O < this.collectedLeaveElements.length; O++) {
                        const t = this.collectedLeaveElements[O],
                            e = t.__ng_removed;
                        e &&
                            e.setForRemoval &&
                            (m.push(t),
                            g.add(t),
                            e.hasAnimation ? this.driver.query(t, '.ng-star-inserted', !0).forEach((t) => g.add(t)) : y.add(t));
                    }
                    const _ = new Map(),
                        v = vy(h, Array.from(g));
                    v.forEach((t, e) => {
                        const n = Jm + f++;
                        _.set(e, n), t.forEach((t) => by(t, n));
                    }),
                        t.push(() => {
                            d.forEach((t, e) => {
                                const n = p.get(e);
                                t.forEach((t) => wy(t, n));
                            }),
                                v.forEach((t, e) => {
                                    const n = _.get(e);
                                    t.forEach((t) => wy(t, n));
                                }),
                                m.forEach((t) => {
                                    this.processLeaveNode(t);
                                });
                        });
                    const b = [],
                        w = [];
                    for (let O = this._namespaceList.length - 1; O >= 0; O--)
                        this._namespaceList[O].drainQueuedTransitions(e).forEach((t) => {
                            const e = t.player,
                                r = t.element;
                            if ((b.push(e), this.collectedEnterElements.length)) {
                                const t = r.__ng_removed;
                                if (t && t.setForMove) return void e.destroy();
                            }
                            const c = !u || !this.driver.containsElement(u, r),
                                h = _.get(r),
                                d = p.get(r),
                                f = this._buildInstruction(t, n, d, h, c);
                            if (f.errors && f.errors.length) w.push(f);
                            else {
                                if (c) return e.onStart(() => dg(r, f.fromStyles)), e.onDestroy(() => hg(r, f.toStyles)), void s.push(e);
                                if (t.isFallbackTransition)
                                    return e.onStart(() => dg(r, f.fromStyles)), e.onDestroy(() => hg(r, f.toStyles)), void s.push(e);
                                f.timelines.forEach((t) => (t.stretchStartingKeyframe = !0)),
                                    n.append(r, f.timelines),
                                    i.push({ instruction: f, player: e, element: r }),
                                    f.queriedElements.forEach((t) => Mm(o, t, []).push(e)),
                                    f.preStyleProps.forEach((t, e) => {
                                        const n = Object.keys(t);
                                        if (n.length) {
                                            let t = a.get(e);
                                            t || a.set(e, (t = new Set())), n.forEach((e) => t.add(e));
                                        }
                                    }),
                                    f.postStyleProps.forEach((t, e) => {
                                        const n = Object.keys(t);
                                        let s = l.get(e);
                                        s || l.set(e, (s = new Set())), n.forEach((t) => s.add(t));
                                    });
                            }
                        });
                    if (w.length) {
                        const t = [];
                        w.forEach((e) => {
                            t.push(`@${e.triggerName} has failed due to:\n`), e.errors.forEach((e) => t.push(`- ${e}\n`));
                        }),
                            b.forEach((t) => t.destroy()),
                            this.reportError(t);
                    }
                    const x = new Map(),
                        S = new Map();
                    i.forEach((t) => {
                        const e = t.element;
                        n.has(e) && (S.set(e, e), this._beforeAnimationBuild(t.player.namespaceId, t.instruction, x));
                    }),
                        s.forEach((t) => {
                            const e = t.element;
                            this._getPreviousPlayers(e, !1, t.namespaceId, t.triggerName, null).forEach((t) => {
                                Mm(x, e, []).push(t), t.destroy();
                            });
                        });
                    const E = m.filter((t) => Ey(t, a, l)),
                        C = new Map();
                    _y(C, this.driver, y, l, bm).forEach((t) => {
                        Ey(t, a, l) && E.push(t);
                    });
                    const k = new Map();
                    d.forEach((t, e) => {
                        _y(k, this.driver, new Set(t), a, '!');
                    }),
                        E.forEach((t) => {
                            const e = C.get(t),
                                n = k.get(t);
                            C.set(t, Object.assign(Object.assign({}, e), n));
                        });
                    const T = [],
                        A = [],
                        R = {};
                    i.forEach((t) => {
                        const { element: e, player: i, instruction: o } = t;
                        if (n.has(e)) {
                            if (c.has(e))
                                return (
                                    i.onDestroy(() => hg(e, o.toStyles)),
                                    (i.disabled = !0),
                                    i.overrideTotalTime(o.totalTime),
                                    void s.push(i)
                                );
                            let t = R;
                            if (S.size > 1) {
                                let n = e;
                                const s = [];
                                for (; (n = n.parentNode); ) {
                                    const e = S.get(n);
                                    if (e) {
                                        t = e;
                                        break;
                                    }
                                    s.push(n);
                                }
                                s.forEach((e) => S.set(e, t));
                            }
                            const n = this._buildAnimation(i.namespaceId, o, x, r, k, C);
                            if ((i.setRealPlayer(n), t === R)) T.push(i);
                            else {
                                const e = this.playersByElement.get(t);
                                e && e.length && (i.parentPlayer = Pm(e)), s.push(i);
                            }
                        } else dg(e, o.fromStyles), i.onDestroy(() => hg(e, o.toStyles)), A.push(i), c.has(e) && s.push(i);
                    }),
                        A.forEach((t) => {
                            const e = r.get(t.element);
                            if (e && e.length) {
                                const n = Pm(e);
                                t.setRealPlayer(n);
                            }
                        }),
                        s.forEach((t) => {
                            t.parentPlayer ? t.syncPlayerEvents(t.parentPlayer) : t.destroy();
                        });
                    for (let O = 0; O < m.length; O++) {
                        const t = m[O],
                            e = t.__ng_removed;
                        if ((wy(t, Jm), e && e.hasAnimation)) continue;
                        let n = [];
                        if (o.size) {
                            let e = o.get(t);
                            e && e.length && n.push(...e);
                            let s = this.driver.query(t, sg, !0);
                            for (let t = 0; t < s.length; t++) {
                                let e = o.get(s[t]);
                                e && e.length && n.push(...e);
                            }
                        }
                        const s = n.filter((t) => !t.destroyed);
                        s.length ? xy(this, t, s) : this.processLeaveNode(t);
                    }
                    return (
                        (m.length = 0),
                        T.forEach((t) => {
                            this.players.push(t),
                                t.onDone(() => {
                                    t.destroy();
                                    const e = this.players.indexOf(t);
                                    this.players.splice(e, 1);
                                }),
                                t.play();
                        }),
                        T
                    );
                }
                elementContainsData(t, e) {
                    let n = !1;
                    const s = e.__ng_removed;
                    return (
                        s && s.setForRemoval && (n = !0),
                        this.playersByElement.has(e) && (n = !0),
                        this.playersByQueriedElement.has(e) && (n = !0),
                        this.statesByElement.has(e) && (n = !0),
                        this._fetchNamespace(t).elementContainsData(e) || n
                    );
                }
                afterFlush(t) {
                    this._flushFns.push(t);
                }
                afterFlushAnimationsDone(t) {
                    this._whenQuietFns.push(t);
                }
                _getPreviousPlayers(t, e, n, s, r) {
                    let i = [];
                    if (e) {
                        const e = this.playersByQueriedElement.get(t);
                        e && (i = e);
                    } else {
                        const e = this.playersByElement.get(t);
                        if (e) {
                            const t = !r || r == hy;
                            e.forEach((e) => {
                                e.queued || ((t || e.triggerName == s) && i.push(e));
                            });
                        }
                    }
                    return (n || s) && (i = i.filter((t) => !((n && n != t.namespaceId) || (s && s != t.triggerName)))), i;
                }
                _beforeAnimationBuild(t, e, n) {
                    const s = e.element,
                        r = e.isRemovalTransition ? void 0 : t,
                        i = e.isRemovalTransition ? void 0 : e.triggerName;
                    for (const o of e.timelines) {
                        const t = o.element,
                            a = t !== s,
                            l = Mm(n, t, []);
                        this._getPreviousPlayers(t, a, r, i, e.toState).forEach((t) => {
                            const e = t.getRealPlayer();
                            e.beforeDestroy && e.beforeDestroy(), t.destroy(), l.push(t);
                        });
                    }
                    dg(s, e.fromStyles);
                }
                _buildAnimation(t, e, n, s, r, i) {
                    const o = e.triggerName,
                        a = e.element,
                        l = [],
                        c = new Set(),
                        u = new Set(),
                        h = e.timelines.map((e) => {
                            const h = e.element;
                            c.add(h);
                            const d = h.__ng_removed;
                            if (d && d.removedBeforeQueried) return new Am(e.duration, e.delay);
                            const p = h !== a,
                                f = (function (t) {
                                    const e = [];
                                    return Sy(t, e), e;
                                })((n.get(h) || ay).map((t) => t.getRealPlayer())).filter((t) => !!t.element && t.element === h),
                                m = r.get(h),
                                g = i.get(h),
                                y = Lm(0, this._normalizer, 0, e.keyframes, m, g),
                                _ = this._buildPlayer(e, y, f);
                            if ((e.subTimeline && s && u.add(h), p)) {
                                const e = new my(t, o, h);
                                e.setRealPlayer(_), l.push(e);
                            }
                            return _;
                        });
                    l.forEach((t) => {
                        Mm(this.playersByQueriedElement, t.element, []).push(t),
                            t.onDone(() =>
                                (function (t, e, n) {
                                    let s;
                                    if (t instanceof Map) {
                                        if (((s = t.get(e)), s)) {
                                            if (s.length) {
                                                const t = s.indexOf(n);
                                                s.splice(t, 1);
                                            }
                                            0 == s.length && t.delete(e);
                                        }
                                    } else if (((s = t[e]), s)) {
                                        if (s.length) {
                                            const t = s.indexOf(n);
                                            s.splice(t, 1);
                                        }
                                        0 == s.length && delete t[e];
                                    }
                                    return s;
                                })(this.playersByQueriedElement, t.element, t)
                            );
                    }),
                        c.forEach((t) => by(t, ng));
                    const d = Pm(h);
                    return (
                        d.onDestroy(() => {
                            c.forEach((t) => wy(t, ng)), hg(a, e.toStyles);
                        }),
                        u.forEach((t) => {
                            Mm(s, t, []).push(d);
                        }),
                        d
                    );
                }
                _buildPlayer(t, e, n) {
                    return e.length > 0 ? this.driver.animate(t.element, e, t.duration, t.delay, t.easing, n) : new Am(t.duration, t.delay);
                }
            }
            class my {
                constructor(t, e, n) {
                    (this.namespaceId = t),
                        (this.triggerName = e),
                        (this.element = n),
                        (this._player = new Am()),
                        (this._containsRealPlayer = !1),
                        (this._queuedCallbacks = {}),
                        (this.destroyed = !1),
                        (this.markedForDestroy = !1),
                        (this.disabled = !1),
                        (this.queued = !0),
                        (this.totalTime = 0);
                }
                setRealPlayer(t) {
                    this._containsRealPlayer ||
                        ((this._player = t),
                        Object.keys(this._queuedCallbacks).forEach((e) => {
                            this._queuedCallbacks[e].forEach((n) => Dm(t, e, void 0, n));
                        }),
                        (this._queuedCallbacks = {}),
                        (this._containsRealPlayer = !0),
                        this.overrideTotalTime(t.totalTime),
                        (this.queued = !1));
                }
                getRealPlayer() {
                    return this._player;
                }
                overrideTotalTime(t) {
                    this.totalTime = t;
                }
                syncPlayerEvents(t) {
                    const e = this._player;
                    e.triggerCallback && t.onStart(() => e.triggerCallback('start')),
                        t.onDone(() => this.finish()),
                        t.onDestroy(() => this.destroy());
                }
                _queueEvent(t, e) {
                    Mm(this._queuedCallbacks, t, []).push(e);
                }
                onDone(t) {
                    this.queued && this._queueEvent('done', t), this._player.onDone(t);
                }
                onStart(t) {
                    this.queued && this._queueEvent('start', t), this._player.onStart(t);
                }
                onDestroy(t) {
                    this.queued && this._queueEvent('destroy', t), this._player.onDestroy(t);
                }
                init() {
                    this._player.init();
                }
                hasStarted() {
                    return !this.queued && this._player.hasStarted();
                }
                play() {
                    !this.queued && this._player.play();
                }
                pause() {
                    !this.queued && this._player.pause();
                }
                restart() {
                    !this.queued && this._player.restart();
                }
                finish() {
                    this._player.finish();
                }
                destroy() {
                    (this.destroyed = !0), this._player.destroy();
                }
                reset() {
                    !this.queued && this._player.reset();
                }
                setPosition(t) {
                    this.queued || this._player.setPosition(t);
                }
                getPosition() {
                    return this.queued ? 0 : this._player.getPosition();
                }
                triggerCallback(t) {
                    const e = this._player;
                    e.triggerCallback && e.triggerCallback(t);
                }
            }
            function gy(t) {
                return t && 1 === t.nodeType;
            }
            function yy(t, e) {
                const n = t.style.display;
                return (t.style.display = null != e ? e : 'none'), n;
            }
            function _y(t, e, n, s, r) {
                const i = [];
                n.forEach((t) => i.push(yy(t)));
                const o = [];
                s.forEach((n, s) => {
                    const i = {};
                    n.forEach((t) => {
                        const n = (i[t] = e.computeStyle(s, t, r));
                        (n && 0 != n.length) || ((s.__ng_removed = cy), o.push(s));
                    }),
                        t.set(s, i);
                });
                let a = 0;
                return n.forEach((t) => yy(t, i[a++])), o;
            }
            function vy(t, e) {
                const n = new Map();
                if ((t.forEach((t) => n.set(t, [])), 0 == e.length)) return n;
                const s = new Set(e),
                    r = new Map();
                function i(t) {
                    if (!t) return 1;
                    let e = r.get(t);
                    if (e) return e;
                    const o = t.parentNode;
                    return (e = n.has(o) ? o : s.has(o) ? 1 : i(o)), r.set(t, e), e;
                }
                return (
                    e.forEach((t) => {
                        const e = i(t);
                        1 !== e && n.get(e).push(t);
                    }),
                    n
                );
            }
            function by(t, e) {
                if (t.classList) t.classList.add(e);
                else {
                    let n = t.$$classes;
                    n || (n = t.$$classes = {}), (n[e] = !0);
                }
            }
            function wy(t, e) {
                if (t.classList) t.classList.remove(e);
                else {
                    let n = t.$$classes;
                    n && delete n[e];
                }
            }
            function xy(t, e, n) {
                Pm(n).onDone(() => t.processLeaveNode(e));
            }
            function Sy(t, e) {
                for (let n = 0; n < t.length; n++) {
                    const s = t[n];
                    s instanceof Rm ? Sy(s.players, e) : e.push(s);
                }
            }
            function Ey(t, e, n) {
                const s = n.get(t);
                if (!s) return !1;
                let r = e.get(t);
                return r ? s.forEach((t) => r.add(t)) : e.set(t, s), n.delete(t), !0;
            }
            class Cy {
                constructor(t, e, n) {
                    (this.bodyNode = t),
                        (this._driver = e),
                        (this._normalizer = n),
                        (this._triggerCache = {}),
                        (this.onRemovalComplete = (t, e) => {}),
                        (this._transitionEngine = new fy(t, e, n)),
                        (this._timelineEngine = new sy(t, e, n)),
                        (this._transitionEngine.onRemovalComplete = (t, e) => this.onRemovalComplete(t, e));
                }
                registerTrigger(t, e, n, s, r) {
                    const i = t + '-' + s;
                    let o = this._triggerCache[i];
                    if (!o) {
                        const t = [],
                            e = Og(this._driver, r, t);
                        if (t.length)
                            throw new Error(
                                `The animation trigger "${s}" has failed to build due to the following errors:\n - ${t.join('\n - ')}`
                            );
                        (o = (function (t, e, n) {
                            return new ty(t, e, n);
                        })(s, e, this._normalizer)),
                            (this._triggerCache[i] = o);
                    }
                    this._transitionEngine.registerTrigger(e, s, o);
                }
                register(t, e) {
                    this._transitionEngine.register(t, e);
                }
                destroy(t, e) {
                    this._transitionEngine.destroy(t, e);
                }
                onInsert(t, e, n, s) {
                    this._transitionEngine.insertNode(t, e, n, s);
                }
                onRemove(t, e, n, s) {
                    this._transitionEngine.removeNode(t, e, s || !1, n);
                }
                disableAnimations(t, e) {
                    this._transitionEngine.markElementAsDisabled(t, e);
                }
                process(t, e, n, s) {
                    if ('@' == n.charAt(0)) {
                        const [t, r] = jm(n);
                        this._timelineEngine.command(t, e, r, s);
                    } else this._transitionEngine.trigger(t, e, n, s);
                }
                listen(t, e, n, s, r) {
                    if ('@' == n.charAt(0)) {
                        const [t, s] = jm(n);
                        return this._timelineEngine.listen(t, e, s, r);
                    }
                    return this._transitionEngine.listen(t, e, n, s, r);
                }
                flush(t = -1) {
                    this._transitionEngine.flush(t);
                }
                get players() {
                    return this._transitionEngine.players.concat(this._timelineEngine.players);
                }
                whenRenderingDone() {
                    return this._transitionEngine.whenRenderingDone();
                }
            }
            function ky(t, e) {
                let n = null,
                    s = null;
                return (
                    Array.isArray(e) && e.length ? ((n = Ay(e[0])), e.length > 1 && (s = Ay(e[e.length - 1]))) : e && (n = Ay(e)),
                    n || s ? new Ty(t, n, s) : null
                );
            }
            class Ty {
                constructor(t, e, n) {
                    (this._element = t), (this._startStyles = e), (this._endStyles = n), (this._state = 0);
                    let s = Ty.initialStylesByElement.get(t);
                    s || Ty.initialStylesByElement.set(t, (s = {})), (this._initialStyles = s);
                }
                start() {
                    this._state < 1 && (this._startStyles && hg(this._element, this._startStyles, this._initialStyles), (this._state = 1));
                }
                finish() {
                    this.start(),
                        this._state < 2 &&
                            (hg(this._element, this._initialStyles),
                            this._endStyles && (hg(this._element, this._endStyles), (this._endStyles = null)),
                            (this._state = 1));
                }
                destroy() {
                    this.finish(),
                        this._state < 3 &&
                            (Ty.initialStylesByElement.delete(this._element),
                            this._startStyles && (dg(this._element, this._startStyles), (this._endStyles = null)),
                            this._endStyles && (dg(this._element, this._endStyles), (this._endStyles = null)),
                            hg(this._element, this._initialStyles),
                            (this._state = 3));
                }
            }
            function Ay(t) {
                let e = null;
                const n = Object.keys(t);
                for (let s = 0; s < n.length; s++) {
                    const r = n[s];
                    Ry(r) && ((e = e || {}), (e[r] = t[r]));
                }
                return e;
            }
            function Ry(t) {
                return 'display' === t || 'position' === t;
            }
            Ty.initialStylesByElement = new WeakMap();
            const Oy = 'animation',
                Iy = 'animationend';
            class Py {
                constructor(t, e, n, s, r, i, o) {
                    (this._element = t),
                        (this._name = e),
                        (this._duration = n),
                        (this._delay = s),
                        (this._easing = r),
                        (this._fillMode = i),
                        (this._onDoneFn = o),
                        (this._finished = !1),
                        (this._destroyed = !1),
                        (this._startTime = 0),
                        (this._position = 0),
                        (this._eventFn = (t) => this._handleCallback(t));
                }
                apply() {
                    !(function (t, e) {
                        const n = jy(t, '').trim();
                        n.length &&
                            ((function (t, e) {
                                let n = 0;
                                for (let s = 0; s < t.length; s++) ',' === t.charAt(s) && n++;
                            })(n),
                            (e = `${n}, ${e}`)),
                            My(t, '', e);
                    })(this._element, `${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${this._name}`),
                        Fy(this._element, this._eventFn, !1),
                        (this._startTime = Date.now());
                }
                pause() {
                    Ly(this._element, this._name, 'paused');
                }
                resume() {
                    Ly(this._element, this._name, 'running');
                }
                setPosition(t) {
                    const e = Dy(this._element, this._name);
                    (this._position = t * this._duration), My(this._element, 'Delay', `-${this._position}ms`, e);
                }
                getPosition() {
                    return this._position;
                }
                _handleCallback(t) {
                    const e = t._ngTestManualTimestamp || Date.now(),
                        n = 1e3 * parseFloat(t.elapsedTime.toFixed(3));
                    t.animationName == this._name &&
                        Math.max(e - this._startTime, 0) >= this._delay &&
                        n >= this._duration &&
                        this.finish();
                }
                finish() {
                    this._finished || ((this._finished = !0), this._onDoneFn(), Fy(this._element, this._eventFn, !0));
                }
                destroy() {
                    this._destroyed ||
                        ((this._destroyed = !0),
                        this.finish(),
                        (function (t, e) {
                            const n = jy(t, '').split(','),
                                s = Ny(n, e);
                            s >= 0 && (n.splice(s, 1), My(t, '', n.join(',')));
                        })(this._element, this._name));
                }
            }
            function Ly(t, e, n) {
                My(t, 'PlayState', n, Dy(t, e));
            }
            function Dy(t, e) {
                const n = jy(t, '');
                return n.indexOf(',') > 0 ? Ny(n.split(','), e) : Ny([n], e);
            }
            function Ny(t, e) {
                for (let n = 0; n < t.length; n++) if (t[n].indexOf(e) >= 0) return n;
                return -1;
            }
            function Fy(t, e, n) {
                n ? t.removeEventListener(Iy, e) : t.addEventListener(Iy, e);
            }
            function My(t, e, n, s) {
                const r = Oy + e;
                if (null != s) {
                    const e = t.style[r];
                    if (e.length) {
                        const t = e.split(',');
                        (t[s] = n), (n = t.join(','));
                    }
                }
                t.style[r] = n;
            }
            function jy(t, e) {
                return t.style[Oy + e] || '';
            }
            class Hy {
                constructor(t, e, n, s, r, i, o, a) {
                    (this.element = t),
                        (this.keyframes = e),
                        (this.animationName = n),
                        (this._duration = s),
                        (this._delay = r),
                        (this._finalStyles = o),
                        (this._specialStyles = a),
                        (this._onDoneFns = []),
                        (this._onStartFns = []),
                        (this._onDestroyFns = []),
                        (this.currentSnapshot = {}),
                        (this._state = 0),
                        (this.easing = i || 'linear'),
                        (this.totalTime = s + r),
                        this._buildStyler();
                }
                onStart(t) {
                    this._onStartFns.push(t);
                }
                onDone(t) {
                    this._onDoneFns.push(t);
                }
                onDestroy(t) {
                    this._onDestroyFns.push(t);
                }
                destroy() {
                    this.init(),
                        this._state >= 4 ||
                            ((this._state = 4),
                            this._styler.destroy(),
                            this._flushStartFns(),
                            this._flushDoneFns(),
                            this._specialStyles && this._specialStyles.destroy(),
                            this._onDestroyFns.forEach((t) => t()),
                            (this._onDestroyFns = []));
                }
                _flushDoneFns() {
                    this._onDoneFns.forEach((t) => t()), (this._onDoneFns = []);
                }
                _flushStartFns() {
                    this._onStartFns.forEach((t) => t()), (this._onStartFns = []);
                }
                finish() {
                    this.init(),
                        this._state >= 3 ||
                            ((this._state = 3),
                            this._styler.finish(),
                            this._flushStartFns(),
                            this._specialStyles && this._specialStyles.finish(),
                            this._flushDoneFns());
                }
                setPosition(t) {
                    this._styler.setPosition(t);
                }
                getPosition() {
                    return this._styler.getPosition();
                }
                hasStarted() {
                    return this._state >= 2;
                }
                init() {
                    this._state >= 1 || ((this._state = 1), this._styler.apply(), this._delay && this._styler.pause());
                }
                play() {
                    this.init(),
                        this.hasStarted() || (this._flushStartFns(), (this._state = 2), this._specialStyles && this._specialStyles.start()),
                        this._styler.resume();
                }
                pause() {
                    this.init(), this._styler.pause();
                }
                restart() {
                    this.reset(), this.play();
                }
                reset() {
                    (this._state = 0), this._styler.destroy(), this._buildStyler(), this._styler.apply();
                }
                _buildStyler() {
                    this._styler = new Py(this.element, this.animationName, this._duration, this._delay, this.easing, 'forwards', () =>
                        this.finish()
                    );
                }
                triggerCallback(t) {
                    const e = 'start' == t ? this._onStartFns : this._onDoneFns;
                    e.forEach((t) => t()), (e.length = 0);
                }
                beforeDestroy() {
                    this.init();
                    const t = {};
                    if (this.hasStarted()) {
                        const e = this._state >= 3;
                        Object.keys(this._finalStyles).forEach((n) => {
                            'offset' != n && (t[n] = e ? this._finalStyles[n] : Sg(this.element, n));
                        });
                    }
                    this.currentSnapshot = t;
                }
            }
            class By extends Am {
                constructor(t, e) {
                    super(), (this.element = t), (this._startingStyles = {}), (this.__initialized = !1), (this._styles = Zm(e));
                }
                init() {
                    !this.__initialized &&
                        this._startingStyles &&
                        ((this.__initialized = !0),
                        Object.keys(this._styles).forEach((t) => {
                            this._startingStyles[t] = this.element.style[t];
                        }),
                        super.init());
                }
                play() {
                    this._startingStyles &&
                        (this.init(),
                        Object.keys(this._styles).forEach((t) => this.element.style.setProperty(t, this._styles[t])),
                        super.play());
                }
                destroy() {
                    this._startingStyles &&
                        (Object.keys(this._startingStyles).forEach((t) => {
                            const e = this._startingStyles[t];
                            e ? this.element.style.setProperty(t, e) : this.element.style.removeProperty(t);
                        }),
                        (this._startingStyles = null),
                        super.destroy());
                }
            }
            class Vy {
                constructor() {
                    this._count = 0;
                }
                validateStyleProperty(t) {
                    return qm(t);
                }
                matchesElement(t, e) {
                    return Wm(t, e);
                }
                containsElement(t, e) {
                    return Qm(t, e);
                }
                query(t, e, n) {
                    return Km(t, e, n);
                }
                computeStyle(t, e, n) {
                    return window.getComputedStyle(t)[e];
                }
                buildKeyframeElement(t, e, n) {
                    n = n.map((t) => Zm(t));
                    let s = `@keyframes ${e} {\n`,
                        r = '';
                    n.forEach((t) => {
                        r = ' ';
                        const e = parseFloat(t.offset);
                        (s += `${r}${100 * e}% {\n`),
                            (r += ' '),
                            Object.keys(t).forEach((e) => {
                                const n = t[e];
                                switch (e) {
                                    case 'offset':
                                        return;
                                    case 'easing':
                                        return void (n && (s += `${r}animation-timing-function: ${n};\n`));
                                    default:
                                        return void (s += `${r}${e}: ${n};\n`);
                                }
                            }),
                            (s += `${r}}\n`);
                    }),
                        (s += '}\n');
                    const i = document.createElement('style');
                    return (i.textContent = s), i;
                }
                animate(t, e, n, s, r, i = [], o) {
                    const a = i.filter((t) => t instanceof Hy),
                        l = {};
                    bg(n, s) &&
                        a.forEach((t) => {
                            let e = t.currentSnapshot;
                            Object.keys(e).forEach((t) => (l[t] = e[t]));
                        });
                    const c = (function (t) {
                        let e = {};
                        return (
                            t &&
                                (Array.isArray(t) ? t : [t]).forEach((t) => {
                                    Object.keys(t).forEach((n) => {
                                        'offset' != n && 'easing' != n && (e[n] = t[n]);
                                    });
                                }),
                            e
                        );
                    })((e = wg(t, e, l)));
                    if (0 == n) return new By(t, c);
                    const u = 'gen_css_kf_' + this._count++,
                        h = this.buildKeyframeElement(t, u, e);
                    (function (t) {
                        var e;
                        const n = null === (e = t.getRootNode) || void 0 === e ? void 0 : e.call(t);
                        return 'undefined' != typeof ShadowRoot && n instanceof ShadowRoot ? n : document.head;
                    })(t).appendChild(h);
                    const d = ky(t, e),
                        p = new Hy(t, e, u, n, s, r, c, d);
                    return (
                        p.onDestroy(() => {
                            var t;
                            (t = h).parentNode.removeChild(t);
                        }),
                        p
                    );
                }
            }
            class Uy {
                constructor(t, e, n, s) {
                    (this.element = t),
                        (this.keyframes = e),
                        (this.options = n),
                        (this._specialStyles = s),
                        (this._onDoneFns = []),
                        (this._onStartFns = []),
                        (this._onDestroyFns = []),
                        (this._initialized = !1),
                        (this._finished = !1),
                        (this._started = !1),
                        (this._destroyed = !1),
                        (this.time = 0),
                        (this.parentPlayer = null),
                        (this.currentSnapshot = {}),
                        (this._duration = n.duration),
                        (this._delay = n.delay || 0),
                        (this.time = this._duration + this._delay);
                }
                _onFinish() {
                    this._finished || ((this._finished = !0), this._onDoneFns.forEach((t) => t()), (this._onDoneFns = []));
                }
                init() {
                    this._buildPlayer(), this._preparePlayerBeforeStart();
                }
                _buildPlayer() {
                    if (this._initialized) return;
                    this._initialized = !0;
                    const t = this.keyframes;
                    (this.domPlayer = this._triggerWebAnimation(this.element, t, this.options)),
                        (this._finalKeyframe = t.length ? t[t.length - 1] : {}),
                        this.domPlayer.addEventListener('finish', () => this._onFinish());
                }
                _preparePlayerBeforeStart() {
                    this._delay ? this._resetDomPlayerState() : this.domPlayer.pause();
                }
                _triggerWebAnimation(t, e, n) {
                    return t.animate(e, n);
                }
                onStart(t) {
                    this._onStartFns.push(t);
                }
                onDone(t) {
                    this._onDoneFns.push(t);
                }
                onDestroy(t) {
                    this._onDestroyFns.push(t);
                }
                play() {
                    this._buildPlayer(),
                        this.hasStarted() ||
                            (this._onStartFns.forEach((t) => t()),
                            (this._onStartFns = []),
                            (this._started = !0),
                            this._specialStyles && this._specialStyles.start()),
                        this.domPlayer.play();
                }
                pause() {
                    this.init(), this.domPlayer.pause();
                }
                finish() {
                    this.init(), this._specialStyles && this._specialStyles.finish(), this._onFinish(), this.domPlayer.finish();
                }
                reset() {
                    this._resetDomPlayerState(), (this._destroyed = !1), (this._finished = !1), (this._started = !1);
                }
                _resetDomPlayerState() {
                    this.domPlayer && this.domPlayer.cancel();
                }
                restart() {
                    this.reset(), this.play();
                }
                hasStarted() {
                    return this._started;
                }
                destroy() {
                    this._destroyed ||
                        ((this._destroyed = !0),
                        this._resetDomPlayerState(),
                        this._onFinish(),
                        this._specialStyles && this._specialStyles.destroy(),
                        this._onDestroyFns.forEach((t) => t()),
                        (this._onDestroyFns = []));
                }
                setPosition(t) {
                    void 0 === this.domPlayer && this.init(), (this.domPlayer.currentTime = t * this.time);
                }
                getPosition() {
                    return this.domPlayer.currentTime / this.time;
                }
                get totalTime() {
                    return this._delay + this._duration;
                }
                beforeDestroy() {
                    const t = {};
                    this.hasStarted() &&
                        Object.keys(this._finalKeyframe).forEach((e) => {
                            'offset' != e && (t[e] = this._finished ? this._finalKeyframe[e] : Sg(this.element, e));
                        }),
                        (this.currentSnapshot = t);
                }
                triggerCallback(t) {
                    const e = 'start' == t ? this._onStartFns : this._onDoneFns;
                    e.forEach((t) => t()), (e.length = 0);
                }
            }
            class $y {
                constructor() {
                    (this._isNativeImpl = /\{\s*\[native\s+code\]\s*\}/.test(zy().toString())), (this._cssKeyframesDriver = new Vy());
                }
                validateStyleProperty(t) {
                    return qm(t);
                }
                matchesElement(t, e) {
                    return Wm(t, e);
                }
                containsElement(t, e) {
                    return Qm(t, e);
                }
                query(t, e, n) {
                    return Km(t, e, n);
                }
                computeStyle(t, e, n) {
                    return window.getComputedStyle(t)[e];
                }
                overrideWebAnimationsSupport(t) {
                    this._isNativeImpl = t;
                }
                animate(t, e, n, s, r, i = [], o) {
                    if (!o && !this._isNativeImpl) return this._cssKeyframesDriver.animate(t, e, n, s, r, i);
                    const a = { duration: n, delay: s, fill: 0 == s ? 'both' : 'forwards' };
                    r && (a.easing = r);
                    const l = {},
                        c = i.filter((t) => t instanceof Uy);
                    bg(n, s) &&
                        c.forEach((t) => {
                            let e = t.currentSnapshot;
                            Object.keys(e).forEach((t) => (l[t] = e[t]));
                        });
                    const u = ky(t, (e = wg(t, (e = e.map((t) => lg(t, !1))), l)));
                    return new Uy(t, e, a, u);
                }
            }
            function zy() {
                return (Om() && Element.prototype.animate) || {};
            }
            let qy = (() => {
                class t extends vm {
                    constructor(t, e) {
                        super(),
                            (this._nextAnimationId = 0),
                            (this._renderer = t.createRenderer(e.body, {
                                id: '0',
                                encapsulation: kt.None,
                                styles: [],
                                data: { animation: [] },
                            }));
                    }
                    build(t) {
                        const e = this._nextAnimationId.toString();
                        this._nextAnimationId++;
                        const n = Array.isArray(t) ? Sm(t) : t;
                        return Ky(this._renderer, null, e, 'register', [n]), new Wy(e, this._renderer);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(la), as(Cc));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            class Wy extends class {} {
                constructor(t, e) {
                    super(), (this._id = t), (this._renderer = e);
                }
                create(t, e) {
                    return new Qy(this._id, t, e || {}, this._renderer);
                }
            }
            class Qy {
                constructor(t, e, n, s) {
                    (this.id = t),
                        (this.element = e),
                        (this._renderer = s),
                        (this.parentPlayer = null),
                        (this._started = !1),
                        (this.totalTime = 0),
                        this._command('create', n);
                }
                _listen(t, e) {
                    return this._renderer.listen(this.element, `@@${this.id}:${t}`, e);
                }
                _command(t, ...e) {
                    return Ky(this._renderer, this.element, this.id, t, e);
                }
                onDone(t) {
                    this._listen('done', t);
                }
                onStart(t) {
                    this._listen('start', t);
                }
                onDestroy(t) {
                    this._listen('destroy', t);
                }
                init() {
                    this._command('init');
                }
                hasStarted() {
                    return this._started;
                }
                play() {
                    this._command('play'), (this._started = !0);
                }
                pause() {
                    this._command('pause');
                }
                restart() {
                    this._command('restart');
                }
                finish() {
                    this._command('finish');
                }
                destroy() {
                    this._command('destroy');
                }
                reset() {
                    this._command('reset'), (this._started = !1);
                }
                setPosition(t) {
                    this._command('setPosition', t);
                }
                getPosition() {
                    var t, e;
                    return null !==
                        (e = null === (t = this._renderer.engine.players[+this.id]) || void 0 === t ? void 0 : t.getPosition()) &&
                        void 0 !== e
                        ? e
                        : 0;
                }
            }
            function Ky(t, e, n, s, r) {
                return t.setProperty(e, `@@${n}:${s}`, r);
            }
            const Zy = '@',
                Yy = '@.disabled';
            let Gy = (() => {
                class t {
                    constructor(t, e, n) {
                        (this.delegate = t),
                            (this.engine = e),
                            (this._zone = n),
                            (this._currentId = 0),
                            (this._microtaskId = 1),
                            (this._animationCallbacksBuffer = []),
                            (this._rendererCache = new Map()),
                            (this._cdRecurDepth = 0),
                            (this.promise = Promise.resolve(0)),
                            (e.onRemovalComplete = (t, e) => {
                                e && e.parentNode(t) && e.removeChild(t.parentNode, t);
                            });
                    }
                    createRenderer(t, e) {
                        const n = this.delegate.createRenderer(t, e);
                        if (!(t && e && e.data && e.data.animation)) {
                            let t = this._rendererCache.get(n);
                            return t || ((t = new Xy('', n, this.engine)), this._rendererCache.set(n, t)), t;
                        }
                        const s = e.id,
                            r = e.id + '-' + this._currentId;
                        this._currentId++, this.engine.register(r, t);
                        const i = (e) => {
                            Array.isArray(e) ? e.forEach(i) : this.engine.registerTrigger(s, r, t, e.name, e);
                        };
                        return e.data.animation.forEach(i), new Jy(this, r, n, this.engine);
                    }
                    begin() {
                        this._cdRecurDepth++, this.delegate.begin && this.delegate.begin();
                    }
                    _scheduleCountTask() {
                        this.promise.then(() => {
                            this._microtaskId++;
                        });
                    }
                    scheduleListenerCallback(t, e, n) {
                        t >= 0 && t < this._microtaskId
                            ? this._zone.run(() => e(n))
                            : (0 == this._animationCallbacksBuffer.length &&
                                  Promise.resolve(null).then(() => {
                                      this._zone.run(() => {
                                          this._animationCallbacksBuffer.forEach((t) => {
                                              const [e, n] = t;
                                              e(n);
                                          }),
                                              (this._animationCallbacksBuffer = []);
                                      });
                                  }),
                              this._animationCallbacksBuffer.push([e, n]));
                    }
                    end() {
                        this._cdRecurDepth--,
                            0 == this._cdRecurDepth &&
                                this._zone.runOutsideAngular(() => {
                                    this._scheduleCountTask(), this.engine.flush(this._microtaskId);
                                }),
                            this.delegate.end && this.delegate.end();
                    }
                    whenRenderingDone() {
                        return this.engine.whenRenderingDone();
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(la), as(Cy), as(Wl));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            class Xy {
                constructor(t, e, n) {
                    (this.namespaceId = t),
                        (this.delegate = e),
                        (this.engine = n),
                        (this.destroyNode = this.delegate.destroyNode ? (t) => e.destroyNode(t) : null);
                }
                get data() {
                    return this.delegate.data;
                }
                destroy() {
                    this.engine.destroy(this.namespaceId, this.delegate), this.delegate.destroy();
                }
                createElement(t, e) {
                    return this.delegate.createElement(t, e);
                }
                createComment(t) {
                    return this.delegate.createComment(t);
                }
                createText(t) {
                    return this.delegate.createText(t);
                }
                appendChild(t, e) {
                    this.delegate.appendChild(t, e), this.engine.onInsert(this.namespaceId, e, t, !1);
                }
                insertBefore(t, e, n, s = !0) {
                    this.delegate.insertBefore(t, e, n), this.engine.onInsert(this.namespaceId, e, t, s);
                }
                removeChild(t, e, n) {
                    this.engine.onRemove(this.namespaceId, e, this.delegate, n);
                }
                selectRootElement(t, e) {
                    return this.delegate.selectRootElement(t, e);
                }
                parentNode(t) {
                    return this.delegate.parentNode(t);
                }
                nextSibling(t) {
                    return this.delegate.nextSibling(t);
                }
                setAttribute(t, e, n, s) {
                    this.delegate.setAttribute(t, e, n, s);
                }
                removeAttribute(t, e, n) {
                    this.delegate.removeAttribute(t, e, n);
                }
                addClass(t, e) {
                    this.delegate.addClass(t, e);
                }
                removeClass(t, e) {
                    this.delegate.removeClass(t, e);
                }
                setStyle(t, e, n, s) {
                    this.delegate.setStyle(t, e, n, s);
                }
                removeStyle(t, e, n) {
                    this.delegate.removeStyle(t, e, n);
                }
                setProperty(t, e, n) {
                    e.charAt(0) == Zy && e == Yy ? this.disableAnimations(t, !!n) : this.delegate.setProperty(t, e, n);
                }
                setValue(t, e) {
                    this.delegate.setValue(t, e);
                }
                listen(t, e, n) {
                    return this.delegate.listen(t, e, n);
                }
                disableAnimations(t, e) {
                    this.engine.disableAnimations(t, e);
                }
            }
            class Jy extends Xy {
                constructor(t, e, n, s) {
                    super(e, n, s), (this.factory = t), (this.namespaceId = e);
                }
                setProperty(t, e, n) {
                    e.charAt(0) == Zy
                        ? '.' == e.charAt(1) && e == Yy
                            ? this.disableAnimations(t, (n = void 0 === n || !!n))
                            : this.engine.process(this.namespaceId, t, e.substr(1), n)
                        : this.delegate.setProperty(t, e, n);
                }
                listen(t, e, n) {
                    if (e.charAt(0) == Zy) {
                        const s = (function (t) {
                            switch (t) {
                                case 'body':
                                    return document.body;
                                case 'document':
                                    return document;
                                case 'window':
                                    return window;
                                default:
                                    return t;
                            }
                        })(t);
                        let r = e.substr(1),
                            i = '';
                        return (
                            r.charAt(0) != Zy &&
                                ([r, i] = (function (t) {
                                    const e = t.indexOf('.');
                                    return [t.substring(0, e), t.substr(e + 1)];
                                })(r)),
                            this.engine.listen(this.namespaceId, s, r, i, (t) => {
                                this.factory.scheduleListenerCallback(t._data || -1, n, t);
                            })
                        );
                    }
                    return this.delegate.listen(t, e, n);
                }
            }
            let t_ = (() => {
                class t extends Cy {
                    constructor(t, e, n) {
                        super(t.body, e, n);
                    }
                    ngOnDestroy() {
                        this.flush();
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Cc), as(Gm), as(Qg));
                    }),
                    (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                    t
                );
            })();
            const e_ = new $n('AnimationModuleType'),
                n_ = [
                    { provide: vm, useClass: qy },
                    {
                        provide: Qg,
                        useFactory: function () {
                            return new Kg();
                        },
                    },
                    { provide: Cy, useClass: t_ },
                    {
                        provide: la,
                        useFactory: function (t, e, n) {
                            return new Gy(t, e, n);
                        },
                        deps: [bu, Cy, Wl],
                    },
                ],
                s_ = [
                    {
                        provide: Gm,
                        useFactory: function () {
                            return 'function' == typeof zy() ? new $y() : new Vy();
                        },
                    },
                    { provide: e_, useValue: 'BrowserAnimations' },
                    ...n_,
                ],
                r_ = [{ provide: Gm, useClass: Ym }, { provide: e_, useValue: 'NoopAnimations' }, ...n_];
            let i_ = (() => {
                class t {
                    static withConfig(e) {
                        return { ngModule: t, providers: e.disableAnimations ? r_ : s_ };
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵmod = Wt({ type: t })),
                    (t.ɵinj = dt({ providers: s_, imports: [Nu] })),
                    t
                );
            })();
            class o_ extends h {
                constructor(t, e) {
                    super();
                }
                schedule(t, e = 0) {
                    return this;
                }
            }
            class a_ extends o_ {
                constructor(t, e) {
                    super(t, e), (this.scheduler = t), (this.work = e), (this.pending = !1);
                }
                schedule(t, e = 0) {
                    if (this.closed) return this;
                    this.state = t;
                    const n = this.id,
                        s = this.scheduler;
                    return (
                        null != n && (this.id = this.recycleAsyncId(s, n, e)),
                        (this.pending = !0),
                        (this.delay = e),
                        (this.id = this.id || this.requestAsyncId(s, this.id, e)),
                        this
                    );
                }
                requestAsyncId(t, e, n = 0) {
                    return setInterval(t.flush.bind(t, this), n);
                }
                recycleAsyncId(t, e, n = 0) {
                    if (null !== n && this.delay === n && !1 === this.pending) return e;
                    clearInterval(e);
                }
                execute(t, e) {
                    if (this.closed) return new Error('executing a cancelled action');
                    this.pending = !1;
                    const n = this._execute(t, e);
                    if (n) return n;
                    !1 === this.pending && null != this.id && (this.id = this.recycleAsyncId(this.scheduler, this.id, null));
                }
                _execute(t, e) {
                    let n,
                        s = !1;
                    try {
                        this.work(t);
                    } catch (r) {
                        (s = !0), (n = (!!r && r) || new Error(r));
                    }
                    if (s) return this.unsubscribe(), n;
                }
                _unsubscribe() {
                    const t = this.id,
                        e = this.scheduler,
                        n = e.actions,
                        s = n.indexOf(this);
                    (this.work = null),
                        (this.state = null),
                        (this.pending = !1),
                        (this.scheduler = null),
                        -1 !== s && n.splice(s, 1),
                        null != t && (this.id = this.recycleAsyncId(e, t, null)),
                        (this.delay = null);
                }
            }
            let l_ = (() => {
                class t {
                    constructor(e, n = t.now) {
                        (this.SchedulerAction = e), (this.now = n);
                    }
                    schedule(t, e = 0, n) {
                        return new this.SchedulerAction(this, t).schedule(n, e);
                    }
                }
                return (t.now = () => Date.now()), t;
            })();
            class c_ extends l_ {
                constructor(t, e = l_.now) {
                    super(t, () => (c_.delegate && c_.delegate !== this ? c_.delegate.now() : e())),
                        (this.actions = []),
                        (this.active = !1),
                        (this.scheduled = void 0);
                }
                schedule(t, e = 0, n) {
                    return c_.delegate && c_.delegate !== this ? c_.delegate.schedule(t, e, n) : super.schedule(t, e, n);
                }
                flush(t) {
                    const { actions: e } = this;
                    if (this.active) return void e.push(t);
                    let n;
                    this.active = !0;
                    do {
                        if ((n = t.execute(t.state, t.delay))) break;
                    } while ((t = e.shift()));
                    if (((this.active = !1), n)) {
                        for (; (t = e.shift()); ) t.unsubscribe();
                        throw n;
                    }
                }
            }
            const u_ = new c_(a_);
            class h_ {
                constructor(t, e) {
                    (this.dueTime = t), (this.scheduler = e);
                }
                call(t, e) {
                    return e.subscribe(new d_(t, this.dueTime, this.scheduler));
                }
            }
            class d_ extends f {
                constructor(t, e, n) {
                    super(t),
                        (this.dueTime = e),
                        (this.scheduler = n),
                        (this.debouncedSubscription = null),
                        (this.lastValue = null),
                        (this.hasValue = !1);
                }
                _next(t) {
                    this.clearDebounce(),
                        (this.lastValue = t),
                        (this.hasValue = !0),
                        this.add((this.debouncedSubscription = this.scheduler.schedule(p_, this.dueTime, this)));
                }
                _complete() {
                    this.debouncedNext(), this.destination.complete();
                }
                debouncedNext() {
                    if ((this.clearDebounce(), this.hasValue)) {
                        const { lastValue: t } = this;
                        (this.lastValue = null), (this.hasValue = !1), this.destination.next(t);
                    }
                }
                clearDebounce() {
                    const t = this.debouncedSubscription;
                    null !== t && (this.remove(t), t.unsubscribe(), (this.debouncedSubscription = null));
                }
            }
            function p_(t) {
                t.debouncedNext();
            }
            class f_ {
                constructor(t) {
                    this.total = t;
                }
                call(t, e) {
                    return e.subscribe(new m_(t, this.total));
                }
            }
            class m_ extends f {
                constructor(t, e) {
                    super(t), (this.total = e), (this.count = 0);
                }
                _next(t) {
                    ++this.count > this.total && this.destination.next(t);
                }
            }
            class g_ {
                constructor(t, e) {
                    (this.compare = t), (this.keySelector = e);
                }
                call(t, e) {
                    return e.subscribe(new y_(t, this.compare, this.keySelector));
                }
            }
            class y_ extends f {
                constructor(t, e, n) {
                    super(t), (this.keySelector = n), (this.hasKey = !1), 'function' == typeof e && (this.compare = e);
                }
                compare(t, e) {
                    return t === e;
                }
                _next(t) {
                    let e;
                    try {
                        const { keySelector: n } = this;
                        e = n ? n(t) : t;
                    } catch (s) {
                        return this.destination.error(s);
                    }
                    let n = !1;
                    if (this.hasKey)
                        try {
                            const { compare: t } = this;
                            n = t(this.key, e);
                        } catch (s) {
                            return this.destination.error(s);
                        }
                    else this.hasKey = !0;
                    n || ((this.key = e), this.destination.next(t));
                }
            }
            function __(t) {
                return (e) => e.lift(new v_(t));
            }
            class v_ {
                constructor(t) {
                    this.notifier = t;
                }
                call(t, e) {
                    const n = new b_(t),
                        s = j(this.notifier, new F(n));
                    return s && !n.seenValue ? (n.add(s), e.subscribe(n)) : n;
                }
            }
            class b_ extends M {
                constructor(t) {
                    super(t), (this.seenValue = !1);
                }
                notifyNext() {
                    (this.seenValue = !0), this.complete();
                }
                notifyComplete() {}
            }
            function w_(t) {
                return null != t && 'false' != `${t}`;
            }
            function x_(t, e = 0) {
                return (function (t) {
                    return !isNaN(parseFloat(t)) && !isNaN(Number(t));
                })(t)
                    ? Number(t)
                    : e;
            }
            function S_(t) {
                return Array.isArray(t) ? t : [t];
            }
            function E_(t) {
                return null == t ? '' : 'string' == typeof t ? t : `${t}px`;
            }
            function C_(t) {
                return t instanceof oa ? t.nativeElement : t;
            }
            let k_;
            try {
                k_ = 'undefined' != typeof Intl && Intl.v8BreakIterator;
            } catch (jE) {
                k_ = !1;
            }
            let T_,
                A_,
                R_,
                O_ = (() => {
                    class t {
                        constructor(t) {
                            (this._platformId = t),
                                (this.isBrowser = this._platformId ? Gc(this._platformId) : 'object' == typeof document && !!document),
                                (this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent)),
                                (this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent)),
                                (this.BLINK =
                                    this.isBrowser && !(!window.chrome && !k_) && 'undefined' != typeof CSS && !this.EDGE && !this.TRIDENT),
                                (this.WEBKIT =
                                    this.isBrowser &&
                                    /AppleWebKit/i.test(navigator.userAgent) &&
                                    !this.BLINK &&
                                    !this.EDGE &&
                                    !this.TRIDENT),
                                (this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window)),
                                (this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent)),
                                (this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT),
                                (this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Il));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(Il));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                I_ = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })();
            function P_(t) {
                return (function () {
                    if (null == T_ && 'undefined' != typeof window)
                        try {
                            window.addEventListener('test', null, Object.defineProperty({}, 'passive', { get: () => (T_ = !0) }));
                        } finally {
                            T_ = T_ || !1;
                        }
                    return T_;
                })()
                    ? t
                    : !!t.capture;
            }
            function L_() {
                if (null == A_) {
                    if ('object' != typeof document || !document || 'function' != typeof Element || !Element) return (A_ = !1), A_;
                    if ('scrollBehavior' in document.documentElement.style) A_ = !0;
                    else {
                        const t = Element.prototype.scrollTo;
                        A_ = !!t && !/\{\s*\[native code\]\s*\}/.test(t.toString());
                    }
                }
                return A_;
            }
            function D_(t) {
                if (
                    (function () {
                        if (null == R_) {
                            const t = 'undefined' != typeof document ? document.head : null;
                            R_ = !(!t || (!t.createShadowRoot && !t.attachShadow));
                        }
                        return R_;
                    })()
                ) {
                    const e = t.getRootNode ? t.getRootNode() : null;
                    if ('undefined' != typeof ShadowRoot && ShadowRoot && e instanceof ShadowRoot) return e;
                }
                return null;
            }
            function N_() {
                let t = 'undefined' != typeof document && document ? document.activeElement : null;
                for (; t && t.shadowRoot; ) {
                    const e = t.shadowRoot.activeElement;
                    if (e === t) break;
                    t = e;
                }
                return t;
            }
            function F_(t) {
                return t.composedPath ? t.composedPath()[0] : t.target;
            }
            let M_ = (() => {
                    class t {
                        create(t) {
                            return 'undefined' == typeof MutationObserver ? null : new MutationObserver(t);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t();
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                j_ = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [M_] })),
                        t
                    );
                })(),
                H_ = (() => {
                    class t {
                        constructor(t) {
                            this._platform = t;
                        }
                        isDisabled(t) {
                            return t.hasAttribute('disabled');
                        }
                        isVisible(t) {
                            return (
                                (function (t) {
                                    return !!(
                                        t.offsetWidth ||
                                        t.offsetHeight ||
                                        ('function' == typeof t.getClientRects && t.getClientRects().length)
                                    );
                                })(t) && 'visible' === getComputedStyle(t).visibility
                            );
                        }
                        isTabbable(t) {
                            if (!this._platform.isBrowser) return !1;
                            const e = (function (t) {
                                try {
                                    return t.frameElement;
                                } catch (jE) {
                                    return null;
                                }
                            })(((n = t).ownerDocument && n.ownerDocument.defaultView) || window);
                            var n;
                            if (e) {
                                if (-1 === V_(e)) return !1;
                                if (!this.isVisible(e)) return !1;
                            }
                            let s = t.nodeName.toLowerCase(),
                                r = V_(t);
                            return t.hasAttribute('contenteditable')
                                ? -1 !== r
                                : 'iframe' !== s &&
                                      'object' !== s &&
                                      !(
                                          this._platform.WEBKIT &&
                                          this._platform.IOS &&
                                          !(function (t) {
                                              let e = t.nodeName.toLowerCase(),
                                                  n = 'input' === e && t.type;
                                              return 'text' === n || 'password' === n || 'select' === e || 'textarea' === e;
                                          })(t)
                                      ) &&
                                      ('audio' === s
                                          ? !!t.hasAttribute('controls') && -1 !== r
                                          : 'video' === s
                                          ? -1 !== r && (null !== r || this._platform.FIREFOX || t.hasAttribute('controls'))
                                          : t.tabIndex >= 0);
                        }
                        isFocusable(t, e) {
                            return (
                                (function (t) {
                                    return (
                                        !(function (t) {
                                            return (
                                                (function (t) {
                                                    return 'input' == t.nodeName.toLowerCase();
                                                })(t) && 'hidden' == t.type
                                            );
                                        })(t) &&
                                        ((function (t) {
                                            let e = t.nodeName.toLowerCase();
                                            return 'input' === e || 'select' === e || 'button' === e || 'textarea' === e;
                                        })(t) ||
                                            (function (t) {
                                                return (
                                                    (function (t) {
                                                        return 'a' == t.nodeName.toLowerCase();
                                                    })(t) && t.hasAttribute('href')
                                                );
                                            })(t) ||
                                            t.hasAttribute('contenteditable') ||
                                            B_(t))
                                    );
                                })(t) &&
                                !this.isDisabled(t) &&
                                ((null == e ? void 0 : e.ignoreVisibility) || this.isVisible(t))
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(O_));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(O_));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            function B_(t) {
                if (!t.hasAttribute('tabindex') || void 0 === t.tabIndex) return !1;
                let e = t.getAttribute('tabindex');
                return '-32768' != e && !(!e || isNaN(parseInt(e, 10)));
            }
            function V_(t) {
                if (!B_(t)) return null;
                const e = parseInt(t.getAttribute('tabindex') || '', 10);
                return isNaN(e) ? -1 : e;
            }
            class U_ {
                constructor(t, e, n, s, r = !1) {
                    (this._element = t),
                        (this._checker = e),
                        (this._ngZone = n),
                        (this._document = s),
                        (this._hasAttached = !1),
                        (this.startAnchorListener = () => this.focusLastTabbableElement()),
                        (this.endAnchorListener = () => this.focusFirstTabbableElement()),
                        (this._enabled = !0),
                        r || this.attachAnchors();
                }
                get enabled() {
                    return this._enabled;
                }
                set enabled(t) {
                    (this._enabled = t),
                        this._startAnchor &&
                            this._endAnchor &&
                            (this._toggleAnchorTabIndex(t, this._startAnchor), this._toggleAnchorTabIndex(t, this._endAnchor));
                }
                destroy() {
                    const t = this._startAnchor,
                        e = this._endAnchor;
                    t && (t.removeEventListener('focus', this.startAnchorListener), t.parentNode && t.parentNode.removeChild(t)),
                        e && (e.removeEventListener('focus', this.endAnchorListener), e.parentNode && e.parentNode.removeChild(e)),
                        (this._startAnchor = this._endAnchor = null),
                        (this._hasAttached = !1);
                }
                attachAnchors() {
                    return (
                        !!this._hasAttached ||
                        (this._ngZone.runOutsideAngular(() => {
                            this._startAnchor ||
                                ((this._startAnchor = this._createAnchor()),
                                this._startAnchor.addEventListener('focus', this.startAnchorListener)),
                                this._endAnchor ||
                                    ((this._endAnchor = this._createAnchor()),
                                    this._endAnchor.addEventListener('focus', this.endAnchorListener));
                        }),
                        this._element.parentNode &&
                            (this._element.parentNode.insertBefore(this._startAnchor, this._element),
                            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling),
                            (this._hasAttached = !0)),
                        this._hasAttached)
                    );
                }
                focusInitialElementWhenReady(t) {
                    return new Promise((e) => {
                        this._executeOnStable(() => e(this.focusInitialElement(t)));
                    });
                }
                focusFirstTabbableElementWhenReady(t) {
                    return new Promise((e) => {
                        this._executeOnStable(() => e(this.focusFirstTabbableElement(t)));
                    });
                }
                focusLastTabbableElementWhenReady(t) {
                    return new Promise((e) => {
                        this._executeOnStable(() => e(this.focusLastTabbableElement(t)));
                    });
                }
                _getRegionBoundary(t) {
                    let e = this._element.querySelectorAll(`[cdk-focus-region-${t}], [cdkFocusRegion${t}], [cdk-focus-${t}]`);
                    for (let n = 0; n < e.length; n++)
                        e[n].hasAttribute(`cdk-focus-${t}`)
                            ? console.warn(
                                  `Found use of deprecated attribute 'cdk-focus-${t}', use 'cdkFocusRegion${t}' instead. The deprecated attribute will be removed in 8.0.0.`,
                                  e[n]
                              )
                            : e[n].hasAttribute(`cdk-focus-region-${t}`) &&
                              console.warn(
                                  `Found use of deprecated attribute 'cdk-focus-region-${t}', use 'cdkFocusRegion${t}' instead. The deprecated attribute will be removed in 8.0.0.`,
                                  e[n]
                              );
                    return 'start' == t
                        ? e.length
                            ? e[0]
                            : this._getFirstTabbableElement(this._element)
                        : e.length
                        ? e[e.length - 1]
                        : this._getLastTabbableElement(this._element);
                }
                focusInitialElement(t) {
                    const e = this._element.querySelector('[cdk-focus-initial], [cdkFocusInitial]');
                    if (e) {
                        if (
                            (e.hasAttribute('cdk-focus-initial') &&
                                console.warn(
                                    "Found use of deprecated attribute 'cdk-focus-initial', use 'cdkFocusInitial' instead. The deprecated attribute will be removed in 8.0.0",
                                    e
                                ),
                            !this._checker.isFocusable(e))
                        ) {
                            const n = this._getFirstTabbableElement(e);
                            return null == n || n.focus(t), !!n;
                        }
                        return e.focus(t), !0;
                    }
                    return this.focusFirstTabbableElement(t);
                }
                focusFirstTabbableElement(t) {
                    const e = this._getRegionBoundary('start');
                    return e && e.focus(t), !!e;
                }
                focusLastTabbableElement(t) {
                    const e = this._getRegionBoundary('end');
                    return e && e.focus(t), !!e;
                }
                hasAttached() {
                    return this._hasAttached;
                }
                _getFirstTabbableElement(t) {
                    if (this._checker.isFocusable(t) && this._checker.isTabbable(t)) return t;
                    let e = t.children || t.childNodes;
                    for (let n = 0; n < e.length; n++) {
                        let t = e[n].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(e[n]) : null;
                        if (t) return t;
                    }
                    return null;
                }
                _getLastTabbableElement(t) {
                    if (this._checker.isFocusable(t) && this._checker.isTabbable(t)) return t;
                    let e = t.children || t.childNodes;
                    for (let n = e.length - 1; n >= 0; n--) {
                        let t = e[n].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(e[n]) : null;
                        if (t) return t;
                    }
                    return null;
                }
                _createAnchor() {
                    const t = this._document.createElement('div');
                    return (
                        this._toggleAnchorTabIndex(this._enabled, t),
                        t.classList.add('cdk-visually-hidden'),
                        t.classList.add('cdk-focus-trap-anchor'),
                        t.setAttribute('aria-hidden', 'true'),
                        t
                    );
                }
                _toggleAnchorTabIndex(t, e) {
                    t ? e.setAttribute('tabindex', '0') : e.removeAttribute('tabindex');
                }
                toggleAnchors(t) {
                    this._startAnchor &&
                        this._endAnchor &&
                        (this._toggleAnchorTabIndex(t, this._startAnchor), this._toggleAnchorTabIndex(t, this._endAnchor));
                }
                _executeOnStable(t) {
                    this._ngZone.isStable ? t() : this._ngZone.onStable.pipe(ih(1)).subscribe(t);
                }
            }
            let $_ = (() => {
                class t {
                    constructor(t, e, n) {
                        (this._checker = t), (this._ngZone = e), (this._document = n);
                    }
                    create(t, e = !1) {
                        return new U_(t, this._checker, this._ngZone, this._document, e);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(H_), as(Wl), as(Cc));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(H_), as(Wl), as(Cc));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            function z_(t) {
                return 0 === t.offsetX && 0 === t.offsetY;
            }
            function q_(t) {
                const e = (t.touches && t.touches[0]) || (t.changedTouches && t.changedTouches[0]);
                return !(!e || -1 !== e.identifier || (null != e.radiusX && 1 !== e.radiusX) || (null != e.radiusY && 1 !== e.radiusY));
            }
            'undefined' != typeof Element && Element;
            const W_ = new $n('cdk-input-modality-detector-options'),
                Q_ = { ignoreKeys: [18, 17, 224, 91, 16] },
                K_ = P_({ passive: !0, capture: !0 });
            let Z_ = (() => {
                class t {
                    constructor(t, e, n, s) {
                        (this._platform = t),
                            (this._mostRecentTarget = null),
                            (this._modality = new $u(null)),
                            (this._lastTouchMs = 0),
                            (this._onKeydown = (t) => {
                                var e, n;
                                (null === (n = null === (e = this._options) || void 0 === e ? void 0 : e.ignoreKeys) || void 0 === n
                                    ? void 0
                                    : n.some((e) => e === t.keyCode)) ||
                                    (this._modality.next('keyboard'), (this._mostRecentTarget = F_(t)));
                            }),
                            (this._onMousedown = (t) => {
                                Date.now() - this._lastTouchMs < 650 ||
                                    (this._modality.next(z_(t) ? 'keyboard' : 'mouse'), (this._mostRecentTarget = F_(t)));
                            }),
                            (this._onTouchstart = (t) => {
                                q_(t)
                                    ? this._modality.next('keyboard')
                                    : ((this._lastTouchMs = Date.now()), this._modality.next('touch'), (this._mostRecentTarget = F_(t)));
                            }),
                            (this._options = Object.assign(Object.assign({}, Q_), s)),
                            (this.modalityDetected = this._modality.pipe((1, (t) => t.lift(new f_(1))))),
                            (this.modalityChanged = this.modalityDetected.pipe((t) => t.lift(new g_(void 0, void 0)))),
                            t.isBrowser &&
                                e.runOutsideAngular(() => {
                                    n.addEventListener('keydown', this._onKeydown, K_),
                                        n.addEventListener('mousedown', this._onMousedown, K_),
                                        n.addEventListener('touchstart', this._onTouchstart, K_);
                                });
                    }
                    get mostRecentModality() {
                        return this._modality.value;
                    }
                    ngOnDestroy() {
                        this._platform.isBrowser &&
                            (document.removeEventListener('keydown', this._onKeydown, K_),
                            document.removeEventListener('mousedown', this._onMousedown, K_),
                            document.removeEventListener('touchstart', this._onTouchstart, K_));
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(O_), as(Wl), as(Cc), as(W_, 8));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(O_), as(Wl), as(Cc), as(W_, 8));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            const Y_ = new $n('cdk-focus-monitor-default-options'),
                G_ = P_({ passive: !0, capture: !0 });
            let X_ = (() => {
                class t {
                    constructor(t, e, n, s, r) {
                        (this._ngZone = t),
                            (this._platform = e),
                            (this._inputModalityDetector = n),
                            (this._origin = null),
                            (this._windowFocused = !1),
                            (this._originFromTouchInteraction = !1),
                            (this._elementInfo = new Map()),
                            (this._monitoredElementCount = 0),
                            (this._rootNodeFocusListenerCount = new Map()),
                            (this._windowFocusListener = () => {
                                (this._windowFocused = !0), (this._windowFocusTimeoutId = setTimeout(() => (this._windowFocused = !1)));
                            }),
                            (this._stopInputModalityDetector = new S()),
                            (this._rootNodeFocusAndBlurListener = (t) => {
                                const e = F_(t),
                                    n = 'focus' === t.type ? this._onFocus : this._onBlur;
                                for (let s = e; s; s = s.parentElement) n.call(this, t, s);
                            }),
                            (this._document = s),
                            (this._detectionMode = (null == r ? void 0 : r.detectionMode) || 0);
                    }
                    monitor(t, e = !1) {
                        const n = C_(t);
                        if (!this._platform.isBrowser || 1 !== n.nodeType) return Uu(null);
                        const s = D_(n) || this._getDocument(),
                            r = this._elementInfo.get(n);
                        if (r) return e && (r.checkChildren = !0), r.subject;
                        const i = { checkChildren: e, subject: new S(), rootNode: s };
                        return this._elementInfo.set(n, i), this._registerGlobalListeners(i), i.subject;
                    }
                    stopMonitoring(t) {
                        const e = C_(t),
                            n = this._elementInfo.get(e);
                        n && (n.subject.complete(), this._setClasses(e), this._elementInfo.delete(e), this._removeGlobalListeners(n));
                    }
                    focusVia(t, e, n) {
                        const s = C_(t);
                        s === this._getDocument().activeElement
                            ? this._getClosestElementsInfo(s).forEach(([t, n]) => this._originChanged(t, e, n))
                            : (this._setOrigin(e), 'function' == typeof s.focus && s.focus(n));
                    }
                    ngOnDestroy() {
                        this._elementInfo.forEach((t, e) => this.stopMonitoring(e));
                    }
                    _getDocument() {
                        return this._document || document;
                    }
                    _getWindow() {
                        return this._getDocument().defaultView || window;
                    }
                    _toggleClass(t, e, n) {
                        n ? t.classList.add(e) : t.classList.remove(e);
                    }
                    _getFocusOrigin(t) {
                        return this._origin
                            ? this._originFromTouchInteraction
                                ? this._shouldBeAttributedToTouch(t)
                                    ? 'touch'
                                    : 'program'
                                : this._origin
                            : this._windowFocused && this._lastFocusOrigin
                            ? this._lastFocusOrigin
                            : 'program';
                    }
                    _shouldBeAttributedToTouch(t) {
                        return (
                            1 === this._detectionMode || !!(null == t ? void 0 : t.contains(this._inputModalityDetector._mostRecentTarget))
                        );
                    }
                    _setClasses(t, e) {
                        this._toggleClass(t, 'cdk-focused', !!e),
                            this._toggleClass(t, 'cdk-touch-focused', 'touch' === e),
                            this._toggleClass(t, 'cdk-keyboard-focused', 'keyboard' === e),
                            this._toggleClass(t, 'cdk-mouse-focused', 'mouse' === e),
                            this._toggleClass(t, 'cdk-program-focused', 'program' === e);
                    }
                    _setOrigin(t, e = !1) {
                        this._ngZone.runOutsideAngular(() => {
                            (this._origin = t),
                                (this._originFromTouchInteraction = 'touch' === t && e),
                                0 === this._detectionMode &&
                                    (clearTimeout(this._originTimeoutId),
                                    (this._originTimeoutId = setTimeout(
                                        () => (this._origin = null),
                                        this._originFromTouchInteraction ? 650 : 1
                                    )));
                        });
                    }
                    _onFocus(t, e) {
                        const n = this._elementInfo.get(e),
                            s = F_(t);
                        n && (n.checkChildren || e === s) && this._originChanged(e, this._getFocusOrigin(s), n);
                    }
                    _onBlur(t, e) {
                        const n = this._elementInfo.get(e);
                        !n ||
                            (n.checkChildren && t.relatedTarget instanceof Node && e.contains(t.relatedTarget)) ||
                            (this._setClasses(e), this._emitOrigin(n.subject, null));
                    }
                    _emitOrigin(t, e) {
                        this._ngZone.run(() => t.next(e));
                    }
                    _registerGlobalListeners(t) {
                        if (!this._platform.isBrowser) return;
                        const e = t.rootNode,
                            n = this._rootNodeFocusListenerCount.get(e) || 0;
                        n ||
                            this._ngZone.runOutsideAngular(() => {
                                e.addEventListener('focus', this._rootNodeFocusAndBlurListener, G_),
                                    e.addEventListener('blur', this._rootNodeFocusAndBlurListener, G_);
                            }),
                            this._rootNodeFocusListenerCount.set(e, n + 1),
                            1 == ++this._monitoredElementCount &&
                                (this._ngZone.runOutsideAngular(() => {
                                    this._getWindow().addEventListener('focus', this._windowFocusListener);
                                }),
                                this._inputModalityDetector.modalityDetected.pipe(__(this._stopInputModalityDetector)).subscribe((t) => {
                                    this._setOrigin(t, !0);
                                }));
                    }
                    _removeGlobalListeners(t) {
                        const e = t.rootNode;
                        if (this._rootNodeFocusListenerCount.has(e)) {
                            const t = this._rootNodeFocusListenerCount.get(e);
                            t > 1
                                ? this._rootNodeFocusListenerCount.set(e, t - 1)
                                : (e.removeEventListener('focus', this._rootNodeFocusAndBlurListener, G_),
                                  e.removeEventListener('blur', this._rootNodeFocusAndBlurListener, G_),
                                  this._rootNodeFocusListenerCount.delete(e));
                        }
                        --this._monitoredElementCount ||
                            (this._getWindow().removeEventListener('focus', this._windowFocusListener),
                            this._stopInputModalityDetector.next(),
                            clearTimeout(this._windowFocusTimeoutId),
                            clearTimeout(this._originTimeoutId));
                    }
                    _originChanged(t, e, n) {
                        this._setClasses(t, e), this._emitOrigin(n.subject, e), (this._lastFocusOrigin = e);
                    }
                    _getClosestElementsInfo(t) {
                        const e = [];
                        return (
                            this._elementInfo.forEach((n, s) => {
                                (s === t || (n.checkChildren && s.contains(t))) && e.push([s, n]);
                            }),
                            e
                        );
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Wl), as(O_), as(Z_), as(Cc, 8), as(Y_, 8));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(Wl), as(O_), as(Z_), as(Cc, 8), as(Y_, 8));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            const J_ = 'cdk-high-contrast-black-on-white',
                tv = 'cdk-high-contrast-white-on-black',
                ev = 'cdk-high-contrast-active';
            let nv = (() => {
                    class t {
                        constructor(t, e) {
                            (this._platform = t), (this._document = e);
                        }
                        getHighContrastMode() {
                            if (!this._platform.isBrowser) return 0;
                            const t = this._document.createElement('div');
                            (t.style.backgroundColor = 'rgb(1,2,3)'), (t.style.position = 'absolute'), this._document.body.appendChild(t);
                            const e = this._document.defaultView || window,
                                n = e && e.getComputedStyle ? e.getComputedStyle(t) : null,
                                s = ((n && n.backgroundColor) || '').replace(/ /g, '');
                            switch ((this._document.body.removeChild(t), s)) {
                                case 'rgb(0,0,0)':
                                    return 2;
                                case 'rgb(255,255,255)':
                                    return 1;
                            }
                            return 0;
                        }
                        _applyBodyHighContrastModeCssClasses() {
                            if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {
                                const t = this._document.body.classList;
                                t.remove(ev), t.remove(J_), t.remove(tv), (this._hasCheckedHighContrastMode = !0);
                                const e = this.getHighContrastMode();
                                1 === e ? (t.add(ev), t.add(J_)) : 2 === e && (t.add(ev), t.add(tv));
                            }
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(O_), as(Cc));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(O_), as(Cc));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                sv = (() => {
                    class t {
                        constructor(t) {
                            t._applyBodyHighContrastModeCssClasses();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(nv));
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[I_, j_]] })),
                        t
                    );
                })();
            const rv = new $n('cdk-dir-doc', {
                providedIn: 'root',
                factory: function () {
                    return ls(Cc);
                },
            });
            let iv = (() => {
                    class t {
                        constructor(t) {
                            if (((this.value = 'ltr'), (this.change = new ol()), t)) {
                                const e = t.documentElement ? t.documentElement.dir : null,
                                    n = (t.body ? t.body.dir : null) || e;
                                this.value = 'ltr' === n || 'rtl' === n ? n : 'ltr';
                            }
                        }
                        ngOnDestroy() {
                            this.change.complete();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(rv, 8));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(rv, 8));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                ov = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })();
            const av = new da('12.2.2'),
                lv = new da('12.2.2'),
                cv = new $n('mat-sanity-checks', {
                    providedIn: 'root',
                    factory: function () {
                        return !0;
                    },
                });
            let uv = (() => {
                class t {
                    constructor(t, e, n) {
                        (this._hasDoneGlobalChecks = !1),
                            (this._document = n),
                            t._applyBodyHighContrastModeCssClasses(),
                            (this._sanityChecks = e),
                            this._hasDoneGlobalChecks ||
                                (this._checkDoctypeIsDefined(),
                                this._checkThemeIsPresent(),
                                this._checkCdkVersionMatch(),
                                (this._hasDoneGlobalChecks = !0));
                    }
                    _getWindow() {
                        const t = this._document.defaultView || window;
                        return 'object' == typeof t && t ? t : null;
                    }
                    _checkIsEnabled(t) {
                        return (
                            !(!oc() || this._isTestEnv()) &&
                            ('boolean' == typeof this._sanityChecks ? this._sanityChecks : !!this._sanityChecks[t])
                        );
                    }
                    _isTestEnv() {
                        const t = this._getWindow();
                        return t && (t.__karma__ || t.jasmine);
                    }
                    _checkDoctypeIsDefined() {
                        this._checkIsEnabled('doctype') &&
                            !this._document.doctype &&
                            console.warn(
                                'Current document does not have a doctype. This may cause some Angular Material components not to behave as expected.'
                            );
                    }
                    _checkThemeIsPresent() {
                        if (!this._checkIsEnabled('theme') || !this._document.body || 'function' != typeof getComputedStyle) return;
                        const t = this._document.createElement('div');
                        t.classList.add('mat-theme-loaded-marker'), this._document.body.appendChild(t);
                        const e = getComputedStyle(t);
                        e &&
                            'none' !== e.display &&
                            console.warn(
                                'Could not find Angular Material core theme. Most Material components may not work as expected. For more info refer to the theming guide: https://material.angular.io/guide/theming'
                            ),
                            this._document.body.removeChild(t);
                    }
                    _checkCdkVersionMatch() {
                        this._checkIsEnabled('version') &&
                            lv.full !== av.full &&
                            console.warn(
                                'The Angular Material version (' +
                                    lv.full +
                                    ') does not match the Angular CDK version (' +
                                    av.full +
                                    ').\nPlease ensure the versions of these two packages exactly match.'
                            );
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(nv), as(cv, 8), as(Cc));
                    }),
                    (t.ɵmod = Wt({ type: t })),
                    (t.ɵinj = dt({ imports: [[ov], ov] })),
                    t
                );
            })();
            function hv(t) {
                return class extends t {
                    constructor(...t) {
                        super(...t), (this._disabled = !1);
                    }
                    get disabled() {
                        return this._disabled;
                    }
                    set disabled(t) {
                        this._disabled = w_(t);
                    }
                };
            }
            function dv(t, e) {
                return class extends t {
                    constructor(...t) {
                        super(...t), (this.defaultColor = e), (this.color = e);
                    }
                    get color() {
                        return this._color;
                    }
                    set color(t) {
                        const e = t || this.defaultColor;
                        e !== this._color &&
                            (this._color && this._elementRef.nativeElement.classList.remove(`mat-${this._color}`),
                            e && this._elementRef.nativeElement.classList.add(`mat-${e}`),
                            (this._color = e));
                    }
                };
            }
            function pv(t) {
                return class extends t {
                    constructor(...t) {
                        super(...t), (this._disableRipple = !1);
                    }
                    get disableRipple() {
                        return this._disableRipple;
                    }
                    set disableRipple(t) {
                        this._disableRipple = w_(t);
                    }
                };
            }
            const fv = new $n('MAT_DATE_LOCALE', {
                providedIn: 'root',
                factory: function () {
                    return ls(Dl);
                },
            });
            class mv {
                constructor() {
                    (this._localeChanges = new S()), (this.localeChanges = this._localeChanges);
                }
                getValidDateOrNull(t) {
                    return this.isDateInstance(t) && this.isValid(t) ? t : null;
                }
                deserialize(t) {
                    return null == t || (this.isDateInstance(t) && this.isValid(t)) ? t : this.invalid();
                }
                setLocale(t) {
                    (this.locale = t), this._localeChanges.next();
                }
                compareDate(t, e) {
                    return this.getYear(t) - this.getYear(e) || this.getMonth(t) - this.getMonth(e) || this.getDate(t) - this.getDate(e);
                }
                sameDate(t, e) {
                    if (t && e) {
                        let n = this.isValid(t),
                            s = this.isValid(e);
                        return n && s ? !this.compareDate(t, e) : n == s;
                    }
                    return t == e;
                }
                clampDate(t, e, n) {
                    return e && this.compareDate(t, e) < 0 ? e : n && this.compareDate(t, n) > 0 ? n : t;
                }
            }
            const gv = new $n('mat-date-formats');
            let yv;
            try {
                yv = 'undefined' != typeof Intl;
            } catch (jE) {
                yv = !1;
            }
            const _v = {
                    long: [
                        'January',
                        'February',
                        'March',
                        'April',
                        'May',
                        'June',
                        'July',
                        'August',
                        'September',
                        'October',
                        'November',
                        'December',
                    ],
                    short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
                },
                vv = xv(31, (t) => String(t + 1)),
                bv = {
                    long: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                    short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
                },
                wv = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
            function xv(t, e) {
                const n = Array(t);
                for (let s = 0; s < t; s++) n[s] = e(s);
                return n;
            }
            let Sv = (() => {
                    class t extends mv {
                        constructor(t, e) {
                            super(),
                                (this.useUtcForDisplay = !0),
                                super.setLocale(t),
                                (this.useUtcForDisplay = !e.TRIDENT),
                                (this._clampDate = e.TRIDENT || e.EDGE);
                        }
                        getYear(t) {
                            return t.getFullYear();
                        }
                        getMonth(t) {
                            return t.getMonth();
                        }
                        getDate(t) {
                            return t.getDate();
                        }
                        getDayOfWeek(t) {
                            return t.getDay();
                        }
                        getMonthNames(t) {
                            if (yv) {
                                const e = new Intl.DateTimeFormat(this.locale, { month: t, timeZone: 'utc' });
                                return xv(12, (t) => this._stripDirectionalityCharacters(this._format(e, new Date(2017, t, 1))));
                            }
                            return _v[t];
                        }
                        getDateNames() {
                            if (yv) {
                                const t = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
                                return xv(31, (e) => this._stripDirectionalityCharacters(this._format(t, new Date(2017, 0, e + 1))));
                            }
                            return vv;
                        }
                        getDayOfWeekNames(t) {
                            if (yv) {
                                const e = new Intl.DateTimeFormat(this.locale, { weekday: t, timeZone: 'utc' });
                                return xv(7, (t) => this._stripDirectionalityCharacters(this._format(e, new Date(2017, 0, t + 1))));
                            }
                            return bv[t];
                        }
                        getYearName(t) {
                            if (yv) {
                                const e = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
                                return this._stripDirectionalityCharacters(this._format(e, t));
                            }
                            return String(this.getYear(t));
                        }
                        getFirstDayOfWeek() {
                            return 0;
                        }
                        getNumDaysInMonth(t) {
                            return this.getDate(this._createDateWithOverflow(this.getYear(t), this.getMonth(t) + 1, 0));
                        }
                        clone(t) {
                            return new Date(t.getTime());
                        }
                        createDate(t, e, n) {
                            let s = this._createDateWithOverflow(t, e, n);
                            return s.getMonth(), s;
                        }
                        today() {
                            return new Date();
                        }
                        parse(t) {
                            return 'number' == typeof t ? new Date(t) : t ? new Date(Date.parse(t)) : null;
                        }
                        format(t, e) {
                            if (!this.isValid(t)) throw Error('NativeDateAdapter: Cannot format invalid date.');
                            if (yv) {
                                this._clampDate &&
                                    (t.getFullYear() < 1 || t.getFullYear() > 9999) &&
                                    (t = this.clone(t)).setFullYear(Math.max(1, Math.min(9999, t.getFullYear()))),
                                    (e = Object.assign(Object.assign({}, e), { timeZone: 'utc' }));
                                const n = new Intl.DateTimeFormat(this.locale, e);
                                return this._stripDirectionalityCharacters(this._format(n, t));
                            }
                            return this._stripDirectionalityCharacters(t.toDateString());
                        }
                        addCalendarYears(t, e) {
                            return this.addCalendarMonths(t, 12 * e);
                        }
                        addCalendarMonths(t, e) {
                            let n = this._createDateWithOverflow(this.getYear(t), this.getMonth(t) + e, this.getDate(t));
                            return (
                                this.getMonth(n) != (((this.getMonth(t) + e) % 12) + 12) % 12 &&
                                    (n = this._createDateWithOverflow(this.getYear(n), this.getMonth(n), 0)),
                                n
                            );
                        }
                        addCalendarDays(t, e) {
                            return this._createDateWithOverflow(this.getYear(t), this.getMonth(t), this.getDate(t) + e);
                        }
                        toIso8601(t) {
                            return [t.getUTCFullYear(), this._2digit(t.getUTCMonth() + 1), this._2digit(t.getUTCDate())].join('-');
                        }
                        deserialize(t) {
                            if ('string' == typeof t) {
                                if (!t) return null;
                                if (wv.test(t)) {
                                    let e = new Date(t);
                                    if (this.isValid(e)) return e;
                                }
                            }
                            return super.deserialize(t);
                        }
                        isDateInstance(t) {
                            return t instanceof Date;
                        }
                        isValid(t) {
                            return !isNaN(t.getTime());
                        }
                        invalid() {
                            return new Date(NaN);
                        }
                        _createDateWithOverflow(t, e, n) {
                            const s = new Date();
                            return s.setFullYear(t, e, n), s.setHours(0, 0, 0, 0), s;
                        }
                        _2digit(t) {
                            return ('00' + t).slice(-2);
                        }
                        _stripDirectionalityCharacters(t) {
                            return t.replace(/[\u200e\u200f]/g, '');
                        }
                        _format(t, e) {
                            const n = new Date();
                            return (
                                n.setUTCFullYear(e.getFullYear(), e.getMonth(), e.getDate()),
                                n.setUTCHours(e.getHours(), e.getMinutes(), e.getSeconds(), e.getMilliseconds()),
                                t.format(n)
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(fv, 8), as(O_));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                Ev = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [{ provide: mv, useClass: Sv }], imports: [[I_]] })),
                        t
                    );
                })();
            const Cv = {
                parse: { dateInput: null },
                display: {
                    dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },
                    monthYearLabel: { year: 'numeric', month: 'short' },
                    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
                    monthYearA11yLabel: { year: 'numeric', month: 'long' },
                },
            };
            let kv = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [{ provide: gv, useValue: Cv }], imports: [[Ev]] })),
                        t
                    );
                })(),
                Tv = (() => {
                    class t {
                        isErrorState(t, e) {
                            return !!(t && t.invalid && (t.touched || (e && e.submitted)));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t();
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                Av = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv], uv] })),
                        t
                    );
                })();
            class Rv {
                constructor(t, e, n) {
                    (this._renderer = t), (this.element = e), (this.config = n), (this.state = 3);
                }
                fadeOut() {
                    this._renderer.fadeOutRipple(this);
                }
            }
            const Ov = { enterDuration: 225, exitDuration: 150 },
                Iv = P_({ passive: !0 }),
                Pv = ['mousedown', 'touchstart'],
                Lv = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];
            class Dv {
                constructor(t, e, n, s) {
                    (this._target = t),
                        (this._ngZone = e),
                        (this._isPointerDown = !1),
                        (this._activeRipples = new Set()),
                        (this._pointerUpEventsRegistered = !1),
                        s.isBrowser && (this._containerElement = C_(n));
                }
                fadeInRipple(t, e, n = {}) {
                    const s = (this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect()),
                        r = Object.assign(Object.assign({}, Ov), n.animation);
                    n.centered && ((t = s.left + s.width / 2), (e = s.top + s.height / 2));
                    const i =
                            n.radius ||
                            (function (t, e, n) {
                                const s = Math.max(Math.abs(t - n.left), Math.abs(t - n.right)),
                                    r = Math.max(Math.abs(e - n.top), Math.abs(e - n.bottom));
                                return Math.sqrt(s * s + r * r);
                            })(t, e, s),
                        o = t - s.left,
                        a = e - s.top,
                        l = r.enterDuration,
                        c = document.createElement('div');
                    c.classList.add('mat-ripple-element'),
                        (c.style.left = o - i + 'px'),
                        (c.style.top = a - i + 'px'),
                        (c.style.height = 2 * i + 'px'),
                        (c.style.width = 2 * i + 'px'),
                        null != n.color && (c.style.backgroundColor = n.color),
                        (c.style.transitionDuration = `${l}ms`),
                        this._containerElement.appendChild(c),
                        window.getComputedStyle(c).getPropertyValue('opacity'),
                        (c.style.transform = 'scale(1)');
                    const u = new Rv(this, c, n);
                    return (
                        (u.state = 0),
                        this._activeRipples.add(u),
                        n.persistent || (this._mostRecentTransientRipple = u),
                        this._runTimeoutOutsideZone(() => {
                            const t = u === this._mostRecentTransientRipple;
                            (u.state = 1), n.persistent || (t && this._isPointerDown) || u.fadeOut();
                        }, l),
                        u
                    );
                }
                fadeOutRipple(t) {
                    const e = this._activeRipples.delete(t);
                    if (
                        (t === this._mostRecentTransientRipple && (this._mostRecentTransientRipple = null),
                        this._activeRipples.size || (this._containerRect = null),
                        !e)
                    )
                        return;
                    const n = t.element,
                        s = Object.assign(Object.assign({}, Ov), t.config.animation);
                    (n.style.transitionDuration = `${s.exitDuration}ms`),
                        (n.style.opacity = '0'),
                        (t.state = 2),
                        this._runTimeoutOutsideZone(() => {
                            (t.state = 3), n.parentNode.removeChild(n);
                        }, s.exitDuration);
                }
                fadeOutAll() {
                    this._activeRipples.forEach((t) => t.fadeOut());
                }
                fadeOutAllNonPersistent() {
                    this._activeRipples.forEach((t) => {
                        t.config.persistent || t.fadeOut();
                    });
                }
                setupTriggerEvents(t) {
                    const e = C_(t);
                    e && e !== this._triggerElement && (this._removeTriggerEvents(), (this._triggerElement = e), this._registerEvents(Pv));
                }
                handleEvent(t) {
                    'mousedown' === t.type ? this._onMousedown(t) : 'touchstart' === t.type ? this._onTouchStart(t) : this._onPointerUp(),
                        this._pointerUpEventsRegistered || (this._registerEvents(Lv), (this._pointerUpEventsRegistered = !0));
                }
                _onMousedown(t) {
                    const e = z_(t),
                        n = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + 800;
                    this._target.rippleDisabled ||
                        e ||
                        n ||
                        ((this._isPointerDown = !0), this.fadeInRipple(t.clientX, t.clientY, this._target.rippleConfig));
                }
                _onTouchStart(t) {
                    if (!this._target.rippleDisabled && !q_(t)) {
                        (this._lastTouchStartEvent = Date.now()), (this._isPointerDown = !0);
                        const e = t.changedTouches;
                        for (let t = 0; t < e.length; t++) this.fadeInRipple(e[t].clientX, e[t].clientY, this._target.rippleConfig);
                    }
                }
                _onPointerUp() {
                    this._isPointerDown &&
                        ((this._isPointerDown = !1),
                        this._activeRipples.forEach((t) => {
                            !t.config.persistent && (1 === t.state || (t.config.terminateOnPointerUp && 0 === t.state)) && t.fadeOut();
                        }));
                }
                _runTimeoutOutsideZone(t, e = 0) {
                    this._ngZone.runOutsideAngular(() => setTimeout(t, e));
                }
                _registerEvents(t) {
                    this._ngZone.runOutsideAngular(() => {
                        t.forEach((t) => {
                            this._triggerElement.addEventListener(t, this, Iv);
                        });
                    });
                }
                _removeTriggerEvents() {
                    this._triggerElement &&
                        (Pv.forEach((t) => {
                            this._triggerElement.removeEventListener(t, this, Iv);
                        }),
                        this._pointerUpEventsRegistered &&
                            Lv.forEach((t) => {
                                this._triggerElement.removeEventListener(t, this, Iv);
                            }));
                }
            }
            const Nv = new $n('mat-ripple-global-options');
            let Fv = (() => {
                    class t {
                        constructor(t, e, n, s, r) {
                            (this._elementRef = t),
                                (this._animationMode = r),
                                (this.radius = 0),
                                (this._disabled = !1),
                                (this._isInitialized = !1),
                                (this._globalOptions = s || {}),
                                (this._rippleRenderer = new Dv(this, e, t, n));
                        }
                        get disabled() {
                            return this._disabled;
                        }
                        set disabled(t) {
                            t && this.fadeOutAllNonPersistent(), (this._disabled = t), this._setupTriggerEventsIfEnabled();
                        }
                        get trigger() {
                            return this._trigger || this._elementRef.nativeElement;
                        }
                        set trigger(t) {
                            (this._trigger = t), this._setupTriggerEventsIfEnabled();
                        }
                        ngOnInit() {
                            (this._isInitialized = !0), this._setupTriggerEventsIfEnabled();
                        }
                        ngOnDestroy() {
                            this._rippleRenderer._removeTriggerEvents();
                        }
                        fadeOutAll() {
                            this._rippleRenderer.fadeOutAll();
                        }
                        fadeOutAllNonPersistent() {
                            this._rippleRenderer.fadeOutAllNonPersistent();
                        }
                        get rippleConfig() {
                            return {
                                centered: this.centered,
                                radius: this.radius,
                                color: this.color,
                                animation: Object.assign(
                                    Object.assign(
                                        Object.assign({}, this._globalOptions.animation),
                                        'NoopAnimations' === this._animationMode ? { enterDuration: 0, exitDuration: 0 } : {}
                                    ),
                                    this.animation
                                ),
                                terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,
                            };
                        }
                        get rippleDisabled() {
                            return this.disabled || !!this._globalOptions.disabled;
                        }
                        _setupTriggerEventsIfEnabled() {
                            !this.disabled && this._isInitialized && this._rippleRenderer.setupTriggerEvents(this.trigger);
                        }
                        launch(t, e = 0, n) {
                            return 'number' == typeof t
                                ? this._rippleRenderer.fadeInRipple(t, e, Object.assign(Object.assign({}, this.rippleConfig), n))
                                : this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), t));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(Wl), fo(O_), fo(Nv, 8), fo(e_, 8));
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [
                                ['', 'mat-ripple', ''],
                                ['', 'matRipple', ''],
                            ],
                            hostAttrs: [1, 'mat-ripple'],
                            hostVars: 2,
                            hostBindings: function (t, e) {
                                2 & t && Do('mat-ripple-unbounded', e.unbounded);
                            },
                            inputs: {
                                radius: ['matRippleRadius', 'radius'],
                                disabled: ['matRippleDisabled', 'disabled'],
                                trigger: ['matRippleTrigger', 'trigger'],
                                color: ['matRippleColor', 'color'],
                                unbounded: ['matRippleUnbounded', 'unbounded'],
                                centered: ['matRippleCentered', 'centered'],
                                animation: ['matRippleAnimation', 'animation'],
                            },
                            exportAs: ['matRipple'],
                        })),
                        t
                    );
                })(),
                Mv = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv, I_], uv] })),
                        t
                    );
                })(),
                jv = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv]] })),
                        t
                    );
                })(),
                Hv = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Mv, Yc, uv, jv]] })),
                        t
                    );
                })();
            function Bv(t, e, n, r) {
                return (
                    s(n) && ((r = n), (n = void 0)),
                    r
                        ? Bv(t, e, n).pipe(k((t) => (l(t) ? r(...t) : r(t))))
                        : new _((s) => {
                              Vv(
                                  t,
                                  e,
                                  function (t) {
                                      s.next(arguments.length > 1 ? Array.prototype.slice.call(arguments) : t);
                                  },
                                  s,
                                  n
                              );
                          })
                );
            }
            function Vv(t, e, n, s, r) {
                let i;
                if (
                    (function (t) {
                        return t && 'function' == typeof t.addEventListener && 'function' == typeof t.removeEventListener;
                    })(t)
                ) {
                    const s = t;
                    t.addEventListener(e, n, r), (i = () => s.removeEventListener(e, n, r));
                } else if (
                    (function (t) {
                        return t && 'function' == typeof t.on && 'function' == typeof t.off;
                    })(t)
                ) {
                    const s = t;
                    t.on(e, n), (i = () => s.off(e, n));
                } else if (
                    (function (t) {
                        return t && 'function' == typeof t.addListener && 'function' == typeof t.removeListener;
                    })(t)
                ) {
                    const s = t;
                    t.addListener(e, n), (i = () => s.removeListener(e, n));
                } else {
                    if (!t || !t.length) throw new TypeError('Invalid event target');
                    for (let i = 0, o = t.length; i < o; i++) Vv(t[i], e, n, s, r);
                }
                s.add(i);
            }
            new (class extends c_ {
                flush(t) {
                    (this.active = !0), (this.scheduled = void 0);
                    const { actions: e } = this;
                    let n,
                        s = -1,
                        r = e.length;
                    t = t || e.shift();
                    do {
                        if ((n = t.execute(t.state, t.delay))) break;
                    } while (++s < r && (t = e.shift()));
                    if (((this.active = !1), n)) {
                        for (; ++s < r && (t = e.shift()); ) t.unsubscribe();
                        throw n;
                    }
                }
            })(
                class extends a_ {
                    constructor(t, e) {
                        super(t, e), (this.scheduler = t), (this.work = e);
                    }
                    requestAsyncId(t, e, n = 0) {
                        return null !== n && n > 0
                            ? super.requestAsyncId(t, e, n)
                            : (t.actions.push(this), t.scheduled || (t.scheduled = requestAnimationFrame(() => t.flush(null))));
                    }
                    recycleAsyncId(t, e, n = 0) {
                        if ((null !== n && n > 0) || (null === n && this.delay > 0)) return super.recycleAsyncId(t, e, n);
                        0 === t.actions.length && (cancelAnimationFrame(e), (t.scheduled = void 0));
                    }
                }
            );
            let Uv = 1;
            const $v = Promise.resolve(),
                zv = {};
            function qv(t) {
                return t in zv && (delete zv[t], !0);
            }
            const Wv = {
                    setImmediate(t) {
                        const e = Uv++;
                        return (zv[e] = !0), $v.then(() => qv(e) && t()), e;
                    },
                    clearImmediate(t) {
                        qv(t);
                    },
                },
                Qv = new (class extends c_ {
                    flush(t) {
                        (this.active = !0), (this.scheduled = void 0);
                        const { actions: e } = this;
                        let n,
                            s = -1,
                            r = e.length;
                        t = t || e.shift();
                        do {
                            if ((n = t.execute(t.state, t.delay))) break;
                        } while (++s < r && (t = e.shift()));
                        if (((this.active = !1), n)) {
                            for (; ++s < r && (t = e.shift()); ) t.unsubscribe();
                            throw n;
                        }
                    }
                })(
                    class extends a_ {
                        constructor(t, e) {
                            super(t, e), (this.scheduler = t), (this.work = e);
                        }
                        requestAsyncId(t, e, n = 0) {
                            return null !== n && n > 0
                                ? super.requestAsyncId(t, e, n)
                                : (t.actions.push(this), t.scheduled || (t.scheduled = Wv.setImmediate(t.flush.bind(t, null))));
                        }
                        recycleAsyncId(t, e, n = 0) {
                            if ((null !== n && n > 0) || (null === n && this.delay > 0)) return super.recycleAsyncId(t, e, n);
                            0 === t.actions.length && (Wv.clearImmediate(e), (t.scheduled = void 0));
                        }
                    }
                );
            class Kv {
                constructor(t) {
                    this.durationSelector = t;
                }
                call(t, e) {
                    return e.subscribe(new Zv(t, this.durationSelector));
                }
            }
            class Zv extends M {
                constructor(t, e) {
                    super(t), (this.durationSelector = e), (this.hasValue = !1);
                }
                _next(t) {
                    if (((this.value = t), (this.hasValue = !0), !this.throttled)) {
                        let n;
                        try {
                            const { durationSelector: e } = this;
                            n = e(t);
                        } catch (e) {
                            return this.destination.error(e);
                        }
                        const s = j(n, new F(this));
                        !s || s.closed ? this.clearThrottle() : this.add((this.throttled = s));
                    }
                }
                clearThrottle() {
                    const { value: t, hasValue: e, throttled: n } = this;
                    n && (this.remove(n), (this.throttled = void 0), n.unsubscribe()),
                        e && ((this.value = void 0), (this.hasValue = !1), this.destination.next(t));
                }
                notifyNext() {
                    this.clearThrottle();
                }
                notifyComplete() {
                    this.clearThrottle();
                }
            }
            function Yv(t) {
                return !l(t) && t - parseFloat(t) + 1 >= 0;
            }
            function Gv(t) {
                const { index: e, period: n, subscriber: s } = t;
                if ((s.next(e), !s.closed)) {
                    if (-1 === n) return s.complete();
                    (t.index = e + 1), this.schedule(t, n);
                }
            }
            function Xv(t, e = u_) {
                return (
                    (n = () =>
                        (function (t = 0, e, n) {
                            let s = -1;
                            return (
                                Yv(e) ? (s = Number(e) < 1 ? 1 : Number(e)) : C(e) && (n = e),
                                C(n) || (n = u_),
                                new _((e) => {
                                    const r = Yv(t) ? t : +t - n.now();
                                    return n.schedule(Gv, r, { index: 0, period: s, subscriber: e });
                                })
                            );
                        })(t, e)),
                    function (t) {
                        return t.lift(new Kv(n));
                    }
                );
                var n;
            }
            function Jv(t, e) {
                return new _(e ? (n) => e.schedule(tb, 0, { error: t, subscriber: n }) : (e) => e.error(t));
            }
            function tb({ error: t, subscriber: e }) {
                e.error(t);
            }
            new (class extends c_ {})(
                class extends a_ {
                    constructor(t, e) {
                        super(t, e), (this.scheduler = t), (this.work = e);
                    }
                    schedule(t, e = 0) {
                        return e > 0 ? super.schedule(t, e) : ((this.delay = e), (this.state = t), this.scheduler.flush(this), this);
                    }
                    execute(t, e) {
                        return e > 0 || this.closed ? super.execute(t, e) : this._execute(t, e);
                    }
                    requestAsyncId(t, e, n = 0) {
                        return (null !== n && n > 0) || (null === n && this.delay > 0) ? super.requestAsyncId(t, e, n) : t.flush(this);
                    }
                }
            );
            class eb {
                constructor(t, e, n) {
                    (this.kind = t), (this.value = e), (this.error = n), (this.hasValue = 'N' === t);
                }
                observe(t) {
                    switch (this.kind) {
                        case 'N':
                            return t.next && t.next(this.value);
                        case 'E':
                            return t.error && t.error(this.error);
                        case 'C':
                            return t.complete && t.complete();
                    }
                }
                do(t, e, n) {
                    switch (this.kind) {
                        case 'N':
                            return t && t(this.value);
                        case 'E':
                            return e && e(this.error);
                        case 'C':
                            return n && n();
                    }
                }
                accept(t, e, n) {
                    return t && 'function' == typeof t.next ? this.observe(t) : this.do(t, e, n);
                }
                toObservable() {
                    switch (this.kind) {
                        case 'N':
                            return Uu(this.value);
                        case 'E':
                            return Jv(this.error);
                        case 'C':
                            return Ju();
                    }
                    throw new Error('unexpected notification kind value');
                }
                static createNext(t) {
                    return void 0 !== t ? new eb('N', t) : eb.undefinedValueNotification;
                }
                static createError(t) {
                    return new eb('E', void 0, t);
                }
                static createComplete() {
                    return eb.completeNotification;
                }
            }
            (eb.completeNotification = new eb('C')), (eb.undefinedValueNotification = new eb('N', void 0));
            let nb = (() => {
                    class t {
                        constructor(t, e, n) {
                            (this._ngZone = t),
                                (this._platform = e),
                                (this._scrolled = new S()),
                                (this._globalSubscription = null),
                                (this._scrolledCount = 0),
                                (this.scrollContainers = new Map()),
                                (this._document = n);
                        }
                        register(t) {
                            this.scrollContainers.has(t) ||
                                this.scrollContainers.set(
                                    t,
                                    t.elementScrolled().subscribe(() => this._scrolled.next(t))
                                );
                        }
                        deregister(t) {
                            const e = this.scrollContainers.get(t);
                            e && (e.unsubscribe(), this.scrollContainers.delete(t));
                        }
                        scrolled(t = 20) {
                            return this._platform.isBrowser
                                ? new _((e) => {
                                      this._globalSubscription || this._addGlobalListener();
                                      const n = t > 0 ? this._scrolled.pipe(Xv(t)).subscribe(e) : this._scrolled.subscribe(e);
                                      return (
                                          this._scrolledCount++,
                                          () => {
                                              n.unsubscribe(), this._scrolledCount--, this._scrolledCount || this._removeGlobalListener();
                                          }
                                      );
                                  })
                                : Uu();
                        }
                        ngOnDestroy() {
                            this._removeGlobalListener(),
                                this.scrollContainers.forEach((t, e) => this.deregister(e)),
                                this._scrolled.complete();
                        }
                        ancestorScrolled(t, e) {
                            const n = this.getAncestorScrollContainers(t);
                            return this.scrolled(e).pipe(dh((t) => !t || n.indexOf(t) > -1));
                        }
                        getAncestorScrollContainers(t) {
                            const e = [];
                            return (
                                this.scrollContainers.forEach((n, s) => {
                                    this._scrollableContainsElement(s, t) && e.push(s);
                                }),
                                e
                            );
                        }
                        _getWindow() {
                            return this._document.defaultView || window;
                        }
                        _scrollableContainsElement(t, e) {
                            let n = C_(e),
                                s = t.getElementRef().nativeElement;
                            do {
                                if (n == s) return !0;
                            } while ((n = n.parentElement));
                            return !1;
                        }
                        _addGlobalListener() {
                            this._globalSubscription = this._ngZone.runOutsideAngular(() =>
                                Bv(this._getWindow().document, 'scroll').subscribe(() => this._scrolled.next())
                            );
                        }
                        _removeGlobalListener() {
                            this._globalSubscription && (this._globalSubscription.unsubscribe(), (this._globalSubscription = null));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Wl), as(O_), as(Cc, 8));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(Wl), as(O_), as(Cc, 8));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                sb = (() => {
                    class t {
                        constructor(t, e, n) {
                            (this._platform = t),
                                (this._change = new S()),
                                (this._changeListener = (t) => {
                                    this._change.next(t);
                                }),
                                (this._document = n),
                                e.runOutsideAngular(() => {
                                    if (t.isBrowser) {
                                        const t = this._getWindow();
                                        t.addEventListener('resize', this._changeListener),
                                            t.addEventListener('orientationchange', this._changeListener);
                                    }
                                    this.change().subscribe(() => (this._viewportSize = null));
                                });
                        }
                        ngOnDestroy() {
                            if (this._platform.isBrowser) {
                                const t = this._getWindow();
                                t.removeEventListener('resize', this._changeListener),
                                    t.removeEventListener('orientationchange', this._changeListener);
                            }
                            this._change.complete();
                        }
                        getViewportSize() {
                            this._viewportSize || this._updateViewportSize();
                            const t = { width: this._viewportSize.width, height: this._viewportSize.height };
                            return this._platform.isBrowser || (this._viewportSize = null), t;
                        }
                        getViewportRect() {
                            const t = this.getViewportScrollPosition(),
                                { width: e, height: n } = this.getViewportSize();
                            return { top: t.top, left: t.left, bottom: t.top + n, right: t.left + e, height: n, width: e };
                        }
                        getViewportScrollPosition() {
                            if (!this._platform.isBrowser) return { top: 0, left: 0 };
                            const t = this._document,
                                e = this._getWindow(),
                                n = t.documentElement,
                                s = n.getBoundingClientRect();
                            return {
                                top: -s.top || t.body.scrollTop || e.scrollY || n.scrollTop || 0,
                                left: -s.left || t.body.scrollLeft || e.scrollX || n.scrollLeft || 0,
                            };
                        }
                        change(t = 20) {
                            return t > 0 ? this._change.pipe(Xv(t)) : this._change;
                        }
                        _getWindow() {
                            return this._document.defaultView || window;
                        }
                        _updateViewportSize() {
                            const t = this._getWindow();
                            this._viewportSize = this._platform.isBrowser
                                ? { width: t.innerWidth, height: t.innerHeight }
                                : { width: 0, height: 0 };
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(O_), as(Wl), as(Cc, 8));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(O_), as(Wl), as(Cc, 8));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                rb = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })(),
                ib = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[ov, I_, rb], ov, rb] })),
                        t
                    );
                })();
            class ob {
                attach(t) {
                    return (this._attachedHost = t), t.attach(this);
                }
                detach() {
                    let t = this._attachedHost;
                    null != t && ((this._attachedHost = null), t.detach());
                }
                get isAttached() {
                    return null != this._attachedHost;
                }
                setAttachedHost(t) {
                    this._attachedHost = t;
                }
            }
            class ab extends ob {
                constructor(t, e, n, s) {
                    super(), (this.component = t), (this.viewContainerRef = e), (this.injector = n), (this.componentFactoryResolver = s);
                }
            }
            class lb extends ob {
                constructor(t, e, n) {
                    super(), (this.templateRef = t), (this.viewContainerRef = e), (this.context = n);
                }
                get origin() {
                    return this.templateRef.elementRef;
                }
                attach(t, e = this.context) {
                    return (this.context = e), super.attach(t);
                }
                detach() {
                    return (this.context = void 0), super.detach();
                }
            }
            class cb extends ob {
                constructor(t) {
                    super(), (this.element = t instanceof oa ? t.nativeElement : t);
                }
            }
            class ub {
                constructor() {
                    (this._isDisposed = !1), (this.attachDomPortal = null);
                }
                hasAttached() {
                    return !!this._attachedPortal;
                }
                attach(t) {
                    return t instanceof ab
                        ? ((this._attachedPortal = t), this.attachComponentPortal(t))
                        : t instanceof lb
                        ? ((this._attachedPortal = t), this.attachTemplatePortal(t))
                        : this.attachDomPortal && t instanceof cb
                        ? ((this._attachedPortal = t), this.attachDomPortal(t))
                        : void 0;
                }
                detach() {
                    this._attachedPortal && (this._attachedPortal.setAttachedHost(null), (this._attachedPortal = null)),
                        this._invokeDisposeFn();
                }
                dispose() {
                    this.hasAttached() && this.detach(), this._invokeDisposeFn(), (this._isDisposed = !0);
                }
                setDisposeFn(t) {
                    this._disposeFn = t;
                }
                _invokeDisposeFn() {
                    this._disposeFn && (this._disposeFn(), (this._disposeFn = null));
                }
            }
            class hb extends ub {
                constructor(t, e, n, s, r) {
                    super(),
                        (this.outletElement = t),
                        (this._componentFactoryResolver = e),
                        (this._appRef = n),
                        (this._defaultInjector = s),
                        (this.attachDomPortal = (t) => {
                            const e = t.element,
                                n = this._document.createComment('dom-portal');
                            e.parentNode.insertBefore(n, e),
                                this.outletElement.appendChild(e),
                                (this._attachedPortal = t),
                                super.setDisposeFn(() => {
                                    n.parentNode && n.parentNode.replaceChild(e, n);
                                });
                        }),
                        (this._document = r);
                }
                attachComponentPortal(t) {
                    const e = (t.componentFactoryResolver || this._componentFactoryResolver).resolveComponentFactory(t.component);
                    let n;
                    return (
                        t.viewContainerRef
                            ? ((n = t.viewContainerRef.createComponent(
                                  e,
                                  t.viewContainerRef.length,
                                  t.injector || t.viewContainerRef.injector
                              )),
                              this.setDisposeFn(() => n.destroy()))
                            : ((n = e.create(t.injector || this._defaultInjector)),
                              this._appRef.attachView(n.hostView),
                              this.setDisposeFn(() => {
                                  this._appRef.detachView(n.hostView), n.destroy();
                              })),
                        this.outletElement.appendChild(this._getComponentRootNode(n)),
                        (this._attachedPortal = t),
                        n
                    );
                }
                attachTemplatePortal(t) {
                    let e = t.viewContainerRef,
                        n = e.createEmbeddedView(t.templateRef, t.context);
                    return (
                        n.rootNodes.forEach((t) => this.outletElement.appendChild(t)),
                        n.detectChanges(),
                        this.setDisposeFn(() => {
                            let t = e.indexOf(n);
                            -1 !== t && e.remove(t);
                        }),
                        (this._attachedPortal = t),
                        n
                    );
                }
                dispose() {
                    super.dispose(), null != this.outletElement.parentNode && this.outletElement.parentNode.removeChild(this.outletElement);
                }
                _getComponentRootNode(t) {
                    return t.hostView.rootNodes[0];
                }
            }
            let db = (() => {
                    class t extends ub {
                        constructor(t, e, n) {
                            super(),
                                (this._componentFactoryResolver = t),
                                (this._viewContainerRef = e),
                                (this._isInitialized = !1),
                                (this.attached = new ol()),
                                (this.attachDomPortal = (t) => {
                                    const e = t.element,
                                        n = this._document.createComment('dom-portal');
                                    t.setAttachedHost(this),
                                        e.parentNode.insertBefore(n, e),
                                        this._getRootNode().appendChild(e),
                                        (this._attachedPortal = t),
                                        super.setDisposeFn(() => {
                                            n.parentNode && n.parentNode.replaceChild(e, n);
                                        });
                                }),
                                (this._document = n);
                        }
                        get portal() {
                            return this._attachedPortal;
                        }
                        set portal(t) {
                            (!this.hasAttached() || t || this._isInitialized) &&
                                (this.hasAttached() && super.detach(), t && super.attach(t), (this._attachedPortal = t));
                        }
                        get attachedRef() {
                            return this._attachedRef;
                        }
                        ngOnInit() {
                            this._isInitialized = !0;
                        }
                        ngOnDestroy() {
                            super.dispose(), (this._attachedPortal = null), (this._attachedRef = null);
                        }
                        attachComponentPortal(t) {
                            t.setAttachedHost(this);
                            const e = null != t.viewContainerRef ? t.viewContainerRef : this._viewContainerRef,
                                n = (t.componentFactoryResolver || this._componentFactoryResolver).resolveComponentFactory(t.component),
                                s = e.createComponent(n, e.length, t.injector || e.injector);
                            return (
                                e !== this._viewContainerRef && this._getRootNode().appendChild(s.hostView.rootNodes[0]),
                                super.setDisposeFn(() => s.destroy()),
                                (this._attachedPortal = t),
                                (this._attachedRef = s),
                                this.attached.emit(s),
                                s
                            );
                        }
                        attachTemplatePortal(t) {
                            t.setAttachedHost(this);
                            const e = this._viewContainerRef.createEmbeddedView(t.templateRef, t.context);
                            return (
                                super.setDisposeFn(() => this._viewContainerRef.clear()),
                                (this._attachedPortal = t),
                                (this._attachedRef = e),
                                this.attached.emit(e),
                                e
                            );
                        }
                        _getRootNode() {
                            const t = this._viewContainerRef.element.nativeElement;
                            return t.nodeType === t.ELEMENT_NODE ? t : t.parentNode;
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(na), fo(za), fo(Cc));
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [['', 'cdkPortalOutlet', '']],
                            inputs: { portal: ['cdkPortalOutlet', 'portal'] },
                            outputs: { attached: 'attached' },
                            exportAs: ['cdkPortalOutlet'],
                            features: [eo],
                        })),
                        t
                    );
                })(),
                pb = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })();
            const fb = L_();
            class mb {
                constructor(t, e) {
                    (this._viewportRuler = t),
                        (this._previousHTMLStyles = { top: '', left: '' }),
                        (this._isEnabled = !1),
                        (this._document = e);
                }
                attach() {}
                enable() {
                    if (this._canBeEnabled()) {
                        const t = this._document.documentElement;
                        (this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition()),
                            (this._previousHTMLStyles.left = t.style.left || ''),
                            (this._previousHTMLStyles.top = t.style.top || ''),
                            (t.style.left = E_(-this._previousScrollPosition.left)),
                            (t.style.top = E_(-this._previousScrollPosition.top)),
                            t.classList.add('cdk-global-scrollblock'),
                            (this._isEnabled = !0);
                    }
                }
                disable() {
                    if (this._isEnabled) {
                        const t = this._document.documentElement,
                            e = t.style,
                            n = this._document.body.style,
                            s = e.scrollBehavior || '',
                            r = n.scrollBehavior || '';
                        (this._isEnabled = !1),
                            (e.left = this._previousHTMLStyles.left),
                            (e.top = this._previousHTMLStyles.top),
                            t.classList.remove('cdk-global-scrollblock'),
                            fb && (e.scrollBehavior = n.scrollBehavior = 'auto'),
                            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top),
                            fb && ((e.scrollBehavior = s), (n.scrollBehavior = r));
                    }
                }
                _canBeEnabled() {
                    if (this._document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) return !1;
                    const t = this._document.body,
                        e = this._viewportRuler.getViewportSize();
                    return t.scrollHeight > e.height || t.scrollWidth > e.width;
                }
            }
            class gb {
                constructor(t, e, n, s) {
                    (this._scrollDispatcher = t),
                        (this._ngZone = e),
                        (this._viewportRuler = n),
                        (this._config = s),
                        (this._scrollSubscription = null),
                        (this._detach = () => {
                            this.disable(), this._overlayRef.hasAttached() && this._ngZone.run(() => this._overlayRef.detach());
                        });
                }
                attach(t) {
                    this._overlayRef = t;
                }
                enable() {
                    if (this._scrollSubscription) return;
                    const t = this._scrollDispatcher.scrolled(0);
                    this._config && this._config.threshold && this._config.threshold > 1
                        ? ((this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top),
                          (this._scrollSubscription = t.subscribe(() => {
                              const t = this._viewportRuler.getViewportScrollPosition().top;
                              Math.abs(t - this._initialScrollPosition) > this._config.threshold
                                  ? this._detach()
                                  : this._overlayRef.updatePosition();
                          })))
                        : (this._scrollSubscription = t.subscribe(this._detach));
                }
                disable() {
                    this._scrollSubscription && (this._scrollSubscription.unsubscribe(), (this._scrollSubscription = null));
                }
                detach() {
                    this.disable(), (this._overlayRef = null);
                }
            }
            class yb {
                enable() {}
                disable() {}
                attach() {}
            }
            function _b(t, e) {
                return e.some((e) => t.bottom < e.top || t.top > e.bottom || t.right < e.left || t.left > e.right);
            }
            function vb(t, e) {
                return e.some((e) => t.top < e.top || t.bottom > e.bottom || t.left < e.left || t.right > e.right);
            }
            class bb {
                constructor(t, e, n, s) {
                    (this._scrollDispatcher = t),
                        (this._viewportRuler = e),
                        (this._ngZone = n),
                        (this._config = s),
                        (this._scrollSubscription = null);
                }
                attach(t) {
                    this._overlayRef = t;
                }
                enable() {
                    this._scrollSubscription ||
                        (this._scrollSubscription = this._scrollDispatcher
                            .scrolled(this._config ? this._config.scrollThrottle : 0)
                            .subscribe(() => {
                                if ((this._overlayRef.updatePosition(), this._config && this._config.autoClose)) {
                                    const t = this._overlayRef.overlayElement.getBoundingClientRect(),
                                        { width: e, height: n } = this._viewportRuler.getViewportSize();
                                    _b(t, [{ width: e, height: n, bottom: n, right: e, top: 0, left: 0 }]) &&
                                        (this.disable(), this._ngZone.run(() => this._overlayRef.detach()));
                                }
                            }));
                }
                disable() {
                    this._scrollSubscription && (this._scrollSubscription.unsubscribe(), (this._scrollSubscription = null));
                }
                detach() {
                    this.disable(), (this._overlayRef = null);
                }
            }
            let wb = (() => {
                class t {
                    constructor(t, e, n, s) {
                        (this._scrollDispatcher = t),
                            (this._viewportRuler = e),
                            (this._ngZone = n),
                            (this.noop = () => new yb()),
                            (this.close = (t) => new gb(this._scrollDispatcher, this._ngZone, this._viewportRuler, t)),
                            (this.block = () => new mb(this._viewportRuler, this._document)),
                            (this.reposition = (t) => new bb(this._scrollDispatcher, this._viewportRuler, this._ngZone, t)),
                            (this._document = s);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(nb), as(sb), as(Wl), as(Cc));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(nb), as(sb), as(Wl), as(Cc));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            class xb {
                constructor(t) {
                    if (
                        ((this.scrollStrategy = new yb()),
                        (this.panelClass = ''),
                        (this.hasBackdrop = !1),
                        (this.backdropClass = 'cdk-overlay-dark-backdrop'),
                        (this.disposeOnNavigation = !1),
                        t)
                    ) {
                        const e = Object.keys(t);
                        for (const n of e) void 0 !== t[n] && (this[n] = t[n]);
                    }
                }
            }
            class Sb {
                constructor(t, e, n, s, r) {
                    (this.offsetX = n),
                        (this.offsetY = s),
                        (this.panelClass = r),
                        (this.originX = t.originX),
                        (this.originY = t.originY),
                        (this.overlayX = e.overlayX),
                        (this.overlayY = e.overlayY);
                }
            }
            class Eb {
                constructor(t, e) {
                    (this.connectionPair = t), (this.scrollableViewProperties = e);
                }
            }
            let Cb = (() => {
                    class t {
                        constructor(t) {
                            (this._attachedOverlays = []), (this._document = t);
                        }
                        ngOnDestroy() {
                            this.detach();
                        }
                        add(t) {
                            this.remove(t), this._attachedOverlays.push(t);
                        }
                        remove(t) {
                            const e = this._attachedOverlays.indexOf(t);
                            e > -1 && this._attachedOverlays.splice(e, 1), 0 === this._attachedOverlays.length && this.detach();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Cc));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(Cc));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                kb = (() => {
                    class t extends Cb {
                        constructor(t) {
                            super(t),
                                (this._keydownListener = (t) => {
                                    const e = this._attachedOverlays;
                                    for (let n = e.length - 1; n > -1; n--)
                                        if (e[n]._keydownEvents.observers.length > 0) {
                                            e[n]._keydownEvents.next(t);
                                            break;
                                        }
                                });
                        }
                        add(t) {
                            super.add(t),
                                this._isAttached ||
                                    (this._document.body.addEventListener('keydown', this._keydownListener), (this._isAttached = !0));
                        }
                        detach() {
                            this._isAttached &&
                                (this._document.body.removeEventListener('keydown', this._keydownListener), (this._isAttached = !1));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Cc));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(Cc));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                Tb = (() => {
                    class t extends Cb {
                        constructor(t, e) {
                            super(t),
                                (this._platform = e),
                                (this._cursorStyleIsSet = !1),
                                (this._clickListener = (t) => {
                                    const e = F_(t),
                                        n = this._attachedOverlays.slice();
                                    for (let s = n.length - 1; s > -1; s--) {
                                        const r = n[s];
                                        if (!(r._outsidePointerEvents.observers.length < 1) && r.hasAttached()) {
                                            if (r.overlayElement.contains(e)) break;
                                            r._outsidePointerEvents.next(t);
                                        }
                                    }
                                });
                        }
                        add(t) {
                            if ((super.add(t), !this._isAttached)) {
                                const t = this._document.body;
                                t.addEventListener('click', this._clickListener, !0),
                                    t.addEventListener('auxclick', this._clickListener, !0),
                                    t.addEventListener('contextmenu', this._clickListener, !0),
                                    this._platform.IOS &&
                                        !this._cursorStyleIsSet &&
                                        ((this._cursorOriginalValue = t.style.cursor),
                                        (t.style.cursor = 'pointer'),
                                        (this._cursorStyleIsSet = !0)),
                                    (this._isAttached = !0);
                            }
                        }
                        detach() {
                            if (this._isAttached) {
                                const t = this._document.body;
                                t.removeEventListener('click', this._clickListener, !0),
                                    t.removeEventListener('auxclick', this._clickListener, !0),
                                    t.removeEventListener('contextmenu', this._clickListener, !0),
                                    this._platform.IOS &&
                                        this._cursorStyleIsSet &&
                                        ((t.style.cursor = this._cursorOriginalValue), (this._cursorStyleIsSet = !1)),
                                    (this._isAttached = !1);
                            }
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Cc), as(O_));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(Cc), as(O_));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            const Ab = 'undefined' != typeof window ? window : {},
                Rb =
                    (void 0 !== Ab.__karma__ && !!Ab.__karma__) ||
                    (void 0 !== Ab.jasmine && !!Ab.jasmine) ||
                    (void 0 !== Ab.jest && !!Ab.jest) ||
                    (void 0 !== Ab.Mocha && !!Ab.Mocha);
            let Ob = (() => {
                class t {
                    constructor(t, e) {
                        (this._platform = e), (this._document = t);
                    }
                    ngOnDestroy() {
                        const t = this._containerElement;
                        t && t.parentNode && t.parentNode.removeChild(t);
                    }
                    getContainerElement() {
                        return this._containerElement || this._createContainer(), this._containerElement;
                    }
                    _createContainer() {
                        const t = 'cdk-overlay-container';
                        if (this._platform.isBrowser || Rb) {
                            const e = this._document.querySelectorAll(`.${t}[platform="server"], .${t}[platform="test"]`);
                            for (let t = 0; t < e.length; t++) e[t].parentNode.removeChild(e[t]);
                        }
                        const e = this._document.createElement('div');
                        e.classList.add(t),
                            Rb ? e.setAttribute('platform', 'test') : this._platform.isBrowser || e.setAttribute('platform', 'server'),
                            this._document.body.appendChild(e),
                            (this._containerElement = e);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(Cc), as(O_));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(Cc), as(O_));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            class Ib {
                constructor(t, e, n, s, r, i, o, a, l) {
                    (this._portalOutlet = t),
                        (this._host = e),
                        (this._pane = n),
                        (this._config = s),
                        (this._ngZone = r),
                        (this._keyboardDispatcher = i),
                        (this._document = o),
                        (this._location = a),
                        (this._outsideClickDispatcher = l),
                        (this._backdropElement = null),
                        (this._backdropClick = new S()),
                        (this._attachments = new S()),
                        (this._detachments = new S()),
                        (this._locationChanges = h.EMPTY),
                        (this._backdropClickHandler = (t) => this._backdropClick.next(t)),
                        (this._keydownEvents = new S()),
                        (this._outsidePointerEvents = new S()),
                        s.scrollStrategy && ((this._scrollStrategy = s.scrollStrategy), this._scrollStrategy.attach(this)),
                        (this._positionStrategy = s.positionStrategy);
                }
                get overlayElement() {
                    return this._pane;
                }
                get backdropElement() {
                    return this._backdropElement;
                }
                get hostElement() {
                    return this._host;
                }
                attach(t) {
                    let e = this._portalOutlet.attach(t);
                    return (
                        !this._host.parentElement && this._previousHostParent && this._previousHostParent.appendChild(this._host),
                        this._positionStrategy && this._positionStrategy.attach(this),
                        this._updateStackingOrder(),
                        this._updateElementSize(),
                        this._updateElementDirection(),
                        this._scrollStrategy && this._scrollStrategy.enable(),
                        this._ngZone.onStable.pipe(ih(1)).subscribe(() => {
                            this.hasAttached() && this.updatePosition();
                        }),
                        this._togglePointerEvents(!0),
                        this._config.hasBackdrop && this._attachBackdrop(),
                        this._config.panelClass && this._toggleClasses(this._pane, this._config.panelClass, !0),
                        this._attachments.next(),
                        this._keyboardDispatcher.add(this),
                        this._config.disposeOnNavigation && (this._locationChanges = this._location.subscribe(() => this.dispose())),
                        this._outsideClickDispatcher.add(this),
                        e
                    );
                }
                detach() {
                    if (!this.hasAttached()) return;
                    this.detachBackdrop(),
                        this._togglePointerEvents(!1),
                        this._positionStrategy && this._positionStrategy.detach && this._positionStrategy.detach(),
                        this._scrollStrategy && this._scrollStrategy.disable();
                    const t = this._portalOutlet.detach();
                    return (
                        this._detachments.next(),
                        this._keyboardDispatcher.remove(this),
                        this._detachContentWhenStable(),
                        this._locationChanges.unsubscribe(),
                        this._outsideClickDispatcher.remove(this),
                        t
                    );
                }
                dispose() {
                    const t = this.hasAttached();
                    this._positionStrategy && this._positionStrategy.dispose(),
                        this._disposeScrollStrategy(),
                        this.detachBackdrop(),
                        this._locationChanges.unsubscribe(),
                        this._keyboardDispatcher.remove(this),
                        this._portalOutlet.dispose(),
                        this._attachments.complete(),
                        this._backdropClick.complete(),
                        this._keydownEvents.complete(),
                        this._outsidePointerEvents.complete(),
                        this._outsideClickDispatcher.remove(this),
                        this._host && this._host.parentNode && (this._host.parentNode.removeChild(this._host), (this._host = null)),
                        (this._previousHostParent = this._pane = null),
                        t && this._detachments.next(),
                        this._detachments.complete();
                }
                hasAttached() {
                    return this._portalOutlet.hasAttached();
                }
                backdropClick() {
                    return this._backdropClick;
                }
                attachments() {
                    return this._attachments;
                }
                detachments() {
                    return this._detachments;
                }
                keydownEvents() {
                    return this._keydownEvents;
                }
                outsidePointerEvents() {
                    return this._outsidePointerEvents;
                }
                getConfig() {
                    return this._config;
                }
                updatePosition() {
                    this._positionStrategy && this._positionStrategy.apply();
                }
                updatePositionStrategy(t) {
                    t !== this._positionStrategy &&
                        (this._positionStrategy && this._positionStrategy.dispose(),
                        (this._positionStrategy = t),
                        this.hasAttached() && (t.attach(this), this.updatePosition()));
                }
                updateSize(t) {
                    (this._config = Object.assign(Object.assign({}, this._config), t)), this._updateElementSize();
                }
                setDirection(t) {
                    (this._config = Object.assign(Object.assign({}, this._config), { direction: t })), this._updateElementDirection();
                }
                addPanelClass(t) {
                    this._pane && this._toggleClasses(this._pane, t, !0);
                }
                removePanelClass(t) {
                    this._pane && this._toggleClasses(this._pane, t, !1);
                }
                getDirection() {
                    const t = this._config.direction;
                    return t ? ('string' == typeof t ? t : t.value) : 'ltr';
                }
                updateScrollStrategy(t) {
                    t !== this._scrollStrategy &&
                        (this._disposeScrollStrategy(), (this._scrollStrategy = t), this.hasAttached() && (t.attach(this), t.enable()));
                }
                _updateElementDirection() {
                    this._host.setAttribute('dir', this.getDirection());
                }
                _updateElementSize() {
                    if (!this._pane) return;
                    const t = this._pane.style;
                    (t.width = E_(this._config.width)),
                        (t.height = E_(this._config.height)),
                        (t.minWidth = E_(this._config.minWidth)),
                        (t.minHeight = E_(this._config.minHeight)),
                        (t.maxWidth = E_(this._config.maxWidth)),
                        (t.maxHeight = E_(this._config.maxHeight));
                }
                _togglePointerEvents(t) {
                    this._pane.style.pointerEvents = t ? '' : 'none';
                }
                _attachBackdrop() {
                    const t = 'cdk-overlay-backdrop-showing';
                    (this._backdropElement = this._document.createElement('div')),
                        this._backdropElement.classList.add('cdk-overlay-backdrop'),
                        this._config.backdropClass && this._toggleClasses(this._backdropElement, this._config.backdropClass, !0),
                        this._host.parentElement.insertBefore(this._backdropElement, this._host),
                        this._backdropElement.addEventListener('click', this._backdropClickHandler),
                        'undefined' != typeof requestAnimationFrame
                            ? this._ngZone.runOutsideAngular(() => {
                                  requestAnimationFrame(() => {
                                      this._backdropElement && this._backdropElement.classList.add(t);
                                  });
                              })
                            : this._backdropElement.classList.add(t);
                }
                _updateStackingOrder() {
                    this._host.nextSibling && this._host.parentNode.appendChild(this._host);
                }
                detachBackdrop() {
                    let t,
                        e = this._backdropElement;
                    if (!e) return;
                    let n = () => {
                        e &&
                            (e.removeEventListener('click', this._backdropClickHandler),
                            e.removeEventListener('transitionend', n),
                            e.parentNode && e.parentNode.removeChild(e)),
                            this._backdropElement == e && (this._backdropElement = null),
                            this._config.backdropClass && this._toggleClasses(e, this._config.backdropClass, !1),
                            clearTimeout(t);
                    };
                    e.classList.remove('cdk-overlay-backdrop-showing'),
                        this._ngZone.runOutsideAngular(() => {
                            e.addEventListener('transitionend', n);
                        }),
                        (e.style.pointerEvents = 'none'),
                        (t = this._ngZone.runOutsideAngular(() => setTimeout(n, 500)));
                }
                _toggleClasses(t, e, n) {
                    const s = t.classList;
                    S_(e).forEach((t) => {
                        t && (n ? s.add(t) : s.remove(t));
                    });
                }
                _detachContentWhenStable() {
                    this._ngZone.runOutsideAngular(() => {
                        const t = this._ngZone.onStable.pipe(__(z(this._attachments, this._detachments))).subscribe(() => {
                            (this._pane && this._host && 0 !== this._pane.children.length) ||
                                (this._pane && this._config.panelClass && this._toggleClasses(this._pane, this._config.panelClass, !1),
                                this._host &&
                                    this._host.parentElement &&
                                    ((this._previousHostParent = this._host.parentElement),
                                    this._previousHostParent.removeChild(this._host)),
                                t.unsubscribe());
                        });
                    });
                }
                _disposeScrollStrategy() {
                    const t = this._scrollStrategy;
                    t && (t.disable(), t.detach && t.detach());
                }
            }
            const Pb = 'cdk-overlay-connected-position-bounding-box',
                Lb = /([A-Za-z%]+)$/;
            class Db {
                constructor(t, e, n, s, r) {
                    (this._viewportRuler = e),
                        (this._document = n),
                        (this._platform = s),
                        (this._overlayContainer = r),
                        (this._lastBoundingBoxSize = { width: 0, height: 0 }),
                        (this._isPushed = !1),
                        (this._canPush = !0),
                        (this._growAfterOpen = !1),
                        (this._hasFlexibleDimensions = !0),
                        (this._positionLocked = !1),
                        (this._viewportMargin = 0),
                        (this._scrollables = []),
                        (this._preferredPositions = []),
                        (this._positionChanges = new S()),
                        (this._resizeSubscription = h.EMPTY),
                        (this._offsetX = 0),
                        (this._offsetY = 0),
                        (this._appliedPanelClasses = []),
                        (this.positionChanges = this._positionChanges),
                        this.setOrigin(t);
                }
                get positions() {
                    return this._preferredPositions;
                }
                attach(t) {
                    this._validatePositions(),
                        t.hostElement.classList.add(Pb),
                        (this._overlayRef = t),
                        (this._boundingBox = t.hostElement),
                        (this._pane = t.overlayElement),
                        (this._isDisposed = !1),
                        (this._isInitialRender = !0),
                        (this._lastPosition = null),
                        this._resizeSubscription.unsubscribe(),
                        (this._resizeSubscription = this._viewportRuler.change().subscribe(() => {
                            (this._isInitialRender = !0), this.apply();
                        }));
                }
                apply() {
                    if (this._isDisposed || !this._platform.isBrowser) return;
                    if (!this._isInitialRender && this._positionLocked && this._lastPosition) return void this.reapplyLastPosition();
                    this._clearPanelClasses(),
                        this._resetOverlayElementStyles(),
                        this._resetBoundingBoxStyles(),
                        (this._viewportRect = this._getNarrowedViewportRect()),
                        (this._originRect = this._getOriginRect()),
                        (this._overlayRect = this._pane.getBoundingClientRect());
                    const t = this._originRect,
                        e = this._overlayRect,
                        n = this._viewportRect,
                        s = [];
                    let r;
                    for (let i of this._preferredPositions) {
                        let o = this._getOriginPoint(t, i),
                            a = this._getOverlayPoint(o, e, i),
                            l = this._getOverlayFit(a, e, n, i);
                        if (l.isCompletelyWithinViewport) return (this._isPushed = !1), void this._applyPosition(i, o);
                        this._canFitWithFlexibleDimensions(l, a, n)
                            ? s.push({ position: i, origin: o, overlayRect: e, boundingBoxRect: this._calculateBoundingBoxRect(o, i) })
                            : (!r || r.overlayFit.visibleArea < l.visibleArea) &&
                              (r = { overlayFit: l, overlayPoint: a, originPoint: o, position: i, overlayRect: e });
                    }
                    if (s.length) {
                        let t = null,
                            e = -1;
                        for (const n of s) {
                            const s = n.boundingBoxRect.width * n.boundingBoxRect.height * (n.position.weight || 1);
                            s > e && ((e = s), (t = n));
                        }
                        return (this._isPushed = !1), void this._applyPosition(t.position, t.origin);
                    }
                    if (this._canPush) return (this._isPushed = !0), void this._applyPosition(r.position, r.originPoint);
                    this._applyPosition(r.position, r.originPoint);
                }
                detach() {
                    this._clearPanelClasses(),
                        (this._lastPosition = null),
                        (this._previousPushAmount = null),
                        this._resizeSubscription.unsubscribe();
                }
                dispose() {
                    this._isDisposed ||
                        (this._boundingBox &&
                            Nb(this._boundingBox.style, {
                                top: '',
                                left: '',
                                right: '',
                                bottom: '',
                                height: '',
                                width: '',
                                alignItems: '',
                                justifyContent: '',
                            }),
                        this._pane && this._resetOverlayElementStyles(),
                        this._overlayRef && this._overlayRef.hostElement.classList.remove(Pb),
                        this.detach(),
                        this._positionChanges.complete(),
                        (this._overlayRef = this._boundingBox = null),
                        (this._isDisposed = !0));
                }
                reapplyLastPosition() {
                    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {
                        (this._originRect = this._getOriginRect()),
                            (this._overlayRect = this._pane.getBoundingClientRect()),
                            (this._viewportRect = this._getNarrowedViewportRect());
                        const t = this._lastPosition || this._preferredPositions[0],
                            e = this._getOriginPoint(this._originRect, t);
                        this._applyPosition(t, e);
                    }
                }
                withScrollableContainers(t) {
                    return (this._scrollables = t), this;
                }
                withPositions(t) {
                    return (
                        (this._preferredPositions = t),
                        -1 === t.indexOf(this._lastPosition) && (this._lastPosition = null),
                        this._validatePositions(),
                        this
                    );
                }
                withViewportMargin(t) {
                    return (this._viewportMargin = t), this;
                }
                withFlexibleDimensions(t = !0) {
                    return (this._hasFlexibleDimensions = t), this;
                }
                withGrowAfterOpen(t = !0) {
                    return (this._growAfterOpen = t), this;
                }
                withPush(t = !0) {
                    return (this._canPush = t), this;
                }
                withLockedPosition(t = !0) {
                    return (this._positionLocked = t), this;
                }
                setOrigin(t) {
                    return (this._origin = t), this;
                }
                withDefaultOffsetX(t) {
                    return (this._offsetX = t), this;
                }
                withDefaultOffsetY(t) {
                    return (this._offsetY = t), this;
                }
                withTransformOriginOn(t) {
                    return (this._transformOriginSelector = t), this;
                }
                _getOriginPoint(t, e) {
                    let n, s;
                    if ('center' == e.originX) n = t.left + t.width / 2;
                    else {
                        const s = this._isRtl() ? t.right : t.left,
                            r = this._isRtl() ? t.left : t.right;
                        n = 'start' == e.originX ? s : r;
                    }
                    return (s = 'center' == e.originY ? t.top + t.height / 2 : 'top' == e.originY ? t.top : t.bottom), { x: n, y: s };
                }
                _getOverlayPoint(t, e, n) {
                    let s, r;
                    return (
                        (s =
                            'center' == n.overlayX
                                ? -e.width / 2
                                : 'start' === n.overlayX
                                ? this._isRtl()
                                    ? -e.width
                                    : 0
                                : this._isRtl()
                                ? 0
                                : -e.width),
                        (r = 'center' == n.overlayY ? -e.height / 2 : 'top' == n.overlayY ? 0 : -e.height),
                        { x: t.x + s, y: t.y + r }
                    );
                }
                _getOverlayFit(t, e, n, s) {
                    const r = Mb(e);
                    let { x: i, y: o } = t,
                        a = this._getOffset(s, 'x'),
                        l = this._getOffset(s, 'y');
                    a && (i += a), l && (o += l);
                    let c = 0 - o,
                        u = o + r.height - n.height,
                        h = this._subtractOverflows(r.width, 0 - i, i + r.width - n.width),
                        d = this._subtractOverflows(r.height, c, u),
                        p = h * d;
                    return {
                        visibleArea: p,
                        isCompletelyWithinViewport: r.width * r.height === p,
                        fitsInViewportVertically: d === r.height,
                        fitsInViewportHorizontally: h == r.width,
                    };
                }
                _canFitWithFlexibleDimensions(t, e, n) {
                    if (this._hasFlexibleDimensions) {
                        const s = n.bottom - e.y,
                            r = n.right - e.x,
                            i = Fb(this._overlayRef.getConfig().minHeight),
                            o = Fb(this._overlayRef.getConfig().minWidth),
                            a = t.fitsInViewportHorizontally || (null != o && o <= r);
                        return (t.fitsInViewportVertically || (null != i && i <= s)) && a;
                    }
                    return !1;
                }
                _pushOverlayOnScreen(t, e, n) {
                    if (this._previousPushAmount && this._positionLocked)
                        return { x: t.x + this._previousPushAmount.x, y: t.y + this._previousPushAmount.y };
                    const s = Mb(e),
                        r = this._viewportRect,
                        i = Math.max(t.x + s.width - r.width, 0),
                        o = Math.max(t.y + s.height - r.height, 0),
                        a = Math.max(r.top - n.top - t.y, 0),
                        l = Math.max(r.left - n.left - t.x, 0);
                    let c = 0,
                        u = 0;
                    return (
                        (c = s.width <= r.width ? l || -i : t.x < this._viewportMargin ? r.left - n.left - t.x : 0),
                        (u = s.height <= r.height ? a || -o : t.y < this._viewportMargin ? r.top - n.top - t.y : 0),
                        (this._previousPushAmount = { x: c, y: u }),
                        { x: t.x + c, y: t.y + u }
                    );
                }
                _applyPosition(t, e) {
                    if (
                        (this._setTransformOrigin(t),
                        this._setOverlayElementStyles(e, t),
                        this._setBoundingBoxStyles(e, t),
                        t.panelClass && this._addPanelClasses(t.panelClass),
                        (this._lastPosition = t),
                        this._positionChanges.observers.length)
                    ) {
                        const e = this._getScrollVisibility(),
                            n = new Eb(t, e);
                        this._positionChanges.next(n);
                    }
                    this._isInitialRender = !1;
                }
                _setTransformOrigin(t) {
                    if (!this._transformOriginSelector) return;
                    const e = this._boundingBox.querySelectorAll(this._transformOriginSelector);
                    let n,
                        s = t.overlayY;
                    n =
                        'center' === t.overlayX
                            ? 'center'
                            : this._isRtl()
                            ? 'start' === t.overlayX
                                ? 'right'
                                : 'left'
                            : 'start' === t.overlayX
                            ? 'left'
                            : 'right';
                    for (let r = 0; r < e.length; r++) e[r].style.transformOrigin = `${n} ${s}`;
                }
                _calculateBoundingBoxRect(t, e) {
                    const n = this._viewportRect,
                        s = this._isRtl();
                    let r, i, o, a, l, c;
                    if ('top' === e.overlayY) (i = t.y), (r = n.height - i + this._viewportMargin);
                    else if ('bottom' === e.overlayY)
                        (o = n.height - t.y + 2 * this._viewportMargin), (r = n.height - o + this._viewportMargin);
                    else {
                        const e = Math.min(n.bottom - t.y + n.top, t.y),
                            s = this._lastBoundingBoxSize.height;
                        (r = 2 * e), (i = t.y - e), r > s && !this._isInitialRender && !this._growAfterOpen && (i = t.y - s / 2);
                    }
                    if (('end' === e.overlayX && !s) || ('start' === e.overlayX && s))
                        (c = n.width - t.x + this._viewportMargin), (a = t.x - this._viewportMargin);
                    else if (('start' === e.overlayX && !s) || ('end' === e.overlayX && s)) (l = t.x), (a = n.right - t.x);
                    else {
                        const e = Math.min(n.right - t.x + n.left, t.x),
                            s = this._lastBoundingBoxSize.width;
                        (a = 2 * e), (l = t.x - e), a > s && !this._isInitialRender && !this._growAfterOpen && (l = t.x - s / 2);
                    }
                    return { top: i, left: l, bottom: o, right: c, width: a, height: r };
                }
                _setBoundingBoxStyles(t, e) {
                    const n = this._calculateBoundingBoxRect(t, e);
                    this._isInitialRender ||
                        this._growAfterOpen ||
                        ((n.height = Math.min(n.height, this._lastBoundingBoxSize.height)),
                        (n.width = Math.min(n.width, this._lastBoundingBoxSize.width)));
                    const s = {};
                    if (this._hasExactPosition())
                        (s.top = s.left = '0'), (s.bottom = s.right = s.maxHeight = s.maxWidth = ''), (s.width = s.height = '100%');
                    else {
                        const t = this._overlayRef.getConfig().maxHeight,
                            r = this._overlayRef.getConfig().maxWidth;
                        (s.height = E_(n.height)),
                            (s.top = E_(n.top)),
                            (s.bottom = E_(n.bottom)),
                            (s.width = E_(n.width)),
                            (s.left = E_(n.left)),
                            (s.right = E_(n.right)),
                            (s.alignItems = 'center' === e.overlayX ? 'center' : 'end' === e.overlayX ? 'flex-end' : 'flex-start'),
                            (s.justifyContent = 'center' === e.overlayY ? 'center' : 'bottom' === e.overlayY ? 'flex-end' : 'flex-start'),
                            t && (s.maxHeight = E_(t)),
                            r && (s.maxWidth = E_(r));
                    }
                    (this._lastBoundingBoxSize = n), Nb(this._boundingBox.style, s);
                }
                _resetBoundingBoxStyles() {
                    Nb(this._boundingBox.style, {
                        top: '0',
                        left: '0',
                        right: '0',
                        bottom: '0',
                        height: '',
                        width: '',
                        alignItems: '',
                        justifyContent: '',
                    });
                }
                _resetOverlayElementStyles() {
                    Nb(this._pane.style, { top: '', left: '', bottom: '', right: '', position: '', transform: '' });
                }
                _setOverlayElementStyles(t, e) {
                    const n = {},
                        s = this._hasExactPosition(),
                        r = this._hasFlexibleDimensions,
                        i = this._overlayRef.getConfig();
                    if (s) {
                        const s = this._viewportRuler.getViewportScrollPosition();
                        Nb(n, this._getExactOverlayY(e, t, s)), Nb(n, this._getExactOverlayX(e, t, s));
                    } else n.position = 'static';
                    let o = '',
                        a = this._getOffset(e, 'x'),
                        l = this._getOffset(e, 'y');
                    a && (o += `translateX(${a}px) `),
                        l && (o += `translateY(${l}px)`),
                        (n.transform = o.trim()),
                        i.maxHeight && (s ? (n.maxHeight = E_(i.maxHeight)) : r && (n.maxHeight = '')),
                        i.maxWidth && (s ? (n.maxWidth = E_(i.maxWidth)) : r && (n.maxWidth = '')),
                        Nb(this._pane.style, n);
                }
                _getExactOverlayY(t, e, n) {
                    let s = { top: '', bottom: '' },
                        r = this._getOverlayPoint(e, this._overlayRect, t);
                    this._isPushed && (r = this._pushOverlayOnScreen(r, this._overlayRect, n));
                    let i = this._overlayContainer.getContainerElement().getBoundingClientRect().top;
                    return (
                        (r.y -= i),
                        'bottom' === t.overlayY
                            ? (s.bottom = this._document.documentElement.clientHeight - (r.y + this._overlayRect.height) + 'px')
                            : (s.top = E_(r.y)),
                        s
                    );
                }
                _getExactOverlayX(t, e, n) {
                    let s,
                        r = { left: '', right: '' },
                        i = this._getOverlayPoint(e, this._overlayRect, t);
                    return (
                        this._isPushed && (i = this._pushOverlayOnScreen(i, this._overlayRect, n)),
                        (s = this._isRtl() ? ('end' === t.overlayX ? 'left' : 'right') : 'end' === t.overlayX ? 'right' : 'left'),
                        'right' === s
                            ? (r.right = this._document.documentElement.clientWidth - (i.x + this._overlayRect.width) + 'px')
                            : (r.left = E_(i.x)),
                        r
                    );
                }
                _getScrollVisibility() {
                    const t = this._getOriginRect(),
                        e = this._pane.getBoundingClientRect(),
                        n = this._scrollables.map((t) => t.getElementRef().nativeElement.getBoundingClientRect());
                    return {
                        isOriginClipped: vb(t, n),
                        isOriginOutsideView: _b(t, n),
                        isOverlayClipped: vb(e, n),
                        isOverlayOutsideView: _b(e, n),
                    };
                }
                _subtractOverflows(t, ...e) {
                    return e.reduce((t, e) => t - Math.max(e, 0), t);
                }
                _getNarrowedViewportRect() {
                    const t = this._document.documentElement.clientWidth,
                        e = this._document.documentElement.clientHeight,
                        n = this._viewportRuler.getViewportScrollPosition();
                    return {
                        top: n.top + this._viewportMargin,
                        left: n.left + this._viewportMargin,
                        right: n.left + t - this._viewportMargin,
                        bottom: n.top + e - this._viewportMargin,
                        width: t - 2 * this._viewportMargin,
                        height: e - 2 * this._viewportMargin,
                    };
                }
                _isRtl() {
                    return 'rtl' === this._overlayRef.getDirection();
                }
                _hasExactPosition() {
                    return !this._hasFlexibleDimensions || this._isPushed;
                }
                _getOffset(t, e) {
                    return 'x' === e ? (null == t.offsetX ? this._offsetX : t.offsetX) : null == t.offsetY ? this._offsetY : t.offsetY;
                }
                _validatePositions() {}
                _addPanelClasses(t) {
                    this._pane &&
                        S_(t).forEach((t) => {
                            '' !== t &&
                                -1 === this._appliedPanelClasses.indexOf(t) &&
                                (this._appliedPanelClasses.push(t), this._pane.classList.add(t));
                        });
                }
                _clearPanelClasses() {
                    this._pane &&
                        (this._appliedPanelClasses.forEach((t) => {
                            this._pane.classList.remove(t);
                        }),
                        (this._appliedPanelClasses = []));
                }
                _getOriginRect() {
                    const t = this._origin;
                    if (t instanceof oa) return t.nativeElement.getBoundingClientRect();
                    if (t instanceof Element) return t.getBoundingClientRect();
                    const e = t.width || 0,
                        n = t.height || 0;
                    return { top: t.y, bottom: t.y + n, left: t.x, right: t.x + e, height: n, width: e };
                }
            }
            function Nb(t, e) {
                for (let n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
                return t;
            }
            function Fb(t) {
                if ('number' != typeof t && null != t) {
                    const [e, n] = t.split(Lb);
                    return n && 'px' !== n ? null : parseFloat(e);
                }
                return t || null;
            }
            function Mb(t) {
                return {
                    top: Math.floor(t.top),
                    right: Math.floor(t.right),
                    bottom: Math.floor(t.bottom),
                    left: Math.floor(t.left),
                    width: Math.floor(t.width),
                    height: Math.floor(t.height),
                };
            }
            class jb {
                constructor(t, e, n, s, r, i, o) {
                    (this._preferredPositions = []),
                        (this._positionStrategy = new Db(n, s, r, i, o).withFlexibleDimensions(!1).withPush(!1).withViewportMargin(0)),
                        this.withFallbackPosition(t, e),
                        (this.onPositionChange = this._positionStrategy.positionChanges);
                }
                get positions() {
                    return this._preferredPositions;
                }
                attach(t) {
                    (this._overlayRef = t),
                        this._positionStrategy.attach(t),
                        this._direction && (t.setDirection(this._direction), (this._direction = null));
                }
                dispose() {
                    this._positionStrategy.dispose();
                }
                detach() {
                    this._positionStrategy.detach();
                }
                apply() {
                    this._positionStrategy.apply();
                }
                recalculateLastPosition() {
                    this._positionStrategy.reapplyLastPosition();
                }
                withScrollableContainers(t) {
                    this._positionStrategy.withScrollableContainers(t);
                }
                withFallbackPosition(t, e, n, s) {
                    const r = new Sb(t, e, n, s);
                    return this._preferredPositions.push(r), this._positionStrategy.withPositions(this._preferredPositions), this;
                }
                withDirection(t) {
                    return this._overlayRef ? this._overlayRef.setDirection(t) : (this._direction = t), this;
                }
                withOffsetX(t) {
                    return this._positionStrategy.withDefaultOffsetX(t), this;
                }
                withOffsetY(t) {
                    return this._positionStrategy.withDefaultOffsetY(t), this;
                }
                withLockedPosition(t) {
                    return this._positionStrategy.withLockedPosition(t), this;
                }
                withPositions(t) {
                    return (this._preferredPositions = t.slice()), this._positionStrategy.withPositions(this._preferredPositions), this;
                }
                setOrigin(t) {
                    return this._positionStrategy.setOrigin(t), this;
                }
            }
            const Hb = 'cdk-global-overlay-wrapper';
            class Bb {
                constructor() {
                    (this._cssPosition = 'static'),
                        (this._topOffset = ''),
                        (this._bottomOffset = ''),
                        (this._leftOffset = ''),
                        (this._rightOffset = ''),
                        (this._alignItems = ''),
                        (this._justifyContent = ''),
                        (this._width = ''),
                        (this._height = '');
                }
                attach(t) {
                    const e = t.getConfig();
                    (this._overlayRef = t),
                        this._width && !e.width && t.updateSize({ width: this._width }),
                        this._height && !e.height && t.updateSize({ height: this._height }),
                        t.hostElement.classList.add(Hb),
                        (this._isDisposed = !1);
                }
                top(t = '') {
                    return (this._bottomOffset = ''), (this._topOffset = t), (this._alignItems = 'flex-start'), this;
                }
                left(t = '') {
                    return (this._rightOffset = ''), (this._leftOffset = t), (this._justifyContent = 'flex-start'), this;
                }
                bottom(t = '') {
                    return (this._topOffset = ''), (this._bottomOffset = t), (this._alignItems = 'flex-end'), this;
                }
                right(t = '') {
                    return (this._leftOffset = ''), (this._rightOffset = t), (this._justifyContent = 'flex-end'), this;
                }
                width(t = '') {
                    return this._overlayRef ? this._overlayRef.updateSize({ width: t }) : (this._width = t), this;
                }
                height(t = '') {
                    return this._overlayRef ? this._overlayRef.updateSize({ height: t }) : (this._height = t), this;
                }
                centerHorizontally(t = '') {
                    return this.left(t), (this._justifyContent = 'center'), this;
                }
                centerVertically(t = '') {
                    return this.top(t), (this._alignItems = 'center'), this;
                }
                apply() {
                    if (!this._overlayRef || !this._overlayRef.hasAttached()) return;
                    const t = this._overlayRef.overlayElement.style,
                        e = this._overlayRef.hostElement.style,
                        n = this._overlayRef.getConfig(),
                        { width: s, height: r, maxWidth: i, maxHeight: o } = n,
                        a = !(('100%' !== s && '100vw' !== s) || (i && '100%' !== i && '100vw' !== i)),
                        l = !(('100%' !== r && '100vh' !== r) || (o && '100%' !== o && '100vh' !== o));
                    (t.position = this._cssPosition),
                        (t.marginLeft = a ? '0' : this._leftOffset),
                        (t.marginTop = l ? '0' : this._topOffset),
                        (t.marginBottom = this._bottomOffset),
                        (t.marginRight = this._rightOffset),
                        a
                            ? (e.justifyContent = 'flex-start')
                            : 'center' === this._justifyContent
                            ? (e.justifyContent = 'center')
                            : 'rtl' === this._overlayRef.getConfig().direction
                            ? 'flex-start' === this._justifyContent
                                ? (e.justifyContent = 'flex-end')
                                : 'flex-end' === this._justifyContent && (e.justifyContent = 'flex-start')
                            : (e.justifyContent = this._justifyContent),
                        (e.alignItems = l ? 'flex-start' : this._alignItems);
                }
                dispose() {
                    if (this._isDisposed || !this._overlayRef) return;
                    const t = this._overlayRef.overlayElement.style,
                        e = this._overlayRef.hostElement,
                        n = e.style;
                    e.classList.remove(Hb),
                        (n.justifyContent = n.alignItems = t.marginTop = t.marginBottom = t.marginLeft = t.marginRight = t.position = ''),
                        (this._overlayRef = null),
                        (this._isDisposed = !0);
                }
            }
            let Vb = (() => {
                    class t {
                        constructor(t, e, n, s) {
                            (this._viewportRuler = t), (this._document = e), (this._platform = n), (this._overlayContainer = s);
                        }
                        global() {
                            return new Bb();
                        }
                        connectedTo(t, e, n) {
                            return new jb(e, n, t, this._viewportRuler, this._document, this._platform, this._overlayContainer);
                        }
                        flexibleConnectedTo(t) {
                            return new Db(t, this._viewportRuler, this._document, this._platform, this._overlayContainer);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(sb), as(Cc), as(O_), as(Ob));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(sb), as(Cc), as(O_), as(Ob));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                Ub = 0,
                $b = (() => {
                    class t {
                        constructor(t, e, n, s, r, i, o, a, l, c, u) {
                            (this.scrollStrategies = t),
                                (this._overlayContainer = e),
                                (this._componentFactoryResolver = n),
                                (this._positionBuilder = s),
                                (this._keyboardDispatcher = r),
                                (this._injector = i),
                                (this._ngZone = o),
                                (this._document = a),
                                (this._directionality = l),
                                (this._location = c),
                                (this._outsideClickDispatcher = u);
                        }
                        create(t) {
                            const e = this._createHostElement(),
                                n = this._createPaneElement(e),
                                s = this._createPortalOutlet(n),
                                r = new xb(t);
                            return (
                                (r.direction = r.direction || this._directionality.value),
                                new Ib(
                                    s,
                                    e,
                                    n,
                                    r,
                                    this._ngZone,
                                    this._keyboardDispatcher,
                                    this._document,
                                    this._location,
                                    this._outsideClickDispatcher
                                )
                            );
                        }
                        position() {
                            return this._positionBuilder;
                        }
                        _createPaneElement(t) {
                            const e = this._document.createElement('div');
                            return (e.id = 'cdk-overlay-' + Ub++), e.classList.add('cdk-overlay-pane'), t.appendChild(e), e;
                        }
                        _createHostElement() {
                            const t = this._document.createElement('div');
                            return this._overlayContainer.getContainerElement().appendChild(t), t;
                        }
                        _createPortalOutlet(t) {
                            return (
                                this._appRef || (this._appRef = this._injector.get(pc)),
                                new hb(t, this._componentFactoryResolver, this._appRef, this._injector, this._document)
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(wb), as(Ob), as(na), as(Vb), as(kb), as(Ji), as(Wl), as(Cc), as(iv), as(Bc), as(Tb));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })();
            const zb = {
                provide: new $n('cdk-connected-overlay-scroll-strategy'),
                deps: [$b],
                useFactory: function (t) {
                    return () => t.scrollStrategies.reposition();
                },
            };
            let qb = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [$b, zb], imports: [[ov, pb, ib], ib] })),
                        t
                    );
                })(),
                Wb = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Yc, uv, j_], uv] })),
                        t
                    );
                })();
            const Qb = {
                provide: new $n('mat-autocomplete-scroll-strategy'),
                deps: [$b],
                useFactory: function (t) {
                    return () => t.scrollStrategies.reposition();
                },
            };
            let Kb = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [Qb], imports: [[qb, Hv, uv, Yc], rb, Hv, uv] })),
                        t
                    );
                })(),
                Zb = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[sv, uv], uv] })),
                        t
                    );
                })();
            const Yb = ['mat-button', ''],
                Gb = ['*'],
                Xb =
                    '.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\n',
                Jb = [
                    'mat-button',
                    'mat-flat-button',
                    'mat-icon-button',
                    'mat-raised-button',
                    'mat-stroked-button',
                    'mat-mini-fab',
                    'mat-fab',
                ],
                tw = dv(
                    hv(
                        pv(
                            class {
                                constructor(t) {
                                    this._elementRef = t;
                                }
                            }
                        )
                    )
                );
            let ew = (() => {
                    class t extends tw {
                        constructor(t, e, n) {
                            super(t),
                                (this._focusMonitor = e),
                                (this._animationMode = n),
                                (this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab')),
                                (this.isIconButton = this._hasHostAttributes('mat-icon-button'));
                            for (const s of Jb) this._hasHostAttributes(s) && this._getHostElement().classList.add(s);
                            t.nativeElement.classList.add('mat-button-base'), this.isRoundButton && (this.color = 'accent');
                        }
                        ngAfterViewInit() {
                            this._focusMonitor.monitor(this._elementRef, !0);
                        }
                        ngOnDestroy() {
                            this._focusMonitor.stopMonitoring(this._elementRef);
                        }
                        focus(t, e) {
                            t ? this._focusMonitor.focusVia(this._getHostElement(), t, e) : this._getHostElement().focus(e);
                        }
                        _getHostElement() {
                            return this._elementRef.nativeElement;
                        }
                        _isRippleDisabled() {
                            return this.disableRipple || this.disabled;
                        }
                        _hasHostAttributes(...t) {
                            return t.some((t) => this._getHostElement().hasAttribute(t));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(X_), fo(e_, 8));
                        }),
                        (t.ɵcmp = Ut({
                            type: t,
                            selectors: [
                                ['button', 'mat-button', ''],
                                ['button', 'mat-raised-button', ''],
                                ['button', 'mat-icon-button', ''],
                                ['button', 'mat-fab', ''],
                                ['button', 'mat-mini-fab', ''],
                                ['button', 'mat-stroked-button', ''],
                                ['button', 'mat-flat-button', ''],
                            ],
                            viewQuery: function (t, e) {
                                if ((1 & t && vl(Fv, 5), 2 & t)) {
                                    let t;
                                    _l((t = wl())) && (e.ripple = t.first);
                                }
                            },
                            hostAttrs: [1, 'mat-focus-indicator'],
                            hostVars: 5,
                            hostBindings: function (t, e) {
                                2 & t &&
                                    (ho('disabled', e.disabled || null),
                                    Do('_mat-animation-noopable', 'NoopAnimations' === e._animationMode)(
                                        'mat-button-disabled',
                                        e.disabled
                                    ));
                            },
                            inputs: { disabled: 'disabled', disableRipple: 'disableRipple', color: 'color' },
                            exportAs: ['matButton'],
                            features: [eo],
                            attrs: Yb,
                            ngContentSelectors: Gb,
                            decls: 7,
                            vars: 5,
                            consts: [
                                [1, 'mat-button-wrapper'],
                                ['matRipple', '', 1, 'mat-button-ripple', 3, 'matRippleDisabled', 'matRippleCentered', 'matRippleTrigger'],
                                [1, 'mat-button-focus-overlay'],
                            ],
                            template: function (t, e) {
                                1 & t &&
                                    (Ro(),
                                    yo(0, 'span', 0),
                                    Oo(1),
                                    _o(),
                                    Bo(2, '\n'),
                                    vo(3, 'span', 1),
                                    Bo(4, '\n'),
                                    vo(5, 'span', 2),
                                    Bo(6, '\n')),
                                    2 & t &&
                                        ($r(3),
                                        Do('mat-button-ripple-round', e.isRoundButton || e.isIconButton),
                                        mo('matRippleDisabled', e._isRippleDisabled())('matRippleCentered', e.isIconButton)(
                                            'matRippleTrigger',
                                            e._getHostElement()
                                        ));
                            },
                            directives: [Fv],
                            styles: [Xb],
                            encapsulation: 2,
                            changeDetection: 0,
                        })),
                        t
                    );
                })(),
                nw = (() => {
                    class t extends ew {
                        constructor(t, e, n) {
                            super(e, t, n);
                        }
                        _haltDisabledEvents(t) {
                            this.disabled && (t.preventDefault(), t.stopImmediatePropagation());
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(X_), fo(oa), fo(e_, 8));
                        }),
                        (t.ɵcmp = Ut({
                            type: t,
                            selectors: [
                                ['a', 'mat-button', ''],
                                ['a', 'mat-raised-button', ''],
                                ['a', 'mat-icon-button', ''],
                                ['a', 'mat-fab', ''],
                                ['a', 'mat-mini-fab', ''],
                                ['a', 'mat-stroked-button', ''],
                                ['a', 'mat-flat-button', ''],
                            ],
                            hostAttrs: [1, 'mat-focus-indicator'],
                            hostVars: 7,
                            hostBindings: function (t, e) {
                                1 & t &&
                                    xo('click', function (t) {
                                        return e._haltDisabledEvents(t);
                                    }),
                                    2 & t &&
                                        (ho('tabindex', e.disabled ? -1 : e.tabIndex || 0)('disabled', e.disabled || null)(
                                            'aria-disabled',
                                            e.disabled.toString()
                                        ),
                                        Do('_mat-animation-noopable', 'NoopAnimations' === e._animationMode)(
                                            'mat-button-disabled',
                                            e.disabled
                                        ));
                            },
                            inputs: { disabled: 'disabled', disableRipple: 'disableRipple', color: 'color', tabIndex: 'tabIndex' },
                            exportAs: ['matButton', 'matAnchor'],
                            features: [eo],
                            attrs: Yb,
                            ngContentSelectors: Gb,
                            decls: 7,
                            vars: 5,
                            consts: [
                                [1, 'mat-button-wrapper'],
                                ['matRipple', '', 1, 'mat-button-ripple', 3, 'matRippleDisabled', 'matRippleCentered', 'matRippleTrigger'],
                                [1, 'mat-button-focus-overlay'],
                            ],
                            template: function (t, e) {
                                1 & t &&
                                    (Ro(),
                                    yo(0, 'span', 0),
                                    Oo(1),
                                    _o(),
                                    Bo(2, '\n'),
                                    vo(3, 'span', 1),
                                    Bo(4, '\n'),
                                    vo(5, 'span', 2),
                                    Bo(6, '\n')),
                                    2 & t &&
                                        ($r(3),
                                        Do('mat-button-ripple-round', e.isRoundButton || e.isIconButton),
                                        mo('matRippleDisabled', e._isRippleDisabled())('matRippleCentered', e.isIconButton)(
                                            'matRippleTrigger',
                                            e._getHostElement()
                                        ));
                            },
                            directives: [Fv],
                            styles: [Xb],
                            encapsulation: 2,
                            changeDetection: 0,
                        })),
                        t
                    );
                })(),
                sw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Mv, uv], uv] })),
                        t
                    );
                })(),
                rw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv, Mv], uv] })),
                        t
                    );
                })(),
                iw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv], uv] })),
                        t
                    );
                })(),
                ow = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })(),
                aw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Mv, uv, j_, ow], uv, ow] })),
                        t
                    );
                })();
            const lw = new $n('mat-chips-default-options'),
                cw = { separatorKeyCodes: [13] };
            let uw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [Tv, { provide: lw, useValue: cw }], imports: [[uv]] })),
                        t
                    );
                })(),
                hw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[I_]] })),
                        t
                    );
                })(),
                dw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [Tv], imports: [[hw, Wb, uv], hw, Wb] })),
                        t
                    );
                })(),
                pw = (() => {
                    class t {
                        constructor() {
                            (this.changes = new S()),
                                (this.calendarLabel = 'Calendar'),
                                (this.openCalendarLabel = 'Open calendar'),
                                (this.closeCalendarLabel = 'Close calendar'),
                                (this.prevMonthLabel = 'Previous month'),
                                (this.nextMonthLabel = 'Next month'),
                                (this.prevYearLabel = 'Previous year'),
                                (this.nextYearLabel = 'Next year'),
                                (this.prevMultiYearLabel = 'Previous 24 years'),
                                (this.nextMultiYearLabel = 'Next 24 years'),
                                (this.switchToMonthViewLabel = 'Choose date'),
                                (this.switchToMultiYearViewLabel = 'Choose month and year');
                        }
                        formatYearRange(t, e) {
                            return `${t} \u2013 ${e}`;
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t();
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            const fw = {
                provide: new $n('mat-datepicker-scroll-strategy'),
                deps: [$b],
                useFactory: function (t) {
                    return () => t.scrollStrategies.reposition();
                },
            };
            let mw = (() => {
                class t {}
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵmod = Wt({ type: t })),
                    (t.ɵinj = dt({ providers: [pw, fw], imports: [[Yc, sw, qb, sv, pb, uv], rb] })),
                    t
                );
            })();
            function gw(t, e) {}
            class yw {
                constructor() {
                    (this.role = 'dialog'),
                        (this.panelClass = ''),
                        (this.hasBackdrop = !0),
                        (this.backdropClass = ''),
                        (this.disableClose = !1),
                        (this.width = ''),
                        (this.height = ''),
                        (this.maxWidth = '80vw'),
                        (this.data = null),
                        (this.ariaDescribedBy = null),
                        (this.ariaLabelledBy = null),
                        (this.ariaLabel = null),
                        (this.autoFocus = !0),
                        (this.restoreFocus = !0),
                        (this.closeOnNavigation = !0);
                }
            }
            const _w = {
                dialogContainer: wm('dialogContainer', [
                    Cm('void, exit', Em({ opacity: 0, transform: 'scale(0.7)' })),
                    Cm('enter', Em({ transform: 'none' })),
                    km('* => enter', xm('150ms cubic-bezier(0, 0, 0.2, 1)', Em({ transform: 'none', opacity: 1 }))),
                    km('* => void, * => exit', xm('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', Em({ opacity: 0 }))),
                ]),
            };
            let vw = (() => {
                    class t extends ub {
                        constructor(t, e, n, s, r, i) {
                            super(),
                                (this._elementRef = t),
                                (this._focusTrapFactory = e),
                                (this._changeDetectorRef = n),
                                (this._config = r),
                                (this._focusMonitor = i),
                                (this._animationStateChanged = new ol()),
                                (this._elementFocusedBeforeDialogWasOpened = null),
                                (this._closeInteractionType = null),
                                (this.attachDomPortal = (t) => (this._portalOutlet.hasAttached(), this._portalOutlet.attachDomPortal(t))),
                                (this._ariaLabelledBy = r.ariaLabelledBy || null),
                                (this._document = s);
                        }
                        _initializeWithAttachedContent() {
                            this._setupFocusTrap(), this._capturePreviouslyFocusedElement(), this._focusDialogContainer();
                        }
                        attachComponentPortal(t) {
                            return this._portalOutlet.hasAttached(), this._portalOutlet.attachComponentPortal(t);
                        }
                        attachTemplatePortal(t) {
                            return this._portalOutlet.hasAttached(), this._portalOutlet.attachTemplatePortal(t);
                        }
                        _recaptureFocus() {
                            this._containsFocus() ||
                                ((!this._config.autoFocus || !this._focusTrap.focusInitialElement()) &&
                                    this._elementRef.nativeElement.focus());
                        }
                        _trapFocus() {
                            this._config.autoFocus
                                ? this._focusTrap.focusInitialElementWhenReady()
                                : this._containsFocus() || this._elementRef.nativeElement.focus();
                        }
                        _restoreFocus() {
                            const t = this._elementFocusedBeforeDialogWasOpened;
                            if (this._config.restoreFocus && t && 'function' == typeof t.focus) {
                                const e = N_(),
                                    n = this._elementRef.nativeElement;
                                (e && e !== this._document.body && e !== n && !n.contains(e)) ||
                                    (this._focusMonitor
                                        ? (this._focusMonitor.focusVia(t, this._closeInteractionType), (this._closeInteractionType = null))
                                        : t.focus());
                            }
                            this._focusTrap && this._focusTrap.destroy();
                        }
                        _setupFocusTrap() {
                            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
                        }
                        _capturePreviouslyFocusedElement() {
                            this._document && (this._elementFocusedBeforeDialogWasOpened = N_());
                        }
                        _focusDialogContainer() {
                            this._elementRef.nativeElement.focus && this._elementRef.nativeElement.focus();
                        }
                        _containsFocus() {
                            const t = this._elementRef.nativeElement,
                                e = N_();
                            return t === e || t.contains(e);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo($_), fo(Pa), fo(Cc, 8), fo(yw), fo(X_));
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            viewQuery: function (t, e) {
                                if ((1 & t && vl(db, 7), 2 & t)) {
                                    let t;
                                    _l((t = wl())) && (e._portalOutlet = t.first);
                                }
                            },
                            features: [eo],
                        })),
                        t
                    );
                })(),
                bw = (() => {
                    class t extends vw {
                        constructor() {
                            super(...arguments), (this._state = 'enter');
                        }
                        _onAnimationDone({ toState: t, totalTime: e }) {
                            'enter' === t
                                ? (this._trapFocus(), this._animationStateChanged.next({ state: 'opened', totalTime: e }))
                                : 'exit' === t &&
                                  (this._restoreFocus(), this._animationStateChanged.next({ state: 'closed', totalTime: e }));
                        }
                        _onAnimationStart({ toState: t, totalTime: e }) {
                            'enter' === t
                                ? this._animationStateChanged.next({ state: 'opening', totalTime: e })
                                : ('exit' !== t && 'void' !== t) || this._animationStateChanged.next({ state: 'closing', totalTime: e });
                        }
                        _startExitAnimation() {
                            (this._state = 'exit'), this._changeDetectorRef.markForCheck();
                        }
                    }
                    return (
                        (t.ɵfac = (function () {
                            let e;
                            return function (n) {
                                return (e || (e = jn(t)))(n || t);
                            };
                        })()),
                        (t.ɵcmp = Ut({
                            type: t,
                            selectors: [['mat-dialog-container']],
                            hostAttrs: ['tabindex', '-1', 'aria-modal', 'true', 1, 'mat-dialog-container'],
                            hostVars: 6,
                            hostBindings: function (t, e) {
                                1 & t &&
                                    So('@dialogContainer.start', function (t) {
                                        return e._onAnimationStart(t);
                                    })('@dialogContainer.done', function (t) {
                                        return e._onAnimationDone(t);
                                    }),
                                    2 & t &&
                                        (zo('id', e._id),
                                        ho('role', e._config.role)('aria-labelledby', e._config.ariaLabel ? null : e._ariaLabelledBy)(
                                            'aria-label',
                                            e._config.ariaLabel
                                        )('aria-describedby', e._config.ariaDescribedBy || null),
                                        qo('@dialogContainer', e._state));
                            },
                            features: [eo],
                            decls: 2,
                            vars: 0,
                            consts: [['cdkPortalOutlet', '']],
                            template: function (t, e) {
                                1 & t && (po(0, gw, 0, 0, 'ng-template', 0), Bo(1, '\n'));
                            },
                            directives: [db],
                            styles: [
                                '.mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\n',
                            ],
                            encapsulation: 2,
                            data: { animation: [_w.dialogContainer] },
                        })),
                        t
                    );
                })(),
                ww = 0;
            class xw {
                constructor(t, e, n = 'mat-dialog-' + ww++) {
                    (this._overlayRef = t),
                        (this._containerInstance = e),
                        (this.id = n),
                        (this.disableClose = this._containerInstance._config.disableClose),
                        (this._afterOpened = new S()),
                        (this._afterClosed = new S()),
                        (this._beforeClosed = new S()),
                        (this._state = 0),
                        (e._id = n),
                        e._animationStateChanged
                            .pipe(
                                dh((t) => 'opened' === t.state),
                                ih(1)
                            )
                            .subscribe(() => {
                                this._afterOpened.next(), this._afterOpened.complete();
                            }),
                        e._animationStateChanged
                            .pipe(
                                dh((t) => 'closed' === t.state),
                                ih(1)
                            )
                            .subscribe(() => {
                                clearTimeout(this._closeFallbackTimeout), this._finishDialogClose();
                            }),
                        t.detachments().subscribe(() => {
                            this._beforeClosed.next(this._result),
                                this._beforeClosed.complete(),
                                this._afterClosed.next(this._result),
                                this._afterClosed.complete(),
                                (this.componentInstance = null),
                                this._overlayRef.dispose();
                        }),
                        t
                            .keydownEvents()
                            .pipe(
                                dh(
                                    (t) =>
                                        27 === t.keyCode &&
                                        !this.disableClose &&
                                        !(function (t, ...e) {
                                            return e.length ? e.some((e) => t[e]) : t.altKey || t.shiftKey || t.ctrlKey || t.metaKey;
                                        })(t)
                                )
                            )
                            .subscribe((t) => {
                                t.preventDefault(), Sw(this, 'keyboard');
                            }),
                        t.backdropClick().subscribe(() => {
                            this.disableClose ? this._containerInstance._recaptureFocus() : Sw(this, 'mouse');
                        });
                }
                close(t) {
                    (this._result = t),
                        this._containerInstance._animationStateChanged
                            .pipe(
                                dh((t) => 'closing' === t.state),
                                ih(1)
                            )
                            .subscribe((e) => {
                                this._beforeClosed.next(t),
                                    this._beforeClosed.complete(),
                                    this._overlayRef.detachBackdrop(),
                                    (this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), e.totalTime + 100));
                            }),
                        (this._state = 1),
                        this._containerInstance._startExitAnimation();
                }
                afterOpened() {
                    return this._afterOpened;
                }
                afterClosed() {
                    return this._afterClosed;
                }
                beforeClosed() {
                    return this._beforeClosed;
                }
                backdropClick() {
                    return this._overlayRef.backdropClick();
                }
                keydownEvents() {
                    return this._overlayRef.keydownEvents();
                }
                updatePosition(t) {
                    let e = this._getPositionStrategy();
                    return (
                        t && (t.left || t.right) ? (t.left ? e.left(t.left) : e.right(t.right)) : e.centerHorizontally(),
                        t && (t.top || t.bottom) ? (t.top ? e.top(t.top) : e.bottom(t.bottom)) : e.centerVertically(),
                        this._overlayRef.updatePosition(),
                        this
                    );
                }
                updateSize(t = '', e = '') {
                    return this._overlayRef.updateSize({ width: t, height: e }), this._overlayRef.updatePosition(), this;
                }
                addPanelClass(t) {
                    return this._overlayRef.addPanelClass(t), this;
                }
                removePanelClass(t) {
                    return this._overlayRef.removePanelClass(t), this;
                }
                getState() {
                    return this._state;
                }
                _finishDialogClose() {
                    (this._state = 2), this._overlayRef.dispose();
                }
                _getPositionStrategy() {
                    return this._overlayRef.getConfig().positionStrategy;
                }
            }
            function Sw(t, e, n) {
                return void 0 !== t._containerInstance && (t._containerInstance._closeInteractionType = e), t.close(n);
            }
            const Ew = new $n('MatDialogData'),
                Cw = new $n('mat-dialog-default-options'),
                kw = new $n('mat-dialog-scroll-strategy'),
                Tw = {
                    provide: kw,
                    deps: [$b],
                    useFactory: function (t) {
                        return () => t.scrollStrategies.block();
                    },
                };
            let Aw = (() => {
                    class t {
                        constructor(t, e, n, s, r, i, o, a, l) {
                            (this._overlay = t),
                                (this._injector = e),
                                (this._defaultOptions = n),
                                (this._parentDialog = s),
                                (this._overlayContainer = r),
                                (this._dialogRefConstructor = o),
                                (this._dialogContainerType = a),
                                (this._dialogDataToken = l),
                                (this._openDialogsAtThisLevel = []),
                                (this._afterAllClosedAtThisLevel = new S()),
                                (this._afterOpenedAtThisLevel = new S()),
                                (this._ariaHiddenElements = new Map()),
                                (this.afterAllClosed = th(() =>
                                    this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(lh(void 0))
                                )),
                                (this._scrollStrategy = i);
                        }
                        get openDialogs() {
                            return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
                        }
                        get afterOpened() {
                            return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;
                        }
                        _getAfterAllClosed() {
                            const t = this._parentDialog;
                            return t ? t._getAfterAllClosed() : this._afterAllClosedAtThisLevel;
                        }
                        open(t, e) {
                            (e = (function (t, e) {
                                return Object.assign(Object.assign({}, e), t);
                            })(e, this._defaultOptions || new yw())).id && this.getDialogById(e.id);
                            const n = this._createOverlay(e),
                                s = this._attachDialogContainer(n, e),
                                r = this._attachDialogContent(t, s, n, e);
                            return (
                                this.openDialogs.length || this._hideNonDialogContentFromAssistiveTechnology(),
                                this.openDialogs.push(r),
                                r.afterClosed().subscribe(() => this._removeOpenDialog(r)),
                                this.afterOpened.next(r),
                                s._initializeWithAttachedContent(),
                                r
                            );
                        }
                        closeAll() {
                            this._closeDialogs(this.openDialogs);
                        }
                        getDialogById(t) {
                            return this.openDialogs.find((e) => e.id === t);
                        }
                        ngOnDestroy() {
                            this._closeDialogs(this._openDialogsAtThisLevel),
                                this._afterAllClosedAtThisLevel.complete(),
                                this._afterOpenedAtThisLevel.complete();
                        }
                        _createOverlay(t) {
                            const e = this._getOverlayConfig(t);
                            return this._overlay.create(e);
                        }
                        _getOverlayConfig(t) {
                            const e = new xb({
                                positionStrategy: this._overlay.position().global(),
                                scrollStrategy: t.scrollStrategy || this._scrollStrategy(),
                                panelClass: t.panelClass,
                                hasBackdrop: t.hasBackdrop,
                                direction: t.direction,
                                minWidth: t.minWidth,
                                minHeight: t.minHeight,
                                maxWidth: t.maxWidth,
                                maxHeight: t.maxHeight,
                                disposeOnNavigation: t.closeOnNavigation,
                            });
                            return t.backdropClass && (e.backdropClass = t.backdropClass), e;
                        }
                        _attachDialogContainer(t, e) {
                            const n = Ji.create({
                                    parent: (e && e.viewContainerRef && e.viewContainerRef.injector) || this._injector,
                                    providers: [{ provide: yw, useValue: e }],
                                }),
                                s = new ab(this._dialogContainerType, e.viewContainerRef, n, e.componentFactoryResolver);
                            return t.attach(s).instance;
                        }
                        _attachDialogContent(t, e, n, s) {
                            const r = new this._dialogRefConstructor(n, e, s.id);
                            if (t instanceof Ma) e.attachTemplatePortal(new lb(t, null, { $implicit: s.data, dialogRef: r }));
                            else {
                                const n = this._createInjector(s, r, e),
                                    i = e.attachComponentPortal(new ab(t, s.viewContainerRef, n));
                                r.componentInstance = i.instance;
                            }
                            return r.updateSize(s.width, s.height).updatePosition(s.position), r;
                        }
                        _createInjector(t, e, n) {
                            const s = t && t.viewContainerRef && t.viewContainerRef.injector,
                                r = [
                                    { provide: this._dialogContainerType, useValue: n },
                                    { provide: this._dialogDataToken, useValue: t.data },
                                    { provide: this._dialogRefConstructor, useValue: e },
                                ];
                            return (
                                !t.direction ||
                                    (s && s.get(iv, null, bt.Optional)) ||
                                    r.push({ provide: iv, useValue: { value: t.direction, change: Uu() } }),
                                Ji.create({ parent: s || this._injector, providers: r })
                            );
                        }
                        _removeOpenDialog(t) {
                            const e = this.openDialogs.indexOf(t);
                            e > -1 &&
                                (this.openDialogs.splice(e, 1),
                                this.openDialogs.length ||
                                    (this._ariaHiddenElements.forEach((t, e) => {
                                        t ? e.setAttribute('aria-hidden', t) : e.removeAttribute('aria-hidden');
                                    }),
                                    this._ariaHiddenElements.clear(),
                                    this._getAfterAllClosed().next()));
                        }
                        _hideNonDialogContentFromAssistiveTechnology() {
                            const t = this._overlayContainer.getContainerElement();
                            if (t.parentElement) {
                                const e = t.parentElement.children;
                                for (let n = e.length - 1; n > -1; n--) {
                                    let s = e[n];
                                    s === t ||
                                        'SCRIPT' === s.nodeName ||
                                        'STYLE' === s.nodeName ||
                                        s.hasAttribute('aria-live') ||
                                        (this._ariaHiddenElements.set(s, s.getAttribute('aria-hidden')),
                                        s.setAttribute('aria-hidden', 'true'));
                                }
                            }
                        }
                        _closeDialogs(t) {
                            let e = t.length;
                            for (; e--; ) t[e].close();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo($b), fo(Ji), fo(void 0), fo(void 0), fo(Ob), fo(void 0), fo(qn), fo(qn), fo($n));
                        }),
                        (t.ɵdir = Kt({ type: t })),
                        t
                    );
                })(),
                Rw = (() => {
                    class t extends Aw {
                        constructor(t, e, n, s, r, i, o) {
                            super(t, e, s, i, o, r, xw, bw, Ew);
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as($b), as(Ji), as(Bc, 8), as(Cw, 8), as(kw), as(t, 12), as(Ob));
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })(),
                Ow = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [Rw, Tw], imports: [[qb, pb, uv], uv] })),
                        t
                    );
                })(),
                Iw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv], uv] })),
                        t
                    );
                })(),
                Pw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })(),
                Lw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Yc, uv, Pw, pb]] })),
                        t
                    );
                })(),
                Dw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Av, uv], Av, uv] })),
                        t
                    );
                })();
            const Nw = ['*'];
            function Fw(t) {
                return Error(`Unable to find icon with the name "${t}"`);
            }
            function Mw(t) {
                return Error(
                    `The URL provided to MatIconRegistry was not trusted as a resource URL via Angular's DomSanitizer. Attempted URL was "${t}".`
                );
            }
            function jw(t) {
                return Error(
                    `The literal provided to MatIconRegistry was not trusted as safe HTML by Angular's DomSanitizer. Attempted literal was "${t}".`
                );
            }
            class Hw {
                constructor(t, e, n) {
                    (this.url = t), (this.svgText = e), (this.options = n);
                }
            }
            let Bw = (() => {
                class t {
                    constructor(t, e, n, s) {
                        (this._httpClient = t),
                            (this._sanitizer = e),
                            (this._errorHandler = s),
                            (this._svgIconConfigs = new Map()),
                            (this._iconSetConfigs = new Map()),
                            (this._cachedIconsByUrl = new Map()),
                            (this._inProgressUrlFetches = new Map()),
                            (this._fontCssClassesByAlias = new Map()),
                            (this._resolvers = []),
                            (this._defaultFontSetClass = 'material-icons'),
                            (this._document = n);
                    }
                    addSvgIcon(t, e, n) {
                        return this.addSvgIconInNamespace('', t, e, n);
                    }
                    addSvgIconLiteral(t, e, n) {
                        return this.addSvgIconLiteralInNamespace('', t, e, n);
                    }
                    addSvgIconInNamespace(t, e, n, s) {
                        return this._addSvgIconConfig(t, e, new Hw(n, null, s));
                    }
                    addSvgIconResolver(t) {
                        return this._resolvers.push(t), this;
                    }
                    addSvgIconLiteralInNamespace(t, e, n, s) {
                        const r = this._sanitizer.sanitize(Qs.HTML, n);
                        if (!r) throw jw(n);
                        return this._addSvgIconConfig(t, e, new Hw('', r, s));
                    }
                    addSvgIconSet(t, e) {
                        return this.addSvgIconSetInNamespace('', t, e);
                    }
                    addSvgIconSetLiteral(t, e) {
                        return this.addSvgIconSetLiteralInNamespace('', t, e);
                    }
                    addSvgIconSetInNamespace(t, e, n) {
                        return this._addSvgIconSetConfig(t, new Hw(e, null, n));
                    }
                    addSvgIconSetLiteralInNamespace(t, e, n) {
                        const s = this._sanitizer.sanitize(Qs.HTML, e);
                        if (!s) throw jw(e);
                        return this._addSvgIconSetConfig(t, new Hw('', s, n));
                    }
                    registerFontClassAlias(t, e = t) {
                        return this._fontCssClassesByAlias.set(t, e), this;
                    }
                    classNameForFontAlias(t) {
                        return this._fontCssClassesByAlias.get(t) || t;
                    }
                    setDefaultFontSetClass(t) {
                        return (this._defaultFontSetClass = t), this;
                    }
                    getDefaultFontSetClass() {
                        return this._defaultFontSetClass;
                    }
                    getSvgIconFromUrl(t) {
                        const e = this._sanitizer.sanitize(Qs.RESOURCE_URL, t);
                        if (!e) throw Mw(t);
                        const n = this._cachedIconsByUrl.get(e);
                        return n
                            ? Uu(Vw(n))
                            : this._loadSvgIconFromConfig(new Hw(t, null)).pipe(
                                  Ih((t) => this._cachedIconsByUrl.set(e, t)),
                                  k((t) => Vw(t))
                              );
                    }
                    getNamedSvgIcon(t, e = '') {
                        const n = Uw(e, t);
                        let s = this._svgIconConfigs.get(n);
                        if (s) return this._getSvgFromConfig(s);
                        if (((s = this._getIconConfigFromResolvers(e, t)), s))
                            return this._svgIconConfigs.set(n, s), this._getSvgFromConfig(s);
                        const r = this._iconSetConfigs.get(e);
                        return r ? this._getSvgFromIconSetConfigs(t, r) : Jv(Fw(n));
                    }
                    ngOnDestroy() {
                        (this._resolvers = []), this._svgIconConfigs.clear(), this._iconSetConfigs.clear(), this._cachedIconsByUrl.clear();
                    }
                    _getSvgFromConfig(t) {
                        return t.svgText ? Uu(Vw(this._svgElementFromConfig(t))) : this._loadSvgIconFromConfig(t).pipe(k((t) => Vw(t)));
                    }
                    _getSvgFromIconSetConfigs(t, e) {
                        const n = this._extractIconWithNameFromAnySet(t, e);
                        return n
                            ? Uu(n)
                            : (function (...t) {
                                  if (1 === t.length) {
                                      const e = t[0];
                                      if (l(e)) return ju(e, null);
                                      if (c(e) && Object.getPrototypeOf(e) === Object.prototype) {
                                          const t = Object.keys(e);
                                          return ju(
                                              t.map((t) => e[t]),
                                              t
                                          );
                                      }
                                  }
                                  if ('function' == typeof t[t.length - 1]) {
                                      const e = t.pop();
                                      return ju((t = 1 === t.length && l(t[0]) ? t[0] : t), null).pipe(k((t) => e(...t)));
                                  }
                                  return ju(t, null);
                              })(
                                  e
                                      .filter((t) => !t.svgText)
                                      .map((t) =>
                                          this._loadSvgIconSetFromConfig(t).pipe(
                                              mh((e) => {
                                                  const n = this._sanitizer.sanitize(Qs.RESOURCE_URL, t.url);
                                                  return (
                                                      this._errorHandler.handleError(
                                                          new Error(`Loading icon set URL: ${n} failed: ${e.message}`)
                                                      ),
                                                      Uu(null)
                                                  );
                                              })
                                          )
                                      )
                              ).pipe(
                                  k(() => {
                                      const n = this._extractIconWithNameFromAnySet(t, e);
                                      if (!n) throw Fw(t);
                                      return n;
                                  })
                              );
                    }
                    _extractIconWithNameFromAnySet(t, e) {
                        for (let n = e.length - 1; n >= 0; n--) {
                            const s = e[n];
                            if (s.svgText && s.svgText.indexOf(t) > -1) {
                                const e = this._svgElementFromConfig(s),
                                    n = this._extractSvgIconFromSet(e, t, s.options);
                                if (n) return n;
                            }
                        }
                        return null;
                    }
                    _loadSvgIconFromConfig(t) {
                        return this._fetchIcon(t).pipe(
                            Ih((e) => (t.svgText = e)),
                            k(() => this._svgElementFromConfig(t))
                        );
                    }
                    _loadSvgIconSetFromConfig(t) {
                        return t.svgText ? Uu(null) : this._fetchIcon(t).pipe(Ih((e) => (t.svgText = e)));
                    }
                    _extractSvgIconFromSet(t, e, n) {
                        const s = t.querySelector(`[id="${e}"]`);
                        if (!s) return null;
                        const r = s.cloneNode(!0);
                        if ((r.removeAttribute('id'), 'svg' === r.nodeName.toLowerCase())) return this._setSvgAttributes(r, n);
                        if ('symbol' === r.nodeName.toLowerCase()) return this._setSvgAttributes(this._toSvgElement(r), n);
                        const i = this._svgElementFromString('<svg></svg>');
                        return i.appendChild(r), this._setSvgAttributes(i, n);
                    }
                    _svgElementFromString(t) {
                        const e = this._document.createElement('DIV');
                        e.innerHTML = t;
                        const n = e.querySelector('svg');
                        if (!n) throw Error('<svg> tag not found');
                        return n;
                    }
                    _toSvgElement(t) {
                        const e = this._svgElementFromString('<svg></svg>'),
                            n = t.attributes;
                        for (let s = 0; s < n.length; s++) {
                            const { name: t, value: r } = n[s];
                            'id' !== t && e.setAttribute(t, r);
                        }
                        for (let s = 0; s < t.childNodes.length; s++)
                            t.childNodes[s].nodeType === this._document.ELEMENT_NODE && e.appendChild(t.childNodes[s].cloneNode(!0));
                        return e;
                    }
                    _setSvgAttributes(t, e) {
                        return (
                            t.setAttribute('fit', ''),
                            t.setAttribute('height', '100%'),
                            t.setAttribute('width', '100%'),
                            t.setAttribute('preserveAspectRatio', 'xMidYMid meet'),
                            t.setAttribute('focusable', 'false'),
                            e && e.viewBox && t.setAttribute('viewBox', e.viewBox),
                            t
                        );
                    }
                    _fetchIcon(t) {
                        var e;
                        const { url: n, options: s } = t,
                            r = null !== (e = null == s ? void 0 : s.withCredentials) && void 0 !== e && e;
                        if (!this._httpClient)
                            throw Error(
                                'Could not find HttpClient provider for use with Angular Material icons. Please include the HttpClientModule from @angular/common/http in your app imports.'
                            );
                        if (null == n) throw Error(`Cannot fetch icon from URL "${n}".`);
                        const i = this._sanitizer.sanitize(Qs.RESOURCE_URL, n);
                        if (!i) throw Mw(n);
                        const o = this._inProgressUrlFetches.get(i);
                        if (o) return o;
                        const a = this._httpClient.get(i, { responseType: 'text', withCredentials: r }).pipe(
                            Dh(() => this._inProgressUrlFetches.delete(i)),
                            X()
                        );
                        return this._inProgressUrlFetches.set(i, a), a;
                    }
                    _addSvgIconConfig(t, e, n) {
                        return this._svgIconConfigs.set(Uw(t, e), n), this;
                    }
                    _addSvgIconSetConfig(t, e) {
                        const n = this._iconSetConfigs.get(t);
                        return n ? n.push(e) : this._iconSetConfigs.set(t, [e]), this;
                    }
                    _svgElementFromConfig(t) {
                        if (!t.svgElement) {
                            const e = this._svgElementFromString(t.svgText);
                            this._setSvgAttributes(e, t.options), (t.svgElement = e);
                        }
                        return t.svgElement;
                    }
                    _getIconConfigFromResolvers(t, e) {
                        for (let s = 0; s < this._resolvers.length; s++) {
                            const r = this._resolvers[s](e, t);
                            if (r) return (n = r).url && n.options ? new Hw(r.url, null, r.options) : new Hw(r, null);
                        }
                        var n;
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(im, 8), as(Ou), as(Cc, 8), as(Js));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(im, 8), as(Ou), as(Cc, 8), as(Js));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            function Vw(t) {
                return t.cloneNode(!0);
            }
            function Uw(t, e) {
                return t + ':' + e;
            }
            const $w = dv(
                    class {
                        constructor(t) {
                            this._elementRef = t;
                        }
                    }
                ),
                zw = new $n('mat-icon-location', {
                    providedIn: 'root',
                    factory: function () {
                        const t = ls(Cc),
                            e = t ? t.location : null;
                        return { getPathname: () => (e ? e.pathname + e.search : '') };
                    },
                }),
                qw = [
                    'clip-path',
                    'color-profile',
                    'src',
                    'cursor',
                    'fill',
                    'filter',
                    'marker',
                    'marker-start',
                    'marker-mid',
                    'marker-end',
                    'mask',
                    'stroke',
                ],
                Ww = qw.map((t) => `[${t}]`).join(', '),
                Qw = /^url\(['"]?#(.*?)['"]?\)$/;
            let Kw = (() => {
                    class t extends $w {
                        constructor(t, e, n, s, r) {
                            super(t),
                                (this._iconRegistry = e),
                                (this._location = s),
                                (this._errorHandler = r),
                                (this._inline = !1),
                                (this._currentIconFetch = h.EMPTY),
                                n || t.nativeElement.setAttribute('aria-hidden', 'true');
                        }
                        get inline() {
                            return this._inline;
                        }
                        set inline(t) {
                            this._inline = w_(t);
                        }
                        get svgIcon() {
                            return this._svgIcon;
                        }
                        set svgIcon(t) {
                            t !== this._svgIcon &&
                                (t ? this._updateSvgIcon(t) : this._svgIcon && this._clearSvgElement(), (this._svgIcon = t));
                        }
                        get fontSet() {
                            return this._fontSet;
                        }
                        set fontSet(t) {
                            const e = this._cleanupFontValue(t);
                            e !== this._fontSet && ((this._fontSet = e), this._updateFontIconClasses());
                        }
                        get fontIcon() {
                            return this._fontIcon;
                        }
                        set fontIcon(t) {
                            const e = this._cleanupFontValue(t);
                            e !== this._fontIcon && ((this._fontIcon = e), this._updateFontIconClasses());
                        }
                        _splitIconName(t) {
                            if (!t) return ['', ''];
                            const e = t.split(':');
                            switch (e.length) {
                                case 1:
                                    return ['', e[0]];
                                case 2:
                                    return e;
                                default:
                                    throw Error(`Invalid icon name: "${t}"`);
                            }
                        }
                        ngOnInit() {
                            this._updateFontIconClasses();
                        }
                        ngAfterViewChecked() {
                            const t = this._elementsWithExternalReferences;
                            if (t && t.size) {
                                const t = this._location.getPathname();
                                t !== this._previousPath && ((this._previousPath = t), this._prependPathToReferences(t));
                            }
                        }
                        ngOnDestroy() {
                            this._currentIconFetch.unsubscribe(),
                                this._elementsWithExternalReferences && this._elementsWithExternalReferences.clear();
                        }
                        _usingFontIcon() {
                            return !this.svgIcon;
                        }
                        _setSvgElement(t) {
                            this._clearSvgElement();
                            const e = t.querySelectorAll('style');
                            for (let s = 0; s < e.length; s++) e[s].textContent += ' ';
                            const n = this._location.getPathname();
                            (this._previousPath = n),
                                this._cacheChildrenWithExternalReferences(t),
                                this._prependPathToReferences(n),
                                this._elementRef.nativeElement.appendChild(t);
                        }
                        _clearSvgElement() {
                            const t = this._elementRef.nativeElement;
                            let e = t.childNodes.length;
                            for (this._elementsWithExternalReferences && this._elementsWithExternalReferences.clear(); e--; ) {
                                const n = t.childNodes[e];
                                (1 === n.nodeType && 'svg' !== n.nodeName.toLowerCase()) || t.removeChild(n);
                            }
                        }
                        _updateFontIconClasses() {
                            if (!this._usingFontIcon()) return;
                            const t = this._elementRef.nativeElement,
                                e = this.fontSet
                                    ? this._iconRegistry.classNameForFontAlias(this.fontSet)
                                    : this._iconRegistry.getDefaultFontSetClass();
                            e != this._previousFontSetClass &&
                                (this._previousFontSetClass && t.classList.remove(this._previousFontSetClass),
                                e && t.classList.add(e),
                                (this._previousFontSetClass = e)),
                                this.fontIcon != this._previousFontIconClass &&
                                    (this._previousFontIconClass && t.classList.remove(this._previousFontIconClass),
                                    this.fontIcon && t.classList.add(this.fontIcon),
                                    (this._previousFontIconClass = this.fontIcon));
                        }
                        _cleanupFontValue(t) {
                            return 'string' == typeof t ? t.trim().split(' ')[0] : t;
                        }
                        _prependPathToReferences(t) {
                            const e = this._elementsWithExternalReferences;
                            e &&
                                e.forEach((e, n) => {
                                    e.forEach((e) => {
                                        n.setAttribute(e.name, `url('${t}#${e.value}')`);
                                    });
                                });
                        }
                        _cacheChildrenWithExternalReferences(t) {
                            const e = t.querySelectorAll(Ww),
                                n = (this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map());
                            for (let s = 0; s < e.length; s++)
                                qw.forEach((t) => {
                                    const r = e[s],
                                        i = r.getAttribute(t),
                                        o = i ? i.match(Qw) : null;
                                    if (o) {
                                        let e = n.get(r);
                                        e || ((e = []), n.set(r, e)), e.push({ name: t, value: o[1] });
                                    }
                                });
                        }
                        _updateSvgIcon(t) {
                            if (((this._svgNamespace = null), (this._svgName = null), this._currentIconFetch.unsubscribe(), t)) {
                                const [e, n] = this._splitIconName(t);
                                e && (this._svgNamespace = e),
                                    n && (this._svgName = n),
                                    (this._currentIconFetch = this._iconRegistry
                                        .getNamedSvgIcon(n, e)
                                        .pipe(ih(1))
                                        .subscribe(
                                            (t) => this._setSvgElement(t),
                                            (t) => {
                                                this._errorHandler.handleError(new Error(`Error retrieving icon ${e}:${n}! ${t.message}`));
                                            }
                                        ));
                            }
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(Bw), Bn('aria-hidden'), fo(zw), fo(Js));
                        }),
                        (t.ɵcmp = Ut({
                            type: t,
                            selectors: [['mat-icon']],
                            hostAttrs: ['role', 'img', 1, 'mat-icon', 'notranslate'],
                            hostVars: 7,
                            hostBindings: function (t, e) {
                                2 & t &&
                                    (ho('data-mat-icon-type', e._usingFontIcon() ? 'font' : 'svg')(
                                        'data-mat-icon-name',
                                        e._svgName || e.fontIcon
                                    )('data-mat-icon-namespace', e._svgNamespace || e.fontSet),
                                    Do('mat-icon-inline', e.inline)(
                                        'mat-icon-no-color',
                                        'primary' !== e.color && 'accent' !== e.color && 'warn' !== e.color
                                    ));
                            },
                            inputs: { color: 'color', inline: 'inline', svgIcon: 'svgIcon', fontSet: 'fontSet', fontIcon: 'fontIcon' },
                            exportAs: ['matIcon'],
                            features: [eo],
                            ngContentSelectors: Nw,
                            decls: 1,
                            vars: 0,
                            template: function (t, e) {
                                1 & t && (Ro(), Oo(0));
                            },
                            styles: [
                                '.mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\n',
                            ],
                            encapsulation: 2,
                            changeDetection: 0,
                        })),
                        t
                    );
                })(),
                Zw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv], uv] })),
                        t
                    );
                })(),
                Yw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Av, Mv, uv, jv, Yc], Av, uv, jv, Iw] })),
                        t
                    );
                })();
            const Gw = {
                provide: new $n('mat-menu-scroll-strategy'),
                deps: [$b],
                useFactory: function (t) {
                    return () => t.scrollStrategies.reposition();
                },
            };
            let Xw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [Gw], imports: [uv] })),
                        t
                    );
                })(),
                Jw = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [Gw], imports: [[Yc, uv, Mv, qb, Xw], rb, uv, Xw] })),
                        t
                    );
                })();
            const tx = {
                provide: new $n('mat-select-scroll-strategy'),
                deps: [$b],
                useFactory: function (t) {
                    return () => t.scrollStrategies.reposition();
                },
            };
            let ex = (() => {
                class t {}
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵmod = Wt({ type: t })),
                    (t.ɵinj = dt({ providers: [tx], imports: [[Yc, qb, Hv, uv], rb, Wb, Hv, uv] })),
                    t
                );
            })();
            const nx = {
                provide: new $n('mat-tooltip-scroll-strategy'),
                deps: [$b],
                useFactory: function (t) {
                    return () => t.scrollStrategies.reposition({ scrollThrottle: 20 });
                },
            };
            let sx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [nx], imports: [[sv, Yc, qb, uv], uv, rb] })),
                        t
                    );
                })(),
                rx = (() => {
                    class t {
                        constructor() {
                            (this.changes = new S()),
                                (this.itemsPerPageLabel = 'Items per page:'),
                                (this.nextPageLabel = 'Next page'),
                                (this.previousPageLabel = 'Previous page'),
                                (this.firstPageLabel = 'First page'),
                                (this.lastPageLabel = 'Last page'),
                                (this.getRangeLabel = (t, e, n) => {
                                    if (0 == n || 0 == e) return `0 of ${n}`;
                                    const s = t * e;
                                    return `${s + 1} \u2013 ${s < (n = Math.max(n, 0)) ? Math.min(s + e, n) : s + e} of ${n}`;
                                });
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t();
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            const ix = {
                provide: rx,
                deps: [[new ds(), new ps(), rx]],
                useFactory: function (t) {
                    return t || new rx();
                },
            };
            let ox = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [ix], imports: [[Yc, sw, ex, sx, uv]] })),
                        t
                    );
                })(),
                ax = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Yc, uv], uv] })),
                        t
                    );
                })();
            function lx(t, e) {
                if ((1 & t && (en(), vo(0, 'circle', 3)), 2 & t)) {
                    const t = To();
                    Lo('animation-name', 'mat-progress-spinner-stroke-rotate-' + t._spinnerAnimationLabel)(
                        'stroke-dashoffset',
                        t._getStrokeDashOffset(),
                        'px'
                    )('stroke-dasharray', t._getStrokeCircumference(), 'px')('stroke-width', t._getCircleStrokeWidth(), '%'),
                        ho('r', t._getCircleRadius());
                }
            }
            function cx(t, e) {
                if ((1 & t && (en(), vo(0, 'circle', 3)), 2 & t)) {
                    const t = To();
                    Lo('stroke-dashoffset', t._getStrokeDashOffset(), 'px')('stroke-dasharray', t._getStrokeCircumference(), 'px')(
                        'stroke-width',
                        t._getCircleStrokeWidth(),
                        '%'
                    ),
                        ho('r', t._getCircleRadius());
                }
            }
            const ux = dv(
                    class {
                        constructor(t) {
                            this._elementRef = t;
                        }
                    },
                    'primary'
                ),
                hx = new $n('mat-progress-spinner-default-options', {
                    providedIn: 'root',
                    factory: function () {
                        return { diameter: 100 };
                    },
                });
            class dx extends ux {
                constructor(t, e, n, s, r) {
                    super(t),
                        (this._document = n),
                        (this._diameter = 100),
                        (this._value = 0),
                        (this._fallbackAnimation = !1),
                        (this.mode = 'determinate');
                    const i = dx._diameters;
                    (this._spinnerAnimationLabel = this._getSpinnerAnimationLabel()),
                        i.has(n.head) || i.set(n.head, new Set([100])),
                        (this._fallbackAnimation = e.EDGE || e.TRIDENT),
                        (this._noopAnimations = 'NoopAnimations' === s && !!r && !r._forceAnimations),
                        r && (r.diameter && (this.diameter = r.diameter), r.strokeWidth && (this.strokeWidth = r.strokeWidth));
                }
                get diameter() {
                    return this._diameter;
                }
                set diameter(t) {
                    (this._diameter = x_(t)),
                        (this._spinnerAnimationLabel = this._getSpinnerAnimationLabel()),
                        !this._fallbackAnimation && this._styleRoot && this._attachStyleNode();
                }
                get strokeWidth() {
                    return this._strokeWidth || this.diameter / 10;
                }
                set strokeWidth(t) {
                    this._strokeWidth = x_(t);
                }
                get value() {
                    return 'determinate' === this.mode ? this._value : 0;
                }
                set value(t) {
                    this._value = Math.max(0, Math.min(100, x_(t)));
                }
                ngOnInit() {
                    const t = this._elementRef.nativeElement;
                    (this._styleRoot = D_(t) || this._document.head),
                        this._attachStyleNode(),
                        t.classList.add(`mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`);
                }
                _getCircleRadius() {
                    return (this.diameter - 10) / 2;
                }
                _getViewBox() {
                    const t = 2 * this._getCircleRadius() + this.strokeWidth;
                    return `0 0 ${t} ${t}`;
                }
                _getStrokeCircumference() {
                    return 2 * Math.PI * this._getCircleRadius();
                }
                _getStrokeDashOffset() {
                    return 'determinate' === this.mode
                        ? (this._getStrokeCircumference() * (100 - this._value)) / 100
                        : this._fallbackAnimation && 'indeterminate' === this.mode
                        ? 0.2 * this._getStrokeCircumference()
                        : null;
                }
                _getCircleStrokeWidth() {
                    return (this.strokeWidth / this.diameter) * 100;
                }
                _attachStyleNode() {
                    const t = this._styleRoot,
                        e = this._diameter,
                        n = dx._diameters;
                    let s = n.get(t);
                    if (!s || !s.has(e)) {
                        const r = this._document.createElement('style');
                        r.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel),
                            (r.textContent = this._getAnimationText()),
                            t.appendChild(r),
                            s || ((s = new Set()), n.set(t, s)),
                            s.add(e);
                    }
                }
                _getAnimationText() {
                    const t = this._getStrokeCircumference();
                    return '\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n'
                        .replace(/START_VALUE/g, '' + 0.95 * t)
                        .replace(/END_VALUE/g, '' + 0.2 * t)
                        .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);
                }
                _getSpinnerAnimationLabel() {
                    return this.diameter.toString().replace('.', '_');
                }
            }
            (dx.ɵfac = function (t) {
                return new (t || dx)(fo(oa), fo(O_), fo(Cc, 8), fo(e_, 8), fo(hx));
            }),
                (dx.ɵcmp = Ut({
                    type: dx,
                    selectors: [['mat-progress-spinner']],
                    hostAttrs: ['role', 'progressbar', 'tabindex', '-1', 1, 'mat-progress-spinner'],
                    hostVars: 10,
                    hostBindings: function (t, e) {
                        2 & t &&
                            (ho('aria-valuemin', 'determinate' === e.mode ? 0 : null)(
                                'aria-valuemax',
                                'determinate' === e.mode ? 100 : null
                            )('aria-valuenow', 'determinate' === e.mode ? e.value : null)('mode', e.mode),
                            Lo('width', e.diameter, 'px')('height', e.diameter, 'px'),
                            Do('_mat-animation-noopable', e._noopAnimations));
                    },
                    inputs: { color: 'color', mode: 'mode', diameter: 'diameter', strokeWidth: 'strokeWidth', value: 'value' },
                    exportAs: ['matProgressSpinner'],
                    features: [eo],
                    decls: 10,
                    vars: 8,
                    consts: [
                        ['preserveAspectRatio', 'xMidYMid meet', 'focusable', 'false', 'aria-hidden', 'true', 3, 'ngSwitch'],
                        [
                            'cx',
                            '50%',
                            'cy',
                            '50%',
                            3,
                            'animation-name',
                            'stroke-dashoffset',
                            'stroke-dasharray',
                            'stroke-width',
                            4,
                            'ngSwitchCase',
                        ],
                        ['cx', '50%', 'cy', '50%', 3, 'stroke-dashoffset', 'stroke-dasharray', 'stroke-width', 4, 'ngSwitchCase'],
                        ['cx', '50%', 'cy', '50%'],
                    ],
                    template: function (t, e) {
                        1 & t &&
                            (Bo(0, '\n'),
                            Bo(1, '\n'),
                            en(),
                            yo(2, 'svg', 0),
                            Bo(3, '\n\n  '),
                            Bo(4, '\n  '),
                            po(5, lx, 1, 9, 'circle', 1),
                            Bo(6, '\n\n  '),
                            po(7, cx, 1, 7, 'circle', 2),
                            Bo(8, '\n'),
                            _o(),
                            Bo(9, '\n')),
                            2 & t &&
                                ($r(2),
                                Lo('width', e.diameter, 'px')('height', e.diameter, 'px'),
                                mo('ngSwitch', 'indeterminate' === e.mode),
                                ho('viewBox', e._getViewBox()),
                                $r(3),
                                mo('ngSwitchCase', !0),
                                $r(2),
                                mo('ngSwitchCase', !1));
                    },
                    directives: [Kc, Zc],
                    styles: [
                        '.mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\n',
                    ],
                    encapsulation: 2,
                    changeDetection: 0,
                })),
                (dx._diameters = new WeakMap());
            let px = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv, Yc], uv] })),
                        t
                    );
                })(),
                fx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Mv, uv], uv] })),
                        t
                    );
                })(),
                mx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Yc, uv, I_, rb], rb, uv] })),
                        t
                    );
                })(),
                gx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })(),
                yx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[gx, Mv, uv, j_], gx, uv] })),
                        t
                    );
                })(),
                _x = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Yc, uv], uv] })),
                        t
                    );
                })(),
                vx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[qb, pb, Yc, sw, uv], uv] })),
                        t
                    );
                })(),
                bx = (() => {
                    class t {
                        constructor() {
                            this.changes = new S();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t();
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            const wx = {
                provide: bx,
                deps: [[new ds(), new ps(), bx]],
                useFactory: function (t) {
                    return t || new bx();
                },
            };
            let xx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [wx], imports: [[Yc, uv]] })),
                        t
                    );
                })(),
                Sx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[ov]] })),
                        t
                    );
                })(),
                Ex = (() => {
                    class t {
                        constructor() {
                            (this.changes = new S()), (this.optionalLabel = 'Optional');
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t();
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            const Cx = {
                provide: Ex,
                deps: [[new ds(), new ps(), Ex]],
                useFactory: function (t) {
                    return t || new Ex();
                },
            };
            let kx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [Cx, Tv], imports: [[uv, Yc, pb, sw, Sx, Zw, Mv], uv] })),
                        t
                    );
                })(),
                Tx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[ib]] })),
                        t
                    );
                })(),
                Ax = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Tx, uv], uv] })),
                        t
                    );
                })(),
                Rx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Yc, uv, pb, Mv, j_, sv], uv] })),
                        t
                    );
                })();
            const Ox = ['*', [['mat-toolbar-row']]],
                Ix = ['*', 'mat-toolbar-row'],
                Px = dv(
                    class {
                        constructor(t) {
                            this._elementRef = t;
                        }
                    }
                );
            let Lx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [['mat-toolbar-row']],
                            hostAttrs: [1, 'mat-toolbar-row'],
                            exportAs: ['matToolbarRow'],
                        })),
                        t
                    );
                })(),
                Dx = (() => {
                    class t extends Px {
                        constructor(t, e, n) {
                            super(t), (this._platform = e), (this._document = n);
                        }
                        ngAfterViewInit() {
                            this._platform.isBrowser &&
                                (this._checkToolbarMixedModes(), this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes()));
                        }
                        _checkToolbarMixedModes() {}
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(O_), fo(Cc));
                        }),
                        (t.ɵcmp = Ut({
                            type: t,
                            selectors: [['mat-toolbar']],
                            contentQueries: function (t, e, n) {
                                if ((1 & t && bl(n, Lx, 5), 2 & t)) {
                                    let t;
                                    _l((t = wl())) && (e._toolbarRows = t);
                                }
                            },
                            hostAttrs: [1, 'mat-toolbar'],
                            hostVars: 4,
                            hostBindings: function (t, e) {
                                2 & t &&
                                    Do('mat-toolbar-multiple-rows', e._toolbarRows.length > 0)(
                                        'mat-toolbar-single-row',
                                        0 === e._toolbarRows.length
                                    );
                            },
                            inputs: { color: 'color' },
                            exportAs: ['matToolbar'],
                            features: [eo],
                            ngContentSelectors: Ix,
                            decls: 4,
                            vars: 0,
                            template: function (t, e) {
                                1 & t && (Ro(Ox), Oo(0), Bo(1, '\n'), Oo(2, 1), Bo(3, '\n'));
                            },
                            styles: [
                                '.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\n',
                            ],
                            encapsulation: 2,
                            changeDetection: 0,
                        })),
                        t
                    );
                })(),
                Nx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[uv], uv] })),
                        t
                    );
                })(),
                Fx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({})),
                        t
                    );
                })(),
                Mx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Fx, uv], uv] })),
                        t
                    );
                })(),
                jx = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({
                            imports: [
                                Kb,
                                Zb,
                                sw,
                                rw,
                                iw,
                                aw,
                                uw,
                                uv,
                                mw,
                                Ow,
                                Iw,
                                Lw,
                                Wb,
                                Dw,
                                Zw,
                                dw,
                                Av,
                                Yw,
                                Jw,
                                kv,
                                Hv,
                                ox,
                                ax,
                                px,
                                jv,
                                fx,
                                Mv,
                                ex,
                                mx,
                                yx,
                                _x,
                                vx,
                                xx,
                                kx,
                                Ax,
                                Rx,
                                Nx,
                                sx,
                                Mx,
                            ],
                        })),
                        t
                    );
                })();
            const Hx = {
                    provide: Pl,
                    useFactory: function (t, e) {
                        return () => {
                            if (Gc(e)) {
                                const e = Array.from(t.querySelectorAll(`[class*=${Bx}]`)),
                                    n = /\bflex-layout-.+?\b/g;
                                e.forEach((t) => {
                                    t.classList.contains(`${Bx}ssr`) && t.parentNode
                                        ? t.parentNode.removeChild(t)
                                        : t.className.replace(n, '');
                                });
                            }
                        };
                    },
                    deps: [Cc, Il],
                    multi: !0,
                },
                Bx = 'flex-layout-';
            let Vx = (() => {
                class t {}
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵmod = Wt({ type: t })),
                    (t.ɵinj = dt({ providers: [Hx] })),
                    t
                );
            })();
            class Ux {
                constructor(t = !1, e = 'all', n = '', s = '', r = 0) {
                    (this.matches = t),
                        (this.mediaQuery = e),
                        (this.mqAlias = n),
                        (this.suffix = s),
                        (this.priority = r),
                        (this.property = '');
                }
                clone() {
                    return new Ux(this.matches, this.mediaQuery, this.mqAlias, this.suffix);
                }
            }
            let $x = (() => {
                class t {
                    constructor() {
                        this.stylesheet = new Map();
                    }
                    addStyleToElement(t, e, n) {
                        const s = this.stylesheet.get(t);
                        s ? s.set(e, n) : this.stylesheet.set(t, new Map([[e, n]]));
                    }
                    clearStyles() {
                        this.stylesheet.clear();
                    }
                    getStyleForElement(t, e) {
                        const n = this.stylesheet.get(t);
                        let s = '';
                        if (n) {
                            const t = n.get(e);
                            ('number' != typeof t && 'string' != typeof t) || (s = t + '');
                        }
                        return s;
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)();
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t();
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            const zx = {
                    addFlexToParent: !0,
                    addOrientationBps: !1,
                    disableDefaultBps: !1,
                    disableVendorPrefixes: !1,
                    serverLoaded: !1,
                    useColumnBasisZero: !0,
                    printWithBreakpoints: [],
                    mediaTriggerAutoRestore: !0,
                    ssrObserveBreakpoints: [],
                },
                qx = new $n('Flex Layout token, config options for the library', { providedIn: 'root', factory: () => zx }),
                Wx = new $n('FlexLayoutServerLoaded', { providedIn: 'root', factory: () => !1 }),
                Qx = new $n('Flex Layout token, collect all breakpoints into one provider', { providedIn: 'root', factory: () => null });
            function Kx(t, e) {
                return (
                    (t = t ? t.clone() : new Ux()),
                    e && ((t.mqAlias = e.alias), (t.mediaQuery = e.mediaQuery), (t.suffix = e.suffix), (t.priority = e.priority)),
                    t
                );
            }
            const Zx = 'inline',
                Yx = ['row', 'column', 'row-reverse', 'column-reverse'];
            function Gx(t) {
                if (t)
                    switch (t.toLowerCase()) {
                        case 'reverse':
                        case 'wrap-reverse':
                        case 'reverse-wrap':
                            t = 'wrap-reverse';
                            break;
                        case 'no':
                        case 'none':
                        case 'nowrap':
                            t = 'nowrap';
                            break;
                        default:
                            t = 'wrap';
                    }
                return t;
            }
            let Xx = (() => {
                class t {
                    constructor(t, e, n, s) {
                        (this.elementRef = t),
                            (this.styleBuilder = e),
                            (this.styler = n),
                            (this.marshal = s),
                            (this.DIRECTIVE_KEY = ''),
                            (this.inputs = []),
                            (this.mru = {}),
                            (this.destroySubject = new S()),
                            (this.styleCache = new Map());
                    }
                    get parentElement() {
                        return this.elementRef.nativeElement.parentElement;
                    }
                    get nativeElement() {
                        return this.elementRef.nativeElement;
                    }
                    get activatedValue() {
                        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);
                    }
                    set activatedValue(t) {
                        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, t, this.marshal.activatedAlias);
                    }
                    ngOnChanges(t) {
                        Object.keys(t).forEach((e) => {
                            if (-1 !== this.inputs.indexOf(e)) {
                                const n = e.split('.').slice(1).join('.');
                                this.setValue(t[e].currentValue, n);
                            }
                        });
                    }
                    ngOnDestroy() {
                        this.destroySubject.next(), this.destroySubject.complete(), this.marshal.releaseElement(this.nativeElement);
                    }
                    init(t = []) {
                        this.marshal.init(
                            this.elementRef.nativeElement,
                            this.DIRECTIVE_KEY,
                            this.updateWithValue.bind(this),
                            this.clearStyles.bind(this),
                            t
                        );
                    }
                    addStyles(t, e) {
                        const n = this.styleBuilder,
                            s = n.shouldCache;
                        let r = this.styleCache.get(t);
                        (r && s) || ((r = n.buildStyles(t, e)), s && this.styleCache.set(t, r)),
                            (this.mru = Object.assign({}, r)),
                            this.applyStyleToElement(r),
                            n.sideEffect(t, r, e);
                    }
                    clearStyles() {
                        Object.keys(this.mru).forEach((t) => {
                            this.mru[t] = '';
                        }),
                            this.applyStyleToElement(this.mru),
                            (this.mru = {});
                    }
                    triggerUpdate() {
                        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);
                    }
                    getFlexFlowDirection(t, e = !1) {
                        if (t) {
                            const [n, s] = this.styler.getFlowDirection(t);
                            if (!s && e) {
                                const e = (function (t) {
                                    let [e, n, s] = (function (t) {
                                        t = t ? t.toLowerCase() : '';
                                        let [e, n, s] = t.split(' ');
                                        return (
                                            Yx.find((t) => t === e) || (e = Yx[0]),
                                            n === Zx && ((n = s !== Zx ? s : ''), (s = Zx)),
                                            [e, Gx(n), !!s]
                                        );
                                    })(t);
                                    return (function (t, e = null, n = !1) {
                                        return {
                                            display: n ? 'inline-flex' : 'flex',
                                            'box-sizing': 'border-box',
                                            'flex-direction': t,
                                            'flex-wrap': e || null,
                                        };
                                    })(e, n, s);
                                })(n);
                                this.styler.applyStyleToElements(e, [t]);
                            }
                            return n.trim();
                        }
                        return 'row';
                    }
                    hasWrap(t) {
                        return this.styler.hasWrap(t);
                    }
                    applyStyleToElement(t, e, n = this.nativeElement) {
                        this.styler.applyStyleToElement(n, t, e);
                    }
                    setValue(t, e) {
                        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, t, e);
                    }
                    updateWithValue(t) {
                        this.currentValue !== t && (this.addStyles(t), (this.currentValue = t));
                    }
                }
                return (
                    (t.ɵfac = function (t) {
                        !(function () {
                            throw new Error('invalid');
                        })();
                    }),
                    (t.ɵdir = Kt({ type: t, features: [ae] })),
                    t
                );
            })();
            const Jx = [
                    { alias: 'xs', mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)', priority: 1e3 },
                    { alias: 'sm', mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)', priority: 900 },
                    { alias: 'md', mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)', priority: 800 },
                    { alias: 'lg', mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)', priority: 700 },
                    { alias: 'xl', mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)', priority: 600 },
                    { alias: 'lt-sm', overlapping: !0, mediaQuery: 'screen and (max-width: 599.98px)', priority: 950 },
                    { alias: 'lt-md', overlapping: !0, mediaQuery: 'screen and (max-width: 959.98px)', priority: 850 },
                    { alias: 'lt-lg', overlapping: !0, mediaQuery: 'screen and (max-width: 1279.98px)', priority: 750 },
                    { alias: 'lt-xl', overlapping: !0, priority: 650, mediaQuery: 'screen and (max-width: 1919.98px)' },
                    { alias: 'gt-xs', overlapping: !0, mediaQuery: 'screen and (min-width: 600px)', priority: -950 },
                    { alias: 'gt-sm', overlapping: !0, mediaQuery: 'screen and (min-width: 960px)', priority: -850 },
                    { alias: 'gt-md', overlapping: !0, mediaQuery: 'screen and (min-width: 1280px)', priority: -750 },
                    { alias: 'gt-lg', overlapping: !0, mediaQuery: 'screen and (min-width: 1920px)', priority: -650 },
                ],
                tS = '(orientation: portrait) and (max-width: 599.98px)',
                eS = '(orientation: landscape) and (max-width: 959.98px)',
                nS = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)',
                sS = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)',
                rS = '(orientation: portrait) and (min-width: 840px)',
                iS = '(orientation: landscape) and (min-width: 1280px)',
                oS = {
                    HANDSET: `${tS}, ${eS}`,
                    TABLET: `${nS} , ${sS}`,
                    WEB: `${rS}, ${iS} `,
                    HANDSET_PORTRAIT: `${tS}`,
                    TABLET_PORTRAIT: `${nS} `,
                    WEB_PORTRAIT: `${rS}`,
                    HANDSET_LANDSCAPE: `${eS}`,
                    TABLET_LANDSCAPE: `${sS}`,
                    WEB_LANDSCAPE: `${iS}`,
                },
                aS = [
                    { alias: 'handset', priority: 2e3, mediaQuery: oS.HANDSET },
                    { alias: 'handset.landscape', priority: 2e3, mediaQuery: oS.HANDSET_LANDSCAPE },
                    { alias: 'handset.portrait', priority: 2e3, mediaQuery: oS.HANDSET_PORTRAIT },
                    { alias: 'tablet', priority: 2100, mediaQuery: oS.TABLET },
                    { alias: 'tablet.landscape', priority: 2100, mediaQuery: oS.TABLET_LANDSCAPE },
                    { alias: 'tablet.portrait', priority: 2100, mediaQuery: oS.TABLET_PORTRAIT },
                    { alias: 'web', priority: 2200, mediaQuery: oS.WEB, overlapping: !0 },
                    { alias: 'web.landscape', priority: 2200, mediaQuery: oS.WEB_LANDSCAPE, overlapping: !0 },
                    { alias: 'web.portrait', priority: 2200, mediaQuery: oS.WEB_PORTRAIT, overlapping: !0 },
                ],
                lS = /(\.|-|_)/g;
            function cS(t) {
                let e = t.length > 0 ? t.charAt(0) : '',
                    n = t.length > 1 ? t.slice(1) : '';
                return e.toUpperCase() + n;
            }
            const uS = new $n('Token (@angular/flex-layout) Breakpoints', {
                providedIn: 'root',
                factory: () => {
                    const t = ls(Qx),
                        e = ls(qx),
                        n = [].concat.apply(
                            [],
                            (t || []).map((t) => (Array.isArray(t) ? t : [t]))
                        );
                    return (function (t, e = []) {
                        const n = {};
                        return (
                            t.forEach((t) => {
                                n[t.alias] = t;
                            }),
                            e.forEach((t) => {
                                n[t.alias]
                                    ? (function (t, ...e) {
                                          if (null == t) throw TypeError('Cannot convert undefined or null to object');
                                          for (let n of e) if (null != n) for (let e in n) n.hasOwnProperty(e) && (t[e] = n[e]);
                                      })(n[t.alias], t)
                                    : (n[t.alias] = t);
                            }),
                            (s = Object.keys(n).map((t) => n[t])).forEach((t) => {
                                t.suffix ||
                                    ((t.suffix = t.alias.replace(lS, '|').split('|').map(cS).join('')), (t.overlapping = !!t.overlapping));
                            }),
                            s
                        );
                        var s;
                    })((e.disableDefaultBps ? [] : Jx).concat(e.addOrientationBps ? aS : []), n);
                },
            });
            function hS(t, e) {
                return ((e && e.priority) || 0) - ((t && t.priority) || 0);
            }
            function dS(t, e) {
                return (t.priority || 0) - (e.priority || 0);
            }
            let pS = (() => {
                    class t {
                        constructor(t) {
                            (this.findByMap = new Map()), (this.items = [...t].sort(dS));
                        }
                        findByAlias(t) {
                            return t ? this.findWithPredicate(t, (e) => e.alias == t) : null;
                        }
                        findByQuery(t) {
                            return this.findWithPredicate(t, (e) => e.mediaQuery == t);
                        }
                        get overlappings() {
                            return this.items.filter((t) => 1 == t.overlapping);
                        }
                        get aliases() {
                            return this.items.map((t) => t.alias);
                        }
                        get suffixes() {
                            return this.items.map((t) => (t.suffix ? t.suffix : ''));
                        }
                        findWithPredicate(t, e) {
                            let n = this.findByMap.get(t);
                            return n || ((n = this.items.find(e) || null), this.findByMap.set(t, n)), n || null;
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(uS));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(uS));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                fS = (() => {
                    class t {
                        constructor(t, e, n) {
                            (this._zone = t),
                                (this._platformId = e),
                                (this._document = n),
                                (this.source = new $u(new Ux(!0))),
                                (this.registry = new Map()),
                                (this.pendingRemoveListenerFns = []),
                                (this._observable$ = this.source.asObservable());
                        }
                        get activations() {
                            const t = [];
                            return (
                                this.registry.forEach((e, n) => {
                                    e.matches && t.push(n);
                                }),
                                t
                            );
                        }
                        isActive(t) {
                            const e = this.registry.get(t);
                            return e ? e.matches : this.registerQuery(t).some((t) => t.matches);
                        }
                        observe(t, e = !1) {
                            if (t && t.length) {
                                const n = this._observable$.pipe(dh((n) => !e || t.indexOf(n.mediaQuery) > -1));
                                return z(
                                    new _((e) => {
                                        const n = this.registerQuery(t);
                                        if (n.length) {
                                            const t = n.pop();
                                            n.forEach((t) => {
                                                e.next(t);
                                            }),
                                                this.source.next(t);
                                        }
                                        e.complete();
                                    }),
                                    n
                                );
                            }
                            return this._observable$;
                        }
                        registerQuery(t) {
                            const e = Array.isArray(t) ? t : [t],
                                n = [];
                            return (
                                (function (t, e) {
                                    const n = t.filter((t) => !mS[t]);
                                    if (n.length > 0) {
                                        const t = n.join(', ');
                                        try {
                                            const s = e.createElement('style');
                                            s.setAttribute('type', 'text/css'),
                                                s.styleSheet ||
                                                    s.appendChild(
                                                        e.createTextNode(
                                                            `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${t} {.fx-query-test{ }}\n`
                                                        )
                                                    ),
                                                e.head.appendChild(s),
                                                n.forEach((t) => (mS[t] = s));
                                        } catch (s) {
                                            console.error(s);
                                        }
                                    }
                                })(e, this._document),
                                e.forEach((t) => {
                                    const e = (e) => {
                                        this._zone.run(() => this.source.next(new Ux(e.matches, t)));
                                    };
                                    let s = this.registry.get(t);
                                    s ||
                                        ((s = this.buildMQL(t)),
                                        s.addListener(e),
                                        this.pendingRemoveListenerFns.push(() => s.removeListener(e)),
                                        this.registry.set(t, s)),
                                        s.matches && n.push(new Ux(!0, t));
                                }),
                                n
                            );
                        }
                        ngOnDestroy() {
                            let t;
                            for (; (t = this.pendingRemoveListenerFns.pop()); ) t();
                        }
                        buildMQL(t) {
                            return (function (t, e) {
                                return e && window.matchMedia('all').addListener
                                    ? window.matchMedia(t)
                                    : {
                                          matches: 'all' === t || '' === t,
                                          media: t,
                                          addListener: () => {},
                                          removeListener: () => {},
                                          onchange: null,
                                          addEventListener() {},
                                          removeEventListener() {},
                                          dispatchEvent: () => !1,
                                      };
                            })(t, Gc(this._platformId));
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Wl), as(Il), as(Cc));
                        }),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t(as(Wl), as(Il), as(Cc));
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })();
            const mS = {},
                gS = 'print',
                yS = { alias: gS, mediaQuery: gS, priority: 1e3 };
            let _S = (() => {
                class t {
                    constructor(t, e, n) {
                        (this.breakpoints = t),
                            (this.layoutConfig = e),
                            (this._document = n),
                            (this.registeredBeforeAfterPrintHooks = !1),
                            (this.isPrintingBeforeAfterEvent = !1),
                            (this.beforePrintEventListeners = []),
                            (this.afterPrintEventListeners = []),
                            (this.isPrinting = !1),
                            (this.queue = new vS()),
                            (this.deactivations = []);
                    }
                    withPrintQuery(t) {
                        return [...t, gS];
                    }
                    isPrintEvent(t) {
                        return t.mediaQuery.startsWith(gS);
                    }
                    get printAlias() {
                        return this.layoutConfig.printWithBreakpoints || [];
                    }
                    get printBreakPoints() {
                        return this.printAlias.map((t) => this.breakpoints.findByAlias(t)).filter((t) => null !== t);
                    }
                    getEventBreakpoints({ mediaQuery: t }) {
                        const e = this.breakpoints.findByQuery(t);
                        return (e ? [...this.printBreakPoints, e] : this.printBreakPoints).sort(hS);
                    }
                    updateEvent(t) {
                        let e = this.breakpoints.findByQuery(t.mediaQuery);
                        return (
                            this.isPrintEvent(t) && ((e = this.getEventBreakpoints(t)[0]), (t.mediaQuery = e ? e.mediaQuery : '')), Kx(t, e)
                        );
                    }
                    registerBeforeAfterPrintHooks(t) {
                        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) return;
                        this.registeredBeforeAfterPrintHooks = !0;
                        const e = () => {
                                this.isPrinting ||
                                    ((this.isPrintingBeforeAfterEvent = !0),
                                    this.startPrinting(t, this.getEventBreakpoints(new Ux(!0, gS))),
                                    t.updateStyles());
                            },
                            n = () => {
                                (this.isPrintingBeforeAfterEvent = !1), this.isPrinting && (this.stopPrinting(t), t.updateStyles());
                            };
                        this._document.defaultView.addEventListener('beforeprint', e),
                            this._document.defaultView.addEventListener('afterprint', n),
                            this.beforePrintEventListeners.push(e),
                            this.afterPrintEventListeners.push(n);
                    }
                    interceptEvents(t) {
                        return (
                            this.registerBeforeAfterPrintHooks(t),
                            (e) => {
                                this.isPrintEvent(e)
                                    ? e.matches && !this.isPrinting
                                        ? (this.startPrinting(t, this.getEventBreakpoints(e)), t.updateStyles())
                                        : e.matches ||
                                          !this.isPrinting ||
                                          this.isPrintingBeforeAfterEvent ||
                                          (this.stopPrinting(t), t.updateStyles())
                                    : this.collectActivations(e);
                            }
                        );
                    }
                    blockPropagation() {
                        return (t) => !(this.isPrinting || this.isPrintEvent(t));
                    }
                    startPrinting(t, e) {
                        (this.isPrinting = !0), (t.activatedBreakpoints = this.queue.addPrintBreakpoints(e));
                    }
                    stopPrinting(t) {
                        (t.activatedBreakpoints = this.deactivations),
                            (this.deactivations = []),
                            this.queue.clear(),
                            (this.isPrinting = !1);
                    }
                    collectActivations(t) {
                        if (!this.isPrinting || this.isPrintingBeforeAfterEvent)
                            if (t.matches) this.isPrintingBeforeAfterEvent || (this.deactivations = []);
                            else {
                                const e = this.breakpoints.findByQuery(t.mediaQuery);
                                e && (this.deactivations.push(e), this.deactivations.sort(hS));
                            }
                    }
                    ngOnDestroy() {
                        this._document.defaultView &&
                            (this.beforePrintEventListeners.forEach((t) =>
                                this._document.defaultView.removeEventListener('beforeprint', t)
                            ),
                            this.afterPrintEventListeners.forEach((t) => this._document.defaultView.removeEventListener('afterprint', t)));
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(pS), as(qx), as(Cc));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(pS), as(qx), as(Cc));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            class vS {
                constructor() {
                    this.printBreakpoints = [];
                }
                addPrintBreakpoints(t) {
                    return t.push(yS), t.sort(hS), t.forEach((t) => this.addBreakpoint(t)), this.printBreakpoints;
                }
                addBreakpoint(t) {
                    t &&
                        void 0 === this.printBreakpoints.find((e) => e.mediaQuery === t.mediaQuery) &&
                        (this.printBreakpoints = (function (t) {
                            return !!t && t.mediaQuery.startsWith(gS);
                        })(t)
                            ? [t, ...this.printBreakpoints]
                            : [...this.printBreakpoints, t]);
                }
                clear() {
                    this.printBreakpoints = [];
                }
            }
            let bS = (() => {
                class t {
                    constructor(t, e, n) {
                        (this.breakpoints = t),
                            (this.matchMedia = e),
                            (this.hook = n),
                            (this.filterOverlaps = !1),
                            (this.destroyed$ = new S()),
                            (this._media$ = this.watchActivations()),
                            (this.media$ = this._media$.pipe(
                                dh((t) => t.length > 0),
                                k((t) => t[0])
                            ));
                    }
                    ngOnDestroy() {
                        this.destroyed$.next(), this.destroyed$.complete();
                    }
                    asObservable() {
                        return this._media$;
                    }
                    isActive(t) {
                        return (function (t) {
                            return Array.isArray(t) ? t : [t];
                        })(t)
                            .map((t) => t.split(','))
                            .reduce((t, e) => t.concat(e))
                            .map((t) => t.trim())
                            .some((t) => {
                                const e = (function (t, e) {
                                    const n = e.findByAlias(t) || e.findByQuery(t);
                                    return n ? n.mediaQuery : null;
                                })(t, this.breakpoints);
                                return null !== e && this.matchMedia.isActive(e);
                            });
                    }
                    watchActivations() {
                        const t = this.breakpoints.items.map((t) => t.mediaQuery);
                        return this.buildObservable(t);
                    }
                    buildObservable(t) {
                        return this.matchMedia.observe(this.hook.withPrintQuery(t)).pipe(
                            dh((t) => t.matches),
                            (function (t, e = u_) {
                                return (n) => n.lift(new h_(t, e));
                            })(0, Qv),
                            eh((t) => Uu(this.findAllActivations())),
                            k((t) =>
                                this.filterOverlaps
                                    ? t.filter((t) => {
                                          const e = this.breakpoints.findByQuery(t.mediaQuery);
                                          return !e || !e.overlapping;
                                      })
                                    : t
                            ),
                            dh((t) => t.filter((t) => t.mediaQuery.length > 0).length > 0),
                            __(this.destroyed$)
                        );
                    }
                    findAllActivations() {
                        return this.matchMedia.activations
                            .map((t) => new Ux(!0, t))
                            .map((t) => (this.hook.isPrintEvent(t) ? this.hook.updateEvent(t) : t))
                            .map((t) => Kx(t, this.breakpoints.findByQuery(t.mediaQuery)))
                            .sort(hS);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(pS), as(fS), as(_S));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(pS), as(fS), as(_S));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            function wS(t) {
                for (let e in t) {
                    let n = t[e] || '';
                    switch (e) {
                        case 'display':
                            t.display =
                                'flex' === n ? ['-webkit-flex', 'flex'] : 'inline-flex' === n ? ['-webkit-inline-flex', 'inline-flex'] : n;
                            break;
                        case 'align-items':
                        case 'align-self':
                        case 'align-content':
                        case 'flex':
                        case 'flex-basis':
                        case 'flex-flow':
                        case 'flex-grow':
                        case 'flex-shrink':
                        case 'flex-wrap':
                        case 'justify-content':
                            t['-webkit-' + e] = n;
                            break;
                        case 'flex-direction':
                            (n = n || 'row'), (t['-webkit-flex-direction'] = n), (t['flex-direction'] = n);
                            break;
                        case 'order':
                            t.order = t['-webkit-' + e] = isNaN(+n) ? '0' : n;
                    }
                }
                return t;
            }
            let xS = (() => {
                class t {
                    constructor(t, e, n, s) {
                        (this._serverStylesheet = t), (this._serverModuleLoaded = e), (this._platformId = n), (this.layoutConfig = s);
                    }
                    applyStyleToElement(t, e, n = null) {
                        let s = {};
                        'string' == typeof e && ((s[e] = n), (e = s)),
                            (s = this.layoutConfig.disableVendorPrefixes ? e : wS(e)),
                            this._applyMultiValueStyleToElement(s, t);
                    }
                    applyStyleToElements(t, e = []) {
                        const n = this.layoutConfig.disableVendorPrefixes ? t : wS(t);
                        e.forEach((t) => {
                            this._applyMultiValueStyleToElement(n, t);
                        });
                    }
                    getFlowDirection(t) {
                        const e = 'flex-direction';
                        let n = this.lookupStyle(t, e);
                        return [n || 'row', this.lookupInlineStyle(t, e) || (Xc(this._platformId) && this._serverModuleLoaded) ? n : ''];
                    }
                    hasWrap(t) {
                        return 'wrap' === this.lookupStyle(t, 'flex-wrap');
                    }
                    lookupAttributeValue(t, e) {
                        return t.getAttribute(e) || '';
                    }
                    lookupInlineStyle(t, e) {
                        return Gc(this._platformId) ? t.style.getPropertyValue(e) : this._getServerStyle(t, e);
                    }
                    lookupStyle(t, e, n = !1) {
                        let s = '';
                        return (
                            t &&
                                ((s = this.lookupInlineStyle(t, e)) ||
                                    (Gc(this._platformId)
                                        ? n || (s = getComputedStyle(t).getPropertyValue(e))
                                        : this._serverModuleLoaded && (s = this._serverStylesheet.getStyleForElement(t, e)))),
                            s ? s.trim() : ''
                        );
                    }
                    _applyMultiValueStyleToElement(t, e) {
                        Object.keys(t)
                            .sort()
                            .forEach((n) => {
                                const s = t[n],
                                    r = Array.isArray(s) ? s : [s];
                                r.sort();
                                for (let t of r)
                                    (t = t ? t + '' : ''),
                                        Gc(this._platformId) || !this._serverModuleLoaded
                                            ? Gc(this._platformId)
                                                ? e.style.setProperty(n, t)
                                                : this._setServerStyle(e, n, t)
                                            : this._serverStylesheet.addStyleToElement(e, n, t);
                            });
                    }
                    _setServerStyle(t, e, n) {
                        e = e.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                        const s = this._readStyleAttribute(t);
                        (s[e] = n || ''), this._writeStyleAttribute(t, s);
                    }
                    _getServerStyle(t, e) {
                        return this._readStyleAttribute(t)[e] || '';
                    }
                    _readStyleAttribute(t) {
                        const e = {},
                            n = t.getAttribute('style');
                        if (n) {
                            const t = n.split(/;+/g);
                            for (let n = 0; n < t.length; n++) {
                                const s = t[n].trim();
                                if (s.length > 0) {
                                    const t = s.indexOf(':');
                                    if (-1 === t) throw new Error(`Invalid CSS style: ${s}`);
                                    e[s.substr(0, t).trim()] = s.substr(t + 1).trim();
                                }
                            }
                        }
                        return e;
                    }
                    _writeStyleAttribute(t, e) {
                        let n = '';
                        for (const s in e) e[s] && (n += s + ':' + e[s] + ';');
                        t.setAttribute('style', n);
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as($x), as(Wx), as(Il), as(qx));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as($x), as(Wx), as(Il), as(qx));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            class SS {
                constructor() {
                    this.shouldCache = !0;
                }
                sideEffect(t, e, n) {}
            }
            function ES(t, e = '1', n = '1') {
                let s = [e, n, t],
                    r = t.indexOf('calc');
                if (r > 0) {
                    s[2] = CS(t.substring(r).trim());
                    let e = t.substr(0, r).trim().split(' ');
                    2 == e.length && ((s[0] = e[0]), (s[1] = e[1]));
                } else if (0 == r) s[2] = CS(t.trim());
                else {
                    let r = t.split(' ');
                    s = 3 === r.length ? r : [e, n, t];
                }
                return s;
            }
            function CS(t) {
                return t.replace(/[\s]/g, '').replace(/[\/\*\+\-]/g, ' $& ');
            }
            let kS = (() => {
                class t {
                    constructor(t, e, n) {
                        (this.matchMedia = t),
                            (this.breakpoints = e),
                            (this.hook = n),
                            (this.activatedBreakpoints = []),
                            (this.elementMap = new Map()),
                            (this.elementKeyMap = new WeakMap()),
                            (this.watcherMap = new WeakMap()),
                            (this.updateMap = new WeakMap()),
                            (this.clearMap = new WeakMap()),
                            (this.subject = new S()),
                            this.observeActivations();
                    }
                    get activatedAlias() {
                        return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';
                    }
                    onMediaChange(t) {
                        const e = this.findByQuery(t.mediaQuery);
                        e &&
                            ((t = Kx(t, e)).matches && -1 === this.activatedBreakpoints.indexOf(e)
                                ? (this.activatedBreakpoints.push(e), this.activatedBreakpoints.sort(hS), this.updateStyles())
                                : t.matches ||
                                  -1 === this.activatedBreakpoints.indexOf(e) ||
                                  (this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(e), 1),
                                  this.activatedBreakpoints.sort(hS),
                                  this.updateStyles()));
                    }
                    init(t, e, n, s, r = []) {
                        TS(this.updateMap, t, e, n),
                            TS(this.clearMap, t, e, s),
                            this.buildElementKeyMap(t, e),
                            this.watchExtraTriggers(t, e, r);
                    }
                    getValue(t, e, n) {
                        const s = this.elementMap.get(t);
                        if (s) {
                            const t = void 0 !== n ? s.get(n) : this.getActivatedValues(s, e);
                            if (t) return t.get(e);
                        }
                    }
                    hasValue(t, e) {
                        const n = this.elementMap.get(t);
                        if (n) {
                            const t = this.getActivatedValues(n, e);
                            if (t) return void 0 !== t.get(e) || !1;
                        }
                        return !1;
                    }
                    setValue(t, e, n, s) {
                        let r = this.elementMap.get(t);
                        if (r) {
                            const i = (r.get(s) || new Map()).set(e, n);
                            r.set(s, i), this.elementMap.set(t, r);
                        } else (r = new Map().set(s, new Map().set(e, n))), this.elementMap.set(t, r);
                        const i = this.getValue(t, e);
                        void 0 !== i && this.updateElement(t, e, i);
                    }
                    trackValue(t, e) {
                        return this.subject.asObservable().pipe(dh((n) => n.element === t && n.key === e));
                    }
                    updateStyles() {
                        this.elementMap.forEach((t, e) => {
                            const n = new Set(this.elementKeyMap.get(e));
                            let s = this.getActivatedValues(t);
                            s &&
                                s.forEach((t, s) => {
                                    this.updateElement(e, s, t), n.delete(s);
                                }),
                                n.forEach((n) => {
                                    if (((s = this.getActivatedValues(t, n)), s)) {
                                        const t = s.get(n);
                                        this.updateElement(e, n, t);
                                    } else this.clearElement(e, n);
                                });
                        });
                    }
                    clearElement(t, e) {
                        const n = this.clearMap.get(t);
                        if (n) {
                            const s = n.get(e);
                            s && (s(), this.subject.next({ element: t, key: e, value: '' }));
                        }
                    }
                    updateElement(t, e, n) {
                        const s = this.updateMap.get(t);
                        if (s) {
                            const r = s.get(e);
                            r && (r(n), this.subject.next({ element: t, key: e, value: n }));
                        }
                    }
                    releaseElement(t) {
                        const e = this.watcherMap.get(t);
                        e && (e.forEach((t) => t.unsubscribe()), this.watcherMap.delete(t));
                        const n = this.elementMap.get(t);
                        n && (n.forEach((t, e) => n.delete(e)), this.elementMap.delete(t));
                    }
                    triggerUpdate(t, e) {
                        const n = this.elementMap.get(t);
                        if (n) {
                            const s = this.getActivatedValues(n, e);
                            s && (e ? this.updateElement(t, e, s.get(e)) : s.forEach((e, n) => this.updateElement(t, n, e)));
                        }
                    }
                    buildElementKeyMap(t, e) {
                        let n = this.elementKeyMap.get(t);
                        n || ((n = new Set()), this.elementKeyMap.set(t, n)), n.add(e);
                    }
                    watchExtraTriggers(t, e, n) {
                        if (n && n.length) {
                            let s = this.watcherMap.get(t);
                            if ((s || ((s = new Map()), this.watcherMap.set(t, s)), !s.get(e))) {
                                const r = z(...n).subscribe(() => {
                                    const n = this.getValue(t, e);
                                    this.updateElement(t, e, n);
                                });
                                s.set(e, r);
                            }
                        }
                    }
                    findByQuery(t) {
                        return this.breakpoints.findByQuery(t);
                    }
                    getActivatedValues(t, e) {
                        for (let s = 0; s < this.activatedBreakpoints.length; s++) {
                            const n = t.get(this.activatedBreakpoints[s].alias);
                            if (n && (void 0 === e || (n.has(e) && null != n.get(e)))) return n;
                        }
                        const n = t.get('');
                        return void 0 === e || (n && n.has(e)) ? n : void 0;
                    }
                    observeActivations() {
                        const t = this.breakpoints.items.map((t) => t.mediaQuery);
                        this.matchMedia
                            .observe(this.hook.withPrintQuery(t))
                            .pipe(Ih(this.hook.interceptEvents(this)), dh(this.hook.blockPropagation()))
                            .subscribe(this.onMediaChange.bind(this));
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(fS), as(pS), as(_S));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(fS), as(pS), as(_S));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            function TS(t, e, n, s) {
                if (void 0 !== s) {
                    let r = t.get(e);
                    r || ((r = new Map()), t.set(e, r)), r.set(n, s);
                }
            }
            let AS = (() => {
                    class t extends SS {
                        buildStyles(t, e) {
                            return { display: 'true' === t ? e.display || (e.isServer ? 'initial' : '') : 'none' };
                        }
                    }
                    return (
                        (t.ɵfac = (function () {
                            let e;
                            return function (n) {
                                return (e || (e = jn(t)))(n || t);
                            };
                        })()),
                        (t.ɵprov = ht({
                            factory: function () {
                                return new t();
                            },
                            token: t,
                            providedIn: 'root',
                        })),
                        t
                    );
                })(),
                RS = (() => {
                    class t extends Xx {
                        constructor(t, e, n, s, r, i, o) {
                            super(t, e, n, s),
                                (this.layoutConfig = r),
                                (this.platformId = i),
                                (this.serverModuleLoaded = o),
                                (this.DIRECTIVE_KEY = 'show-hide'),
                                (this.display = ''),
                                (this.hasLayout = !1),
                                (this.hasFlexChild = !1);
                        }
                        ngAfterViewInit() {
                            this.trackExtraTriggers();
                            const t = Array.from(this.nativeElement.children);
                            for (let n = 0; n < t.length; n++)
                                if (this.marshal.hasValue(t[n], 'flex')) {
                                    this.hasFlexChild = !0;
                                    break;
                                }
                            OS.has(this.nativeElement)
                                ? (this.display = OS.get(this.nativeElement))
                                : ((this.display = this.getDisplayStyle()), OS.set(this.nativeElement, this.display)),
                                this.init();
                            const e = this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY, '');
                            void 0 === e || '' === e ? this.setValue(!0, '') : this.triggerUpdate();
                        }
                        ngOnChanges(t) {
                            Object.keys(t).forEach((e) => {
                                if (-1 !== this.inputs.indexOf(e)) {
                                    const n = e.split('.'),
                                        s = n.slice(1).join('.'),
                                        r = t[e].currentValue;
                                    let i = '' === r || (0 !== r && w_(r));
                                    'fxHide' === n[0] && (i = !i), this.setValue(i, s);
                                }
                            });
                        }
                        trackExtraTriggers() {
                            (this.hasLayout = this.marshal.hasValue(this.nativeElement, 'layout')),
                                ['layout', 'layout-align'].forEach((t) => {
                                    this.marshal
                                        .trackValue(this.nativeElement, t)
                                        .pipe(__(this.destroySubject))
                                        .subscribe(this.triggerUpdate.bind(this));
                                });
                        }
                        getDisplayStyle() {
                            return this.hasLayout || (this.hasFlexChild && this.layoutConfig.addFlexToParent)
                                ? 'flex'
                                : this.styler.lookupStyle(this.nativeElement, 'display', !0);
                        }
                        updateWithValue(t = !0) {
                            if ('' === t) return;
                            const e = Xc(this.platformId);
                            this.addStyles(t ? 'true' : 'false', { display: this.display, isServer: e }),
                                e && this.serverModuleLoaded && this.nativeElement.style.setProperty('display', ''),
                                this.marshal.triggerUpdate(this.parentElement, 'layout-gap');
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(AS), fo(xS), fo(kS), fo(qx), fo(Il), fo(Wx));
                        }),
                        (t.ɵdir = Kt({ type: t, features: [eo, ae] })),
                        t
                    );
                })();
            const OS = new WeakMap(),
                IS = [
                    'fxShow',
                    'fxShow.print',
                    'fxShow.xs',
                    'fxShow.sm',
                    'fxShow.md',
                    'fxShow.lg',
                    'fxShow.xl',
                    'fxShow.lt-sm',
                    'fxShow.lt-md',
                    'fxShow.lt-lg',
                    'fxShow.lt-xl',
                    'fxShow.gt-xs',
                    'fxShow.gt-sm',
                    'fxShow.gt-md',
                    'fxShow.gt-lg',
                    'fxHide',
                    'fxHide.print',
                    'fxHide.xs',
                    'fxHide.sm',
                    'fxHide.md',
                    'fxHide.lg',
                    'fxHide.xl',
                    'fxHide.lt-sm',
                    'fxHide.lt-md',
                    'fxHide.lt-lg',
                    'fxHide.lt-xl',
                    'fxHide.gt-xs',
                    'fxHide.gt-sm',
                    'fxHide.gt-md',
                    'fxHide.gt-lg',
                ];
            let PS = (() => {
                    class t extends RS {
                        constructor() {
                            super(...arguments), (this.inputs = IS);
                        }
                    }
                    return (
                        (t.ɵfac = (function () {
                            let e;
                            return function (n) {
                                return (e || (e = jn(t)))(n || t);
                            };
                        })()),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [
                                ['', 'fxShow', ''],
                                ['', 'fxShow.print', ''],
                                ['', 'fxShow.xs', ''],
                                ['', 'fxShow.sm', ''],
                                ['', 'fxShow.md', ''],
                                ['', 'fxShow.lg', ''],
                                ['', 'fxShow.xl', ''],
                                ['', 'fxShow.lt-sm', ''],
                                ['', 'fxShow.lt-md', ''],
                                ['', 'fxShow.lt-lg', ''],
                                ['', 'fxShow.lt-xl', ''],
                                ['', 'fxShow.gt-xs', ''],
                                ['', 'fxShow.gt-sm', ''],
                                ['', 'fxShow.gt-md', ''],
                                ['', 'fxShow.gt-lg', ''],
                                ['', 'fxHide', ''],
                                ['', 'fxHide.print', ''],
                                ['', 'fxHide.xs', ''],
                                ['', 'fxHide.sm', ''],
                                ['', 'fxHide.md', ''],
                                ['', 'fxHide.lg', ''],
                                ['', 'fxHide.xl', ''],
                                ['', 'fxHide.lt-sm', ''],
                                ['', 'fxHide.lt-md', ''],
                                ['', 'fxHide.lt-lg', ''],
                                ['', 'fxHide.lt-xl', ''],
                                ['', 'fxHide.gt-xs', ''],
                                ['', 'fxHide.gt-sm', ''],
                                ['', 'fxHide.gt-md', ''],
                                ['', 'fxHide.gt-lg', ''],
                            ],
                            inputs: {
                                fxShow: 'fxShow',
                                'fxShow.print': 'fxShow.print',
                                'fxShow.xs': 'fxShow.xs',
                                'fxShow.sm': 'fxShow.sm',
                                'fxShow.md': 'fxShow.md',
                                'fxShow.lg': 'fxShow.lg',
                                'fxShow.xl': 'fxShow.xl',
                                'fxShow.lt-sm': 'fxShow.lt-sm',
                                'fxShow.lt-md': 'fxShow.lt-md',
                                'fxShow.lt-lg': 'fxShow.lt-lg',
                                'fxShow.lt-xl': 'fxShow.lt-xl',
                                'fxShow.gt-xs': 'fxShow.gt-xs',
                                'fxShow.gt-sm': 'fxShow.gt-sm',
                                'fxShow.gt-md': 'fxShow.gt-md',
                                'fxShow.gt-lg': 'fxShow.gt-lg',
                                fxHide: 'fxHide',
                                'fxHide.print': 'fxHide.print',
                                'fxHide.xs': 'fxHide.xs',
                                'fxHide.sm': 'fxHide.sm',
                                'fxHide.md': 'fxHide.md',
                                'fxHide.lg': 'fxHide.lg',
                                'fxHide.xl': 'fxHide.xl',
                                'fxHide.lt-sm': 'fxHide.lt-sm',
                                'fxHide.lt-md': 'fxHide.lt-md',
                                'fxHide.lt-lg': 'fxHide.lt-lg',
                                'fxHide.lt-xl': 'fxHide.lt-xl',
                                'fxHide.gt-xs': 'fxHide.gt-xs',
                                'fxHide.gt-sm': 'fxHide.gt-sm',
                                'fxHide.gt-md': 'fxHide.gt-md',
                                'fxHide.gt-lg': 'fxHide.gt-lg',
                            },
                            features: [eo],
                        })),
                        t
                    );
                })(),
                LS = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Vx]] })),
                        t
                    );
                })();
            const DS = 'inline',
                NS = ['row', 'column', 'row-reverse', 'column-reverse'];
            function FS(t) {
                t = t ? t.toLowerCase() : '';
                let [e, n, s] = t.split(' ');
                return NS.find((t) => t === e) || (e = NS[0]), n === DS && ((n = s !== DS ? s : ''), (s = DS)), [e, jS(n), !!s];
            }
            function MS(t) {
                let [e] = FS(t);
                return e.indexOf('row') > -1;
            }
            function jS(t) {
                if (t)
                    switch (t.toLowerCase()) {
                        case 'reverse':
                        case 'wrap-reverse':
                        case 'reverse-wrap':
                            t = 'wrap-reverse';
                            break;
                        case 'no':
                        case 'none':
                        case 'nowrap':
                            t = 'nowrap';
                            break;
                        default:
                            t = 'wrap';
                    }
                return t;
            }
            let HS = (() => {
                class t extends SS {
                    buildStyles(t) {
                        return (function (t) {
                            let [e, n, s] = FS(t);
                            return (function (t, e = null, n = !1) {
                                return {
                                    display: n ? 'inline-flex' : 'flex',
                                    'box-sizing': 'border-box',
                                    'flex-direction': t,
                                    'flex-wrap': e || null,
                                };
                            })(e, n, s);
                        })(t);
                    }
                }
                return (
                    (t.ɵfac = (function () {
                        let e;
                        return function (n) {
                            return (e || (e = jn(t)))(n || t);
                        };
                    })()),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t();
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            const BS = [
                'fxLayout',
                'fxLayout.xs',
                'fxLayout.sm',
                'fxLayout.md',
                'fxLayout.lg',
                'fxLayout.xl',
                'fxLayout.lt-sm',
                'fxLayout.lt-md',
                'fxLayout.lt-lg',
                'fxLayout.lt-xl',
                'fxLayout.gt-xs',
                'fxLayout.gt-sm',
                'fxLayout.gt-md',
                'fxLayout.gt-lg',
            ];
            let VS = (() => {
                    class t extends Xx {
                        constructor(t, e, n, s) {
                            super(t, n, e, s), (this.DIRECTIVE_KEY = 'layout'), (this.styleCache = $S), this.init();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(xS), fo(HS), fo(kS));
                        }),
                        (t.ɵdir = Kt({ type: t, features: [eo] })),
                        t
                    );
                })(),
                US = (() => {
                    class t extends VS {
                        constructor() {
                            super(...arguments), (this.inputs = BS);
                        }
                    }
                    return (
                        (t.ɵfac = (function () {
                            let e;
                            return function (n) {
                                return (e || (e = jn(t)))(n || t);
                            };
                        })()),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [
                                ['', 'fxLayout', ''],
                                ['', 'fxLayout.xs', ''],
                                ['', 'fxLayout.sm', ''],
                                ['', 'fxLayout.md', ''],
                                ['', 'fxLayout.lg', ''],
                                ['', 'fxLayout.xl', ''],
                                ['', 'fxLayout.lt-sm', ''],
                                ['', 'fxLayout.lt-md', ''],
                                ['', 'fxLayout.lt-lg', ''],
                                ['', 'fxLayout.lt-xl', ''],
                                ['', 'fxLayout.gt-xs', ''],
                                ['', 'fxLayout.gt-sm', ''],
                                ['', 'fxLayout.gt-md', ''],
                                ['', 'fxLayout.gt-lg', ''],
                            ],
                            inputs: {
                                fxLayout: 'fxLayout',
                                'fxLayout.xs': 'fxLayout.xs',
                                'fxLayout.sm': 'fxLayout.sm',
                                'fxLayout.md': 'fxLayout.md',
                                'fxLayout.lg': 'fxLayout.lg',
                                'fxLayout.xl': 'fxLayout.xl',
                                'fxLayout.lt-sm': 'fxLayout.lt-sm',
                                'fxLayout.lt-md': 'fxLayout.lt-md',
                                'fxLayout.lt-lg': 'fxLayout.lt-lg',
                                'fxLayout.lt-xl': 'fxLayout.lt-xl',
                                'fxLayout.gt-xs': 'fxLayout.gt-xs',
                                'fxLayout.gt-sm': 'fxLayout.gt-sm',
                                'fxLayout.gt-md': 'fxLayout.gt-md',
                                'fxLayout.gt-lg': 'fxLayout.gt-lg',
                            },
                            features: [eo],
                        })),
                        t
                    );
                })();
            const $S = new Map();
            function zS(t, ...e) {
                if (null == t) throw TypeError('Cannot convert undefined or null to object');
                for (let n of e) if (null != n) for (let e in n) n.hasOwnProperty(e) && (t[e] = n[e]);
                return t;
            }
            let qS = (() => {
                class t extends SS {
                    constructor(t) {
                        super(), (this.layoutConfig = t);
                    }
                    buildStyles(t, e) {
                        let [n, s, ...r] = t.split(' '),
                            i = r.join(' ');
                        const o = e.direction.indexOf('column') > -1 ? 'column' : 'row',
                            a = MS(o) ? 'max-width' : 'max-height',
                            l = MS(o) ? 'min-width' : 'min-height',
                            c = String(i).indexOf('calc') > -1,
                            u = c || 'auto' === i,
                            h = String(i).indexOf('%') > -1 && !c,
                            d =
                                String(i).indexOf('px') > -1 ||
                                String(i).indexOf('rem') > -1 ||
                                String(i).indexOf('em') > -1 ||
                                String(i).indexOf('vw') > -1 ||
                                String(i).indexOf('vh') > -1;
                        let p = c || d;
                        (n = '0' == n ? 0 : n), (s = '0' == s ? 0 : s);
                        const f = !n && !s;
                        let m = {};
                        const g = { 'max-width': null, 'max-height': null, 'min-width': null, 'min-height': null };
                        switch (i || '') {
                            case '':
                                const t = !1 !== this.layoutConfig.useColumnBasisZero;
                                i = 'row' === o ? '0%' : t ? '0.000000001px' : 'auto';
                                break;
                            case 'initial':
                            case 'nogrow':
                                (n = 0), (i = 'auto');
                                break;
                            case 'grow':
                                i = '100%';
                                break;
                            case 'noshrink':
                                (s = 0), (i = 'auto');
                                break;
                            case 'auto':
                                break;
                            case 'none':
                                (n = 0), (s = 0), (i = 'auto');
                                break;
                            default:
                                p || h || isNaN(i) || (i += '%'),
                                    '0%' === i && (p = !0),
                                    '0px' === i && (i = '0%'),
                                    (m = zS(
                                        g,
                                        c
                                            ? { 'flex-grow': n, 'flex-shrink': s, 'flex-basis': p ? i : '100%' }
                                            : { flex: `${n} ${s} ${p ? i : '100%'}` }
                                    ));
                        }
                        return (
                            m.flex ||
                                m['flex-grow'] ||
                                (m = zS(g, c ? { 'flex-grow': n, 'flex-shrink': s, 'flex-basis': i } : { flex: `${n} ${s} ${i}` })),
                            '0%' !== i &&
                                '0px' !== i &&
                                '0.000000001px' !== i &&
                                'auto' !== i &&
                                ((m[l] = f || (p && n) ? i : null), (m[a] = f || (!u && s) ? i : null)),
                            m[l] || m[a]
                                ? e.hasWrap &&
                                  (m[c ? 'flex-basis' : 'flex'] = m[a] ? (c ? m[a] : `${n} ${s} ${m[a]}`) : c ? m[l] : `${n} ${s} ${m[l]}`)
                                : (m = zS(g, c ? { 'flex-grow': n, 'flex-shrink': s, 'flex-basis': i } : { flex: `${n} ${s} ${i}` })),
                            zS(m, { 'box-sizing': 'border-box' })
                        );
                    }
                }
                return (
                    (t.ɵfac = function (e) {
                        return new (e || t)(as(qx));
                    }),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t(as(qx));
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            const WS = [
                'fxFlex',
                'fxFlex.xs',
                'fxFlex.sm',
                'fxFlex.md',
                'fxFlex.lg',
                'fxFlex.xl',
                'fxFlex.lt-sm',
                'fxFlex.lt-md',
                'fxFlex.lt-lg',
                'fxFlex.lt-xl',
                'fxFlex.gt-xs',
                'fxFlex.gt-sm',
                'fxFlex.gt-md',
                'fxFlex.gt-lg',
            ];
            let QS = (() => {
                    class t extends Xx {
                        constructor(t, e, n, s, r) {
                            super(t, s, e, r),
                                (this.layoutConfig = n),
                                (this.marshal = r),
                                (this.DIRECTIVE_KEY = 'flex'),
                                (this.direction = void 0),
                                (this.wrap = void 0),
                                (this.flexGrow = '1'),
                                (this.flexShrink = '1'),
                                this.init();
                        }
                        get shrink() {
                            return this.flexShrink;
                        }
                        set shrink(t) {
                            (this.flexShrink = t || '1'), this.triggerReflow();
                        }
                        get grow() {
                            return this.flexGrow;
                        }
                        set grow(t) {
                            (this.flexGrow = t || '1'), this.triggerReflow();
                        }
                        ngOnInit() {
                            this.parentElement &&
                                (this.marshal
                                    .trackValue(this.parentElement, 'layout')
                                    .pipe(__(this.destroySubject))
                                    .subscribe(this.onLayoutChange.bind(this)),
                                this.marshal
                                    .trackValue(this.nativeElement, 'layout-align')
                                    .pipe(__(this.destroySubject))
                                    .subscribe(this.triggerReflow.bind(this)));
                        }
                        onLayoutChange(t) {
                            const e = t.value.split(' ');
                            (this.direction = e[0]), (this.wrap = void 0 !== e[1] && 'wrap' === e[1]), this.triggerUpdate();
                        }
                        updateWithValue(t) {
                            void 0 === this.direction &&
                                (this.direction = this.getFlexFlowDirection(this.parentElement, !1 !== this.layoutConfig.addFlexToParent)),
                                void 0 === this.wrap && (this.wrap = this.hasWrap(this.parentElement));
                            const e = this.direction,
                                n = e.startsWith('row'),
                                s = this.wrap;
                            n && s
                                ? (this.styleCache = GS)
                                : n && !s
                                ? (this.styleCache = ZS)
                                : !n && s
                                ? (this.styleCache = XS)
                                : n || s || (this.styleCache = YS);
                            const r = ES(String(t).replace(';', ''), this.flexGrow, this.flexShrink);
                            this.addStyles(r.join(' '), { direction: e, hasWrap: s });
                        }
                        triggerReflow() {
                            const t = this.activatedValue;
                            if (void 0 !== t) {
                                const e = ES(t + '', this.flexGrow, this.flexShrink);
                                this.marshal.updateElement(this.nativeElement, this.DIRECTIVE_KEY, e.join(' '));
                            }
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(xS), fo(qx), fo(qS), fo(kS));
                        }),
                        (t.ɵdir = Kt({ type: t, inputs: { shrink: ['fxShrink', 'shrink'], grow: ['fxGrow', 'grow'] }, features: [eo] })),
                        t
                    );
                })(),
                KS = (() => {
                    class t extends QS {
                        constructor() {
                            super(...arguments), (this.inputs = WS);
                        }
                    }
                    return (
                        (t.ɵfac = (function () {
                            let e;
                            return function (n) {
                                return (e || (e = jn(t)))(n || t);
                            };
                        })()),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [
                                ['', 'fxFlex', ''],
                                ['', 'fxFlex.xs', ''],
                                ['', 'fxFlex.sm', ''],
                                ['', 'fxFlex.md', ''],
                                ['', 'fxFlex.lg', ''],
                                ['', 'fxFlex.xl', ''],
                                ['', 'fxFlex.lt-sm', ''],
                                ['', 'fxFlex.lt-md', ''],
                                ['', 'fxFlex.lt-lg', ''],
                                ['', 'fxFlex.lt-xl', ''],
                                ['', 'fxFlex.gt-xs', ''],
                                ['', 'fxFlex.gt-sm', ''],
                                ['', 'fxFlex.gt-md', ''],
                                ['', 'fxFlex.gt-lg', ''],
                            ],
                            inputs: {
                                fxFlex: 'fxFlex',
                                'fxFlex.xs': 'fxFlex.xs',
                                'fxFlex.sm': 'fxFlex.sm',
                                'fxFlex.md': 'fxFlex.md',
                                'fxFlex.lg': 'fxFlex.lg',
                                'fxFlex.xl': 'fxFlex.xl',
                                'fxFlex.lt-sm': 'fxFlex.lt-sm',
                                'fxFlex.lt-md': 'fxFlex.lt-md',
                                'fxFlex.lt-lg': 'fxFlex.lt-lg',
                                'fxFlex.lt-xl': 'fxFlex.lt-xl',
                                'fxFlex.gt-xs': 'fxFlex.gt-xs',
                                'fxFlex.gt-sm': 'fxFlex.gt-sm',
                                'fxFlex.gt-md': 'fxFlex.gt-md',
                                'fxFlex.gt-lg': 'fxFlex.gt-lg',
                            },
                            features: [eo],
                        })),
                        t
                    );
                })();
            const ZS = new Map(),
                YS = new Map(),
                GS = new Map(),
                XS = new Map();
            let JS = (() => {
                class t extends SS {
                    buildStyles(t, e) {
                        const n = {},
                            [s, r] = t.split(' ');
                        switch (s) {
                            case 'center':
                                n['justify-content'] = 'center';
                                break;
                            case 'space-around':
                                n['justify-content'] = 'space-around';
                                break;
                            case 'space-between':
                                n['justify-content'] = 'space-between';
                                break;
                            case 'space-evenly':
                                n['justify-content'] = 'space-evenly';
                                break;
                            case 'end':
                            case 'flex-end':
                                n['justify-content'] = 'flex-end';
                                break;
                            case 'start':
                            case 'flex-start':
                            default:
                                n['justify-content'] = 'flex-start';
                        }
                        switch (r) {
                            case 'start':
                            case 'flex-start':
                                n['align-items'] = n['align-content'] = 'flex-start';
                                break;
                            case 'center':
                                n['align-items'] = n['align-content'] = 'center';
                                break;
                            case 'end':
                            case 'flex-end':
                                n['align-items'] = n['align-content'] = 'flex-end';
                                break;
                            case 'space-between':
                                (n['align-content'] = 'space-between'), (n['align-items'] = 'stretch');
                                break;
                            case 'space-around':
                                (n['align-content'] = 'space-around'), (n['align-items'] = 'stretch');
                                break;
                            case 'baseline':
                                (n['align-content'] = 'stretch'), (n['align-items'] = 'baseline');
                                break;
                            case 'stretch':
                            default:
                                n['align-items'] = n['align-content'] = 'stretch';
                        }
                        return zS(n, {
                            display: e.inline ? 'inline-flex' : 'flex',
                            'flex-direction': e.layout,
                            'box-sizing': 'border-box',
                            'max-width': 'stretch' === r ? (MS(e.layout) ? null : '100%') : null,
                            'max-height': 'stretch' === r && MS(e.layout) ? '100%' : null,
                        });
                    }
                }
                return (
                    (t.ɵfac = (function () {
                        let e;
                        return function (n) {
                            return (e || (e = jn(t)))(n || t);
                        };
                    })()),
                    (t.ɵprov = ht({
                        factory: function () {
                            return new t();
                        },
                        token: t,
                        providedIn: 'root',
                    })),
                    t
                );
            })();
            const tE = [
                'fxLayoutAlign',
                'fxLayoutAlign.xs',
                'fxLayoutAlign.sm',
                'fxLayoutAlign.md',
                'fxLayoutAlign.lg',
                'fxLayoutAlign.xl',
                'fxLayoutAlign.lt-sm',
                'fxLayoutAlign.lt-md',
                'fxLayoutAlign.lt-lg',
                'fxLayoutAlign.lt-xl',
                'fxLayoutAlign.gt-xs',
                'fxLayoutAlign.gt-sm',
                'fxLayoutAlign.gt-md',
                'fxLayoutAlign.gt-lg',
            ];
            let eE = (() => {
                    class t extends Xx {
                        constructor(t, e, n, s) {
                            super(t, n, e, s),
                                (this.DIRECTIVE_KEY = 'layout-align'),
                                (this.layout = 'row'),
                                (this.inline = !1),
                                this.init(),
                                this.marshal
                                    .trackValue(this.nativeElement, 'layout')
                                    .pipe(__(this.destroySubject))
                                    .subscribe(this.onLayoutChange.bind(this));
                        }
                        updateWithValue(t) {
                            const e = this.layout || 'row',
                                n = this.inline;
                            'row' === e && n
                                ? (this.styleCache = aE)
                                : 'row' !== e || n
                                ? 'row-reverse' === e && n
                                    ? (this.styleCache = cE)
                                    : 'row-reverse' !== e || n
                                    ? 'column' === e && n
                                        ? (this.styleCache = lE)
                                        : 'column' !== e || n
                                        ? 'column-reverse' === e && n
                                            ? (this.styleCache = uE)
                                            : 'column-reverse' !== e || n || (this.styleCache = oE)
                                        : (this.styleCache = rE)
                                    : (this.styleCache = iE)
                                : (this.styleCache = sE),
                                this.addStyles(t, { layout: e, inline: n });
                        }
                        onLayoutChange(t) {
                            const e = t.value.split(' ');
                            (this.layout = e[0]),
                                (this.inline = t.value.includes('inline')),
                                NS.find((t) => t === this.layout) || (this.layout = 'row'),
                                this.triggerUpdate();
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(fo(oa), fo(xS), fo(JS), fo(kS));
                        }),
                        (t.ɵdir = Kt({ type: t, features: [eo] })),
                        t
                    );
                })(),
                nE = (() => {
                    class t extends eE {
                        constructor() {
                            super(...arguments), (this.inputs = tE);
                        }
                    }
                    return (
                        (t.ɵfac = (function () {
                            let e;
                            return function (n) {
                                return (e || (e = jn(t)))(n || t);
                            };
                        })()),
                        (t.ɵdir = Kt({
                            type: t,
                            selectors: [
                                ['', 'fxLayoutAlign', ''],
                                ['', 'fxLayoutAlign.xs', ''],
                                ['', 'fxLayoutAlign.sm', ''],
                                ['', 'fxLayoutAlign.md', ''],
                                ['', 'fxLayoutAlign.lg', ''],
                                ['', 'fxLayoutAlign.xl', ''],
                                ['', 'fxLayoutAlign.lt-sm', ''],
                                ['', 'fxLayoutAlign.lt-md', ''],
                                ['', 'fxLayoutAlign.lt-lg', ''],
                                ['', 'fxLayoutAlign.lt-xl', ''],
                                ['', 'fxLayoutAlign.gt-xs', ''],
                                ['', 'fxLayoutAlign.gt-sm', ''],
                                ['', 'fxLayoutAlign.gt-md', ''],
                                ['', 'fxLayoutAlign.gt-lg', ''],
                            ],
                            inputs: {
                                fxLayoutAlign: 'fxLayoutAlign',
                                'fxLayoutAlign.xs': 'fxLayoutAlign.xs',
                                'fxLayoutAlign.sm': 'fxLayoutAlign.sm',
                                'fxLayoutAlign.md': 'fxLayoutAlign.md',
                                'fxLayoutAlign.lg': 'fxLayoutAlign.lg',
                                'fxLayoutAlign.xl': 'fxLayoutAlign.xl',
                                'fxLayoutAlign.lt-sm': 'fxLayoutAlign.lt-sm',
                                'fxLayoutAlign.lt-md': 'fxLayoutAlign.lt-md',
                                'fxLayoutAlign.lt-lg': 'fxLayoutAlign.lt-lg',
                                'fxLayoutAlign.lt-xl': 'fxLayoutAlign.lt-xl',
                                'fxLayoutAlign.gt-xs': 'fxLayoutAlign.gt-xs',
                                'fxLayoutAlign.gt-sm': 'fxLayoutAlign.gt-sm',
                                'fxLayoutAlign.gt-md': 'fxLayoutAlign.gt-md',
                                'fxLayoutAlign.gt-lg': 'fxLayoutAlign.gt-lg',
                            },
                            features: [eo],
                        })),
                        t
                    );
                })();
            const sE = new Map(),
                rE = new Map(),
                iE = new Map(),
                oE = new Map(),
                aE = new Map(),
                lE = new Map(),
                cE = new Map(),
                uE = new Map();
            let hE = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Vx, ov]] })),
                        t
                    );
                })(),
                dE = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Vx]] })),
                        t
                    );
                })(),
                pE = (() => {
                    class t {
                        constructor(t, e) {
                            Xc(e) && !t && console.warn('Warning: Flex Layout loaded on the server without FlexLayoutServerModule');
                        }
                        static withConfig(e, n = []) {
                            return {
                                ngModule: t,
                                providers: e.serverLoaded
                                    ? [
                                          { provide: qx, useValue: Object.assign(Object.assign({}, zx), e) },
                                          { provide: Qx, useValue: n, multi: !0 },
                                          { provide: Wx, useValue: !0 },
                                      ]
                                    : [
                                          { provide: qx, useValue: Object.assign(Object.assign({}, zx), e) },
                                          { provide: Qx, useValue: n, multi: !0 },
                                      ],
                            };
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)(as(Wx), as(Il));
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[hE, LS, dE], hE, LS, dE] })),
                        t
                    );
                })(),
                fE = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[pE, jx, Yc]] })),
                        t
                    );
                })(),
                mE = (() => {
                    class t {
                        intercept(t, e) {
                            return (
                                /^(http|https):/i.test(t.url) || (t = t.clone({ url: 'https://api.chucknorris.io' + t.url })), e.handle(t)
                            );
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac, providedIn: 'root' })),
                        t
                    );
                })();
            var gE = (() => (
                (function (t) {
                    (t[(t.Off = 0)] = 'Off'),
                        (t[(t.Error = 1)] = 'Error'),
                        (t[(t.Warning = 2)] = 'Warning'),
                        (t[(t.Info = 3)] = 'Info'),
                        (t[(t.Debug = 4)] = 'Debug');
                })(gE || (gE = {})),
                gE
            ))();
            class yE {
                constructor(t) {
                    this.source = t;
                }
                static enableProductionMode() {
                    yE.level = gE.Warning;
                }
                debug(...t) {
                    this.log(console.log, gE.Debug, t);
                }
                info(...t) {
                    this.log(console.info, gE.Info, t);
                }
                warn(...t) {
                    this.log(console.warn, gE.Warning, t);
                }
                error(...t) {
                    this.log(console.error, gE.Error, t);
                }
                log(t, e, n) {
                    if (e <= yE.level) {
                        const s = this.source ? ['[' + this.source + ']'].concat(n) : n;
                        t.apply(console, s), yE.outputs.forEach((t) => t.apply(t, [this.source, e, ...n]));
                    }
                }
            }
            (yE.level = gE.Debug), (yE.outputs = []), new yE('ErrorHandlerInterceptor');
            let _E = (() => {
                    class t {
                        intercept(t, e) {
                            return e.handle(t).pipe(mh((t) => this.errorHandler(t)));
                        }
                        errorHandler(t) {
                            throw t;
                        }
                    }
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac, providedIn: 'root' })),
                        t
                    );
                })(),
                vE = (() => {
                    class t extends ef {
                        shouldDetach(t) {
                            return !1;
                        }
                        store(t, e) {}
                        shouldAttach(t) {
                            return !1;
                        }
                        retrieve(t) {
                            return null;
                        }
                        shouldReuseRoute(t, e) {
                            var n, s, r;
                            return (
                                t.routeConfig === e.routeConfig ||
                                Boolean(
                                    (null === (n = t.routeConfig) || void 0 === n ? void 0 : n.component) &&
                                        (null === (s = t.routeConfig) || void 0 === s ? void 0 : s.component) ===
                                            (null === (r = e.routeConfig) || void 0 === r ? void 0 : r.component)
                                )
                            );
                        }
                    }
                    return (
                        (t.ɵfac = (function () {
                            let e;
                            return function (n) {
                                return (e || (e = jn(t)))(n || t);
                            };
                        })()),
                        (t.ɵprov = ht({ token: t, factory: t.ɵfac })),
                        t
                    );
                })();
            const bE = Ft,
                wE = Symbol('__destroy'),
                xE = Symbol('__decoratorApplied');
            function SE(t) {
                return 'string' == typeof t ? Symbol(`__destroy__${t}`) : wE;
            }
            function EE(t, e) {
                t[e] || (t[e] = new S());
            }
            function CE(t, e) {
                t[e] && (t[e].next(), t[e].complete(), (t[e] = null));
            }
            function kE(t) {
                t instanceof h && t.unsubscribe();
            }
            function TE(t, e) {
                return function () {
                    var n, s;
                    if ((t && t.call(this), CE(this, SE()), e.arrayName))
                        return (s = this[e.arrayName]), void (Array.isArray(s) && s.forEach(kE));
                    if (e.checkProperties)
                        for (const t in this) (null === (n = e.blackList) || void 0 === n ? void 0 : n.includes(t)) || kE(this[t]);
                };
            }
            var AE = {};
            !(function t(e, n, s, r) {
                var i = !!(
                    e.Worker &&
                    e.Blob &&
                    e.Promise &&
                    e.OffscreenCanvas &&
                    e.OffscreenCanvasRenderingContext2D &&
                    e.HTMLCanvasElement &&
                    e.HTMLCanvasElement.prototype.transferControlToOffscreen &&
                    e.URL &&
                    e.URL.createObjectURL
                );
                function o() {}
                function a(t) {
                    var s = n.exports.Promise,
                        r = void 0 !== s ? s : e.Promise;
                    return 'function' == typeof r ? new r(t) : (t(o, o), null);
                }
                var l,
                    c,
                    u,
                    h,
                    d,
                    p,
                    f,
                    m,
                    g =
                        ((u = Math.floor(1e3 / 60)),
                        (h = {}),
                        (d = 0),
                        'function' == typeof requestAnimationFrame && 'function' == typeof cancelAnimationFrame
                            ? ((l = function (t) {
                                  var e = Math.random();
                                  return (
                                      (h[e] = requestAnimationFrame(function n(s) {
                                          d === s || d + u - 1 < s ? ((d = s), delete h[e], t()) : (h[e] = requestAnimationFrame(n));
                                      })),
                                      e
                                  );
                              }),
                              (c = function (t) {
                                  h[t] && cancelAnimationFrame(h[t]);
                              }))
                            : ((l = function (t) {
                                  return setTimeout(t, u);
                              }),
                              (c = function (t) {
                                  return clearTimeout(t);
                              })),
                        { frame: l, cancel: c }),
                    y =
                        ((m = {}),
                        function () {
                            if (p) return p;
                            if (!s && i) {
                                var e = [
                                    'var CONFETTI, SIZE = {}, module = {};',
                                    '(' + t.toString() + ')(this, module, true, SIZE);',
                                    'onmessage = function(msg) {',
                                    '  if (msg.data.options) {',
                                    '    CONFETTI(msg.data.options).then(function () {',
                                    '      if (msg.data.callback) {',
                                    '        postMessage({ callback: msg.data.callback });',
                                    '      }',
                                    '    });',
                                    '  } else if (msg.data.reset) {',
                                    '    CONFETTI.reset();',
                                    '  } else if (msg.data.resize) {',
                                    '    SIZE.width = msg.data.resize.width;',
                                    '    SIZE.height = msg.data.resize.height;',
                                    '  } else if (msg.data.canvas) {',
                                    '    SIZE.width = msg.data.canvas.width;',
                                    '    SIZE.height = msg.data.canvas.height;',
                                    '    CONFETTI = module.exports.create(msg.data.canvas);',
                                    '  }',
                                    '}',
                                ].join('\n');
                                try {
                                    p = new Worker(URL.createObjectURL(new Blob([e])));
                                } catch (n) {
                                    return (
                                        void 0 !== typeof console &&
                                            'function' == typeof console.warn &&
                                            console.warn('\ud83c\udf8a Could not load worker', n),
                                        null
                                    );
                                }
                                !(function (t) {
                                    function e(e, n) {
                                        t.postMessage({ options: e || {}, callback: n });
                                    }
                                    (t.init = function (e) {
                                        var n = e.transferControlToOffscreen();
                                        t.postMessage({ canvas: n }, [n]);
                                    }),
                                        (t.fire = function (n, s, r) {
                                            if (f) return e(n, null), f;
                                            var i = Math.random().toString(36).slice(2);
                                            return (f = a(function (s) {
                                                function o(e) {
                                                    e.data.callback === i &&
                                                        (delete m[i], t.removeEventListener('message', o), (f = null), r(), s());
                                                }
                                                t.addEventListener('message', o), e(n, i), (m[i] = o.bind(null, { data: { callback: i } }));
                                            }));
                                        }),
                                        (t.reset = function () {
                                            for (var e in (t.postMessage({ reset: !0 }), m)) m[e](), delete m[e];
                                        });
                                })(p);
                            }
                            return p;
                        }),
                    _ = {
                        particleCount: 50,
                        angle: 90,
                        spread: 45,
                        startVelocity: 45,
                        decay: 0.9,
                        gravity: 1,
                        drift: 0,
                        ticks: 200,
                        x: 0.5,
                        y: 0.5,
                        shapes: ['square', 'circle'],
                        zIndex: 100,
                        colors: ['#26ccff', '#a25afd', '#ff5e7e', '#88ff5a', '#fcff42', '#ffa62d', '#ff36ff'],
                        disableForReducedMotion: !1,
                        scalar: 1,
                    };
                function v(t, e, n) {
                    return (function (t, e) {
                        return e ? e(t) : t;
                    })(t && null != t[e] ? t[e] : _[e], n);
                }
                function b(t) {
                    return t < 0 ? 0 : Math.floor(t);
                }
                function w(t) {
                    return parseInt(t, 16);
                }
                function x(t) {
                    return t.map(S);
                }
                function S(t) {
                    var e = String(t).replace(/[^0-9a-f]/gi, '');
                    return (
                        e.length < 6 && (e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2]),
                        { r: w(e.substring(0, 2)), g: w(e.substring(2, 4)), b: w(e.substring(4, 6)) }
                    );
                }
                function E(t) {
                    (t.width = document.documentElement.clientWidth), (t.height = document.documentElement.clientHeight);
                }
                function C(t) {
                    var e = t.getBoundingClientRect();
                    (t.width = e.width), (t.height = e.height);
                }
                function k(t, n) {
                    var o,
                        l = !t,
                        c = !!v(n || {}, 'resize'),
                        u = v(n, 'disableForReducedMotion', Boolean),
                        h = i && v(n || {}, 'useWorker') ? y() : null,
                        d = l ? E : C,
                        p = !(!t || !h || !t.__confetti_initialized),
                        f = 'function' == typeof matchMedia && matchMedia('(prefers-reduced-motion)').matches;
                    function m(n) {
                        var i = u || v(n, 'disableForReducedMotion', Boolean),
                            m = v(n, 'zIndex', Number);
                        if (i && f)
                            return a(function (t) {
                                t();
                            });
                        l && o
                            ? (t = o.canvas)
                            : l &&
                              !t &&
                              ((t = (function (t) {
                                  var e = document.createElement('canvas');
                                  return (
                                      (e.style.position = 'fixed'),
                                      (e.style.top = '0px'),
                                      (e.style.left = '0px'),
                                      (e.style.pointerEvents = 'none'),
                                      (e.style.zIndex = t),
                                      e
                                  );
                              })(m)),
                              document.body.appendChild(t)),
                            c && !p && d(t);
                        var y = { width: t.width, height: t.height };
                        function _() {
                            if (h) {
                                var e = {
                                    getBoundingClientRect: function () {
                                        if (!l) return t.getBoundingClientRect();
                                    },
                                };
                                return d(e), void h.postMessage({ resize: { width: e.width, height: e.height } });
                            }
                            y.width = y.height = null;
                        }
                        function w() {
                            (o = null),
                                c && e.removeEventListener('resize', _),
                                l && t && (document.body.removeChild(t), (t = null), (p = !1));
                        }
                        return (
                            h && !p && h.init(t),
                            (p = !0),
                            h && (t.__confetti_initialized = !0),
                            c && e.addEventListener('resize', _, !1),
                            h
                                ? h.fire(n, y, w)
                                : (function (e, n, i) {
                                      for (
                                          var l,
                                              c,
                                              u,
                                              h,
                                              p = v(e, 'particleCount', b),
                                              f = v(e, 'angle', Number),
                                              m = v(e, 'spread', Number),
                                              y = v(e, 'startVelocity', Number),
                                              _ = v(e, 'decay', Number),
                                              w = v(e, 'gravity', Number),
                                              S = v(e, 'drift', Number),
                                              E = v(e, 'colors', x),
                                              C = v(e, 'ticks', Number),
                                              k = v(e, 'shapes'),
                                              T = v(e, 'scalar'),
                                              A = (function (t) {
                                                  var e = v(t, 'origin', Object);
                                                  return (e.x = v(e, 'x', Number)), (e.y = v(e, 'y', Number)), e;
                                              })(e),
                                              R = p,
                                              O = [],
                                              I = t.width * A.x,
                                              P = t.height * A.y;
                                          R--;

                                      )
                                          O.push(
                                              ((c =
                                                  (l = {
                                                      x: I,
                                                      y: P,
                                                      angle: f,
                                                      spread: m,
                                                      startVelocity: y,
                                                      color: E[R % E.length],
                                                      shape: k[((h = k.length), Math.floor(Math.random() * (h - 0)) + 0)],
                                                      ticks: C,
                                                      decay: _,
                                                      gravity: w,
                                                      drift: S,
                                                      scalar: T,
                                                  }).angle *
                                                  (Math.PI / 180)),
                                              (u = l.spread * (Math.PI / 180)),
                                              {
                                                  x: l.x,
                                                  y: l.y,
                                                  wobble: 10 * Math.random(),
                                                  velocity: 0.5 * l.startVelocity + Math.random() * l.startVelocity,
                                                  angle2D: -c + (0.5 * u - Math.random() * u),
                                                  tiltAngle: Math.random() * Math.PI,
                                                  color: l.color,
                                                  shape: l.shape,
                                                  tick: 0,
                                                  totalTicks: l.ticks,
                                                  decay: l.decay,
                                                  drift: l.drift,
                                                  random: Math.random() + 5,
                                                  tiltSin: 0,
                                                  tiltCos: 0,
                                                  wobbleX: 0,
                                                  wobbleY: 0,
                                                  gravity: 3 * l.gravity,
                                                  ovalScalar: 0.6,
                                                  scalar: l.scalar,
                                              })
                                          );
                                      return o
                                          ? o.addFettis(O)
                                          : (o = (function (t, e, n, i, o) {
                                                var l,
                                                    c,
                                                    u = e.slice(),
                                                    h = t.getContext('2d'),
                                                    d = a(function (e) {
                                                        function a() {
                                                            (l = c = null), h.clearRect(0, 0, i.width, i.height), o(), e();
                                                        }
                                                        (l = g.frame(function e() {
                                                            !s ||
                                                                (i.width === r.width && i.height === r.height) ||
                                                                ((i.width = t.width = r.width), (i.height = t.height = r.height)),
                                                                i.width || i.height || (n(t), (i.width = t.width), (i.height = t.height)),
                                                                h.clearRect(0, 0, i.width, i.height),
                                                                (u = u.filter(function (t) {
                                                                    return (function (t, e) {
                                                                        (e.x += Math.cos(e.angle2D) * e.velocity + e.drift),
                                                                            (e.y += Math.sin(e.angle2D) * e.velocity + e.gravity),
                                                                            (e.wobble += 0.1),
                                                                            (e.velocity *= e.decay),
                                                                            (e.tiltAngle += 0.1),
                                                                            (e.tiltSin = Math.sin(e.tiltAngle)),
                                                                            (e.tiltCos = Math.cos(e.tiltAngle)),
                                                                            (e.random = Math.random() + 5),
                                                                            (e.wobbleX = e.x + 10 * e.scalar * Math.cos(e.wobble)),
                                                                            (e.wobbleY = e.y + 10 * e.scalar * Math.sin(e.wobble));
                                                                        var n = e.tick++ / e.totalTicks,
                                                                            s = e.x + e.random * e.tiltCos,
                                                                            r = e.y + e.random * e.tiltSin,
                                                                            i = e.wobbleX + e.random * e.tiltCos,
                                                                            o = e.wobbleY + e.random * e.tiltSin;
                                                                        return (
                                                                            (t.fillStyle =
                                                                                'rgba(' +
                                                                                e.color.r +
                                                                                ', ' +
                                                                                e.color.g +
                                                                                ', ' +
                                                                                e.color.b +
                                                                                ', ' +
                                                                                (1 - n) +
                                                                                ')'),
                                                                            t.beginPath(),
                                                                            'circle' === e.shape
                                                                                ? t.ellipse
                                                                                    ? t.ellipse(
                                                                                          e.x,
                                                                                          e.y,
                                                                                          Math.abs(i - s) * e.ovalScalar,
                                                                                          Math.abs(o - r) * e.ovalScalar,
                                                                                          (Math.PI / 10) * e.wobble,
                                                                                          0,
                                                                                          2 * Math.PI
                                                                                      )
                                                                                    : (function (t, e, n, s, r, i, o, a, l) {
                                                                                          t.save(),
                                                                                              t.translate(e, n),
                                                                                              t.rotate(i),
                                                                                              t.scale(s, r),
                                                                                              t.arc(0, 0, 1, 0, a, void 0),
                                                                                              t.restore();
                                                                                      })(
                                                                                          t,
                                                                                          e.x,
                                                                                          e.y,
                                                                                          Math.abs(i - s) * e.ovalScalar,
                                                                                          Math.abs(o - r) * e.ovalScalar,
                                                                                          (Math.PI / 10) * e.wobble,
                                                                                          0,
                                                                                          2 * Math.PI
                                                                                      )
                                                                                : (t.moveTo(Math.floor(e.x), Math.floor(e.y)),
                                                                                  t.lineTo(Math.floor(e.wobbleX), Math.floor(r)),
                                                                                  t.lineTo(Math.floor(i), Math.floor(o)),
                                                                                  t.lineTo(Math.floor(s), Math.floor(e.wobbleY))),
                                                                            t.closePath(),
                                                                            t.fill(),
                                                                            e.tick < e.totalTicks
                                                                        );
                                                                    })(h, t);
                                                                })).length
                                                                    ? (l = g.frame(e))
                                                                    : a();
                                                        })),
                                                            (c = a);
                                                    });
                                                return {
                                                    addFettis: function (t) {
                                                        return (u = u.concat(t)), d;
                                                    },
                                                    canvas: t,
                                                    promise: d,
                                                    reset: function () {
                                                        l && g.cancel(l), c && c();
                                                    },
                                                };
                                            })(t, O, d, n, i)).promise;
                                  })(n, y, w)
                        );
                    }
                    return (
                        (m.reset = function () {
                            h && h.reset(), o && o.reset();
                        }),
                        m
                    );
                }
                (n.exports = k(null, { useWorker: !0, resize: !0 })), (n.exports.create = k);
            })(
                (function () {
                    return 'undefined' != typeof window ? window : 'undefined' != typeof self ? self : this || {};
                })(),
                AE,
                !1
            );
            var RE = AE.exports.create;
            const OE = [
                {
                    path: '',
                    component: (() => {
                        class t {
                            constructor(t) {
                                (this.media = t),
                                    (this.date = 'Saturday, June 25th, 2022'),
                                    (this.locationShort = '828 The Turn, Newport, KY'),
                                    (this.locationFull = '828 The Turn, 828 Monmouth St, Newport, KY 41071');
                            }
                            ngOnInit() {
                                const t = document.getElementById('canvas');
                                RE(t, { resize: !0 })({
                                    particleCount: this.media.isActive('gt-sm') ? 150 : 75,
                                    spread: this.media.isActive('gt-sm') ? 90 : 45,
                                });
                            }
                        }
                        return (
                            (t.ɵfac = function (e) {
                                return new (e || t)(fo(bS));
                            }),
                            (t.ɵcmp = Ut({
                                type: t,
                                selectors: [['app-home']],
                                decls: 170,
                                vars: 5,
                                consts: [
                                    ['fxLayout', 'row', 'fxLayoutAlign', 'center start', 1, 'mat-typography', 'home-container'],
                                    [
                                        'fxLayout',
                                        'column',
                                        'fxLayoutAlign',
                                        'start center',
                                        'fxFlex',
                                        '100%',
                                        'fxFlex.sm',
                                        '90%',
                                        'fxFlex.md',
                                        '80%',
                                        'fxFlex.lg',
                                        '75%',
                                        'fxFlex.gt-lg',
                                        '70%',
                                        1,
                                        'content-container',
                                    ],
                                    ['id', 'home', 'fxLayout', 'column', 'fxLayoutAlign', 'start center'],
                                    [1, 'couple-name'],
                                    ['fxHide.xs', '', 1, 'wedding-short-info'],
                                    ['fxHide.gt-xs', '', 1, 'wedding-short-info'],
                                    ['fxLayout', 'row', 'fxLayoutAlign', 'center center', 1, 'nav-toolbar'],
                                    ['mat-button', '', 'routerLink', '.', 'fragment', 'home', 'routerLinkActive', 'active'],
                                    ['fxHide.xs', ''],
                                    ['mat-button', '', 'routerLink', '.', 'fragment', 'location', 'routerLinkActive', 'active'],
                                    ['mat-button', '', 'routerLink', '.', 'fragment', 'accommodations', 'routerLinkActive', 'active'],
                                    ['mat-button', '', 'routerLink', '.', 'fragment', 'registry', 'routerLinkActive', 'active'],
                                    ['fxLayout', 'row', 'fxLayoutAlign', 'center center', 1, 'banner-img-container'],
                                    ['src', 'assets/kelsey_collin_banner.jpg', 'alt', 'couple photo', 1, 'banner-img'],
                                    ['id', 'location', 'fxLayout', 'column', 'fxLayoutAlign', 'start center'],
                                    ['fxLayout', 'row', 'fxLayoutAlign', 'center center'],
                                    ['src', 'assets/rosemary.png', 1, 'subheader-img', 'left-subheader-img'],
                                    [1, 'subheader'],
                                    ['src', 'assets/thyme.png', 1, 'subheader-img', 'right-subheader-img'],
                                    ['mat-button', '', 'href', 'https://www.theturnvintage.com/', 'target', '_blank'],
                                    ['mat-button', '', 'href', 'https://g.page/828theturn?share', 'target', '_blank'],
                                    [
                                        'fxHide.lt-md',
                                        '',
                                        'src',
                                        'https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3096.7841572621046!2d-84.49349678390418!3d39.0886139432539!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x8841b113ecca0a89%3A0x22bde8aa6a47b9d5!2s828%20The%20Turn!5e0!3m2!1sen!2sus!4v1629928263678!5m2!1sen!2sus',
                                        'width',
                                        '600',
                                        'height',
                                        '450',
                                        'allowfullscreen',
                                        '',
                                        'loading',
                                        'lazy',
                                        2,
                                        'border',
                                        '0',
                                    ],
                                    ['id', 'accommodations', 'fxLayout', 'column', 'fxLayoutAlign', 'start center'],
                                    ['mat-button', '', 'href', ''],
                                    ['id', 'registry', 'fxLayout', 'column', 'fxLayoutAlign', 'start center'],
                                    ['mat-button', '', 'href', 'https://smile.amazon.com/', 'target', '_blank'],
                                    ['svgIcon', 'amazon_logo'],
                                    ['id', 'canvas', 1, 'confetti-canvas'],
                                ],
                                template: function (t, e) {
                                    1 & t &&
                                        (yo(0, 'div', 0),
                                        Bo(1, '\n    '),
                                        yo(2, 'div', 1),
                                        Bo(3, '\n        '),
                                        yo(4, 'section', 2),
                                        Bo(5, '\n            '),
                                        yo(6, 'span', 3),
                                        Bo(7, 'Kelsey & Collin'),
                                        _o(),
                                        Bo(8, '\n            '),
                                        yo(9, 'span', 4),
                                        Bo(10),
                                        _o(),
                                        Bo(11, '\n            '),
                                        yo(12, 'span', 5),
                                        Bo(13),
                                        _o(),
                                        Bo(14, '\n            '),
                                        yo(15, 'span', 5),
                                        Bo(16),
                                        _o(),
                                        Bo(17, '\n\n            '),
                                        yo(18, 'mat-toolbar', 6),
                                        Bo(19, '\n                '),
                                        yo(20, 'button', 7),
                                        Bo(21, '\n                    '),
                                        yo(22, 'mat-icon'),
                                        Bo(23, 'home'),
                                        _o(),
                                        Bo(24, '\n                    '),
                                        yo(25, 'span', 8),
                                        Bo(26, 'Home'),
                                        _o(),
                                        Bo(27, '\n                '),
                                        _o(),
                                        Bo(28, '\n                '),
                                        yo(29, 'button', 9),
                                        Bo(30, '\n                    '),
                                        yo(31, 'mat-icon'),
                                        Bo(32, 'place'),
                                        _o(),
                                        Bo(33, '\n                    '),
                                        yo(34, 'span', 8),
                                        Bo(35, 'Location'),
                                        _o(),
                                        Bo(36, '\n                '),
                                        _o(),
                                        Bo(37, '\n                '),
                                        yo(38, 'button', 10),
                                        Bo(39, '\n                    '),
                                        yo(40, 'mat-icon'),
                                        Bo(41, 'night_shelter'),
                                        _o(),
                                        Bo(42, '\n                    '),
                                        yo(43, 'span', 8),
                                        Bo(44, 'Accommodations'),
                                        _o(),
                                        Bo(45, '\n                '),
                                        _o(),
                                        Bo(46, '\n                '),
                                        yo(47, 'button', 11),
                                        Bo(48, '\n                    '),
                                        yo(49, 'mat-icon'),
                                        Bo(50, 'store'),
                                        _o(),
                                        Bo(51, '\n                    '),
                                        yo(52, 'span', 8),
                                        Bo(53, 'Registry'),
                                        _o(),
                                        Bo(54, '\n                '),
                                        _o(),
                                        Bo(55, '\n            '),
                                        _o(),
                                        Bo(56, '\n\n            '),
                                        yo(57, 'div', 12),
                                        Bo(58, '\n                '),
                                        vo(59, 'img', 13),
                                        Bo(60, '\n            '),
                                        _o(),
                                        Bo(61, '\n        '),
                                        _o(),
                                        Bo(62, '\n\n        '),
                                        yo(63, 'section', 14),
                                        Bo(64, '\n            '),
                                        yo(65, 'div', 15),
                                        Bo(66, '\n                '),
                                        vo(67, 'img', 16),
                                        Bo(68, '\n                '),
                                        yo(69, 'span', 17),
                                        Bo(70, 'Location'),
                                        _o(),
                                        Bo(71, '\n                '),
                                        vo(72, 'img', 18),
                                        Bo(73, '\n            '),
                                        _o(),
                                        Bo(74, '\n            '),
                                        yo(75, 'p'),
                                        Bo(76, '\n                '),
                                        yo(77, 'a', 19),
                                        Bo(78, '\n                    '),
                                        yo(79, 'mat-icon'),
                                        Bo(80, 'web'),
                                        _o(),
                                        Bo(81, '\n                    '),
                                        yo(82, 'span'),
                                        Bo(83, '828 The Turn Website'),
                                        _o(),
                                        Bo(84, '\n                '),
                                        _o(),
                                        Bo(85, '\n            '),
                                        _o(),
                                        Bo(86, '\n            '),
                                        yo(87, 'p'),
                                        Bo(88, '\n                '),
                                        yo(89, 'a', 20),
                                        Bo(90, '\n                    '),
                                        yo(91, 'mat-icon'),
                                        Bo(92, 'navigation'),
                                        _o(),
                                        Bo(93, '\n                    '),
                                        yo(94, 'span'),
                                        Bo(95),
                                        _o(),
                                        Bo(96, '\n                '),
                                        _o(),
                                        Bo(97, '\n            '),
                                        _o(),
                                        Bo(98, '\n            '),
                                        vo(99, 'iframe', 21),
                                        Bo(100, '\n        '),
                                        _o(),
                                        Bo(101, '\n\n        '),
                                        yo(102, 'section', 22),
                                        Bo(103, '\n            '),
                                        yo(104, 'div', 15),
                                        Bo(105, '\n                '),
                                        vo(106, 'img', 16),
                                        Bo(107, '\n                '),
                                        yo(108, 'span', 17),
                                        Bo(109, 'Accommodations'),
                                        _o(),
                                        Bo(110, '\n                '),
                                        vo(111, 'img', 18),
                                        Bo(112, '\n            '),
                                        _o(),
                                        Bo(113, '\n            '),
                                        yo(114, 'p'),
                                        Bo(115, '\n                '),
                                        yo(116, 'a', 23),
                                        Bo(117, '\n                    '),
                                        yo(118, 'mat-icon'),
                                        Bo(119, 'web'),
                                        _o(),
                                        Bo(120, '\n                    '),
                                        yo(121, 'span'),
                                        Bo(122, 'Link to hotel site'),
                                        _o(),
                                        Bo(123, '\n                '),
                                        _o(),
                                        Bo(124, '\n            '),
                                        _o(),
                                        Bo(125, '\n            '),
                                        yo(126, 'p'),
                                        Bo(127, '\n                '),
                                        yo(128, 'a', 23),
                                        Bo(129, '\n                    '),
                                        yo(130, 'mat-icon'),
                                        Bo(131, 'navigation'),
                                        _o(),
                                        Bo(132, '\n                    '),
                                        yo(133, 'span'),
                                        Bo(134, 'link to navigation to hotel'),
                                        _o(),
                                        Bo(135, '\n                '),
                                        _o(),
                                        Bo(136, '\n            '),
                                        _o(),
                                        Bo(137, '\n            '),
                                        yo(138, 'p'),
                                        Bo(139, 'info on hotel'),
                                        _o(),
                                        Bo(140, '\n        '),
                                        _o(),
                                        Bo(141, '\n\n        '),
                                        yo(142, 'section', 24),
                                        Bo(143, '\n            '),
                                        yo(144, 'div', 15),
                                        Bo(145, '\n                '),
                                        vo(146, 'img', 16),
                                        Bo(147, '\n                '),
                                        yo(148, 'span', 17),
                                        Bo(149, 'Registry'),
                                        _o(),
                                        Bo(150, '\n                '),
                                        vo(151, 'img', 18),
                                        Bo(152, '\n            '),
                                        _o(),
                                        Bo(153, '\n            '),
                                        yo(154, 'p'),
                                        Bo(155, '\n                '),
                                        yo(156, 'a', 25),
                                        Bo(157, '\n                    '),
                                        vo(158, 'mat-icon', 26),
                                        Bo(159, '\n                    '),
                                        yo(160, 'span'),
                                        Bo(161, 'Amazon Registry'),
                                        _o(),
                                        Bo(162, '\n                '),
                                        _o(),
                                        Bo(163, '\n            '),
                                        _o(),
                                        Bo(164, '\n        '),
                                        _o(),
                                        Bo(165, '\n    '),
                                        _o(),
                                        Bo(166, '\n'),
                                        _o(),
                                        Bo(167, '\n\n'),
                                        vo(168, 'canvas', 27),
                                        Bo(169, '\n')),
                                        2 & t &&
                                            ($r(10),
                                            $o('', e.date, ' @ ', e.locationShort, ''),
                                            $r(3),
                                            Vo(e.date),
                                            $r(3),
                                            Uo('@ ', e.locationShort, ''),
                                            $r(79),
                                            Vo(e.locationFull));
                                },
                                directives: [US, nE, KS, PS, Dx, ew, gf, vf, Kw, nw],
                                styles: [
                                    '.home-container[_ngcontent-%COMP%]{padding-top:1em;padding-bottom:1em}.couple-name[_ngcontent-%COMP%]{font:400 56px Dancing}.wedding-short-info[_ngcontent-%COMP%]{font:400 20px Dancing}.nav-toolbar[_ngcontent-%COMP%]{background-color:#faebd7;margin-top:10px;margin-bottom:10px}.banner-img-container[_ngcontent-%COMP%]{overflow:hidden}@media screen and (min-width: 600px){.banner-img-container[_ngcontent-%COMP%]{max-height:300px}}@media screen and (max-width: 599px){.banner-img-container[_ngcontent-%COMP%]{max-height:200px}}.banner-img[_ngcontent-%COMP%]{width:100%;height:auto}mat-divider[_ngcontent-%COMP%]{align-self:normal}.subheader[_ngcontent-%COMP%]{font:400 32px Dancing}@media screen and (min-width: 600px){.subheader[_ngcontent-%COMP%]{padding:0 50px}}@media screen and (max-width: 599px){.subheader[_ngcontent-%COMP%]{padding:0 35px}}@media screen and (min-width: 600px){.subheader-img[_ngcontent-%COMP%]{height:100px}}@media screen and (max-width: 599px){.subheader-img[_ngcontent-%COMP%]{height:80px}}.left-subheader-img[_ngcontent-%COMP%]{transform:rotate(-90deg)}.right-subheader-img[_ngcontent-%COMP%]{transform:rotate(90deg)}.confetti-canvas[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;top:0;left:0;pointer-events:none}',
                                ],
                            })),
                            t
                        );
                    })(),
                    data: { title: 'Home' },
                },
            ];
            let IE = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [], imports: [[Of.forChild(OE)], Of] })),
                        t
                    );
                })(),
                PE = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ imports: [[Yc, fE, pE, jx, IE]] })),
                        t
                    );
                })();
            const LE = new yE('App');
            let DE = class {
                constructor(t, e, n, s, r) {
                    (this.router = t),
                        (this.activatedRoute = e),
                        (this.titleService = n),
                        (this.domSanitizer = s),
                        (this.matIconRegistry = r),
                        (this.isInViewport = (t) => {
                            const e = t.getBoundingClientRect();
                            return (
                                e.top >= 0 &&
                                e.left >= 0 &&
                                e.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                                e.right <= (window.innerWidth || document.documentElement.clientWidth)
                            );
                        }),
                        this.matIconRegistry.addSvgIcon('amazon_logo', s.bypassSecurityTrustResourceUrl('./../assets/amazon_logo.svg')),
                        this.router.events.subscribe((t) => {
                            t instanceof Jh &&
                                t.anchor &&
                                setTimeout(() => {
                                    this.scroll('#' + t.anchor);
                                }, 100);
                        });
                }
                ngOnInit() {
                    var t, e;
                    yE.enableProductionMode(),
                        LE.debug('init'),
                        z(this.router.events.pipe(dh((t) => t instanceof Hh)))
                            .pipe(
                                k(() => {
                                    let t = this.activatedRoute;
                                    for (; t.firstChild; ) t = t.firstChild;
                                    return t;
                                }),
                                dh((t) => 'primary' === t.outlet),
                                eh((t) => t.data),
                                ((t = this),
                                (n) => {
                                    const s = SE(e);
                                    return EE(t, s), n.pipe(__(t[s]));
                                })
                            )
                            .subscribe((t) => {
                                const e = t.title;
                                e && this.titleService.setTitle(e);
                            });
                }
                ngOnDestroy() {}
                scroll(t) {
                    const e = document.querySelector(t);
                    e
                        ? this.isInViewport(e) || e.scrollIntoView({ behavior: 'smooth' })
                        : window.scrollTo({ left: 0, top: 0, behavior: 'smooth' });
                }
            };
            (DE.ɵfac = function (t) {
                return new (t || DE)(fo(ff), fo(zd), fo(Mu), fo(Ou), fo(Bw));
            }),
                (DE.ɵcmp = Ut({
                    type: DE,
                    selectors: [['app-root']],
                    decls: 2,
                    vars: 0,
                    template: function (t, e) {
                        1 & t && (vo(0, 'router-outlet'), Bo(1, '\n'));
                    },
                    directives: [bf],
                    styles: ['[_nghost-%COMP%]{display:flex;flex:1}'],
                })),
                (DE = (function (t, e, n, s) {
                    var r,
                        i = arguments.length,
                        o = i < 3 ? e : null === s ? (s = Object.getOwnPropertyDescriptor(e, n)) : s;
                    if ('object' == typeof Reflect && 'function' == typeof Reflect.decorate) o = Reflect.decorate(t, e, n, s);
                    else for (var a = t.length - 1; a >= 0; a--) (r = t[a]) && (o = (i < 3 ? r(o) : i > 3 ? r(e, n, o) : r(e, n)) || o);
                    return i > 3 && o && Object.defineProperty(e, n, o), o;
                })(
                    [
                        (function (t = {}) {
                            return (e) => {
                                e[bE]
                                    ? (function (t, e) {
                                          const n = t.ɵpipe;
                                          n.onDestroy = TE(n.onDestroy, e);
                                      })(e, t)
                                    : (function (t, e) {
                                          t.prototype.ngOnDestroy = TE(t.prototype.ngOnDestroy, e);
                                      })(e, t),
                                    (function (t) {
                                        t.prototype[xE] = !0;
                                    })(e);
                            };
                        })(),
                    ],
                    DE
                ));
            const NE = [{ path: '**', redirectTo: '', pathMatch: 'full' }];
            let FE = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t })),
                        (t.ɵinj = dt({ providers: [], imports: [[Of.forRoot(NE)], Of] })),
                        t
                    );
                })(),
                ME = (() => {
                    class t {}
                    return (
                        (t.ɵfac = function (e) {
                            return new (e || t)();
                        }),
                        (t.ɵmod = Wt({ type: t, bootstrap: [DE] })),
                        (t.ɵinj = dt({
                            providers: [
                                { provide: am, useClass: mE, multi: !0 },
                                { provide: am, useClass: _E, multi: !0 },
                                { provide: ef, useClass: vE },
                            ],
                            imports: [[Nu, Vu, _m, Of, i_, jx, fE, PE, FE]],
                        })),
                        t
                    );
                })();
            (function () {
                if (ic) throw new Error('Cannot enable prod mode after platform setup.');
                rc = !1;
            })(),
                Lu()
                    .bootstrapModule(ME)
                    .catch((t) => console.error(t));
        },
    },
    (t) => {
        'use strict';
        t((t.s = 208));
    },
]);
